[
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "",
    "text": "Instructor\n Mike Johnson\n Geospatial Science &Technology Lead, NOAA\n webpage\n\nOffice Hours\n M,W 11-11:45 (as needed)\n W 9-10\n Lobby by classroom\nLecture\n January 21st - May 9th, 2025\n Monday, Wednesday\n 10:00am - 10:50am\n NR 113\n\nTeaching Assistants\n\n Jaque McVey\n PhD Student, CSU\n Office Hours: 12:30-1:30\n NESB B247\n Alan Cai\n PhD Student, CSU\n linkedin\n Office Hours: Th 1:00-2:00\n NESB A105\nLabs\n Section 1: Th 8:00am–9:50am (McVey)\n Section 2: Th 2:00pm–3:50pm (McVey)\n Section 3: Th 4:00pm–5:50pm (Cai)\n Section 4: F 12:00pm–1:50am (Cai)\n NR 232"
  },
  {
    "objectID": "syllabus.html#about-this-course",
    "href": "syllabus.html#about-this-course",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "About this course:",
    "text": "About this course:\nQuantitative reasoning involves analyzing, interpreting, and solving problems using numerical and logical reasoning. This course equips students with essential data science and quantitative skills, focusing on applying these methods to problems in ecosystem science and sustainability.\nStudents will engage in practical data-driven approaches through lectures, live coding demonstrations, discussions, and hands-on lab sessions. The course emphasizes the use of open-source technologies (R, Quarto), statistical methods, geospatial data analysis, and machine learning within reproducible workflows."
  },
  {
    "objectID": "syllabus.html#course-objectives",
    "href": "syllabus.html#course-objectives",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Course Objectives:",
    "text": "Course Objectives:\nBy the end of this course, students will:\n\nAssess ecosystem science challenges using quantitative tools.\n\nApply data-driven methods to real-world sustainability issues.\n\nUse these skills in scientific research, decision-making, and environmental data analysis.\n\nPrerequisites: MATH 155/160; STAT 301/307/315; ESS 211 or LIFE 320\nCredits: 3\nCourse Website: Github Pages"
  },
  {
    "objectID": "syllabus.html#course-units",
    "href": "syllabus.html#course-units",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Course Units:",
    "text": "Course Units:\nAn approximate weekly schedule is available on the course schedule. While it is subject to change, we will be guided by four primary units:\n\nOpen Science and Tools (Weeks 1-3)\n\nIntroduction to reproducible workflows and software (R, Rmd, Git)\nLearning efficient interaction with computers whether you love them or hate them\n\nWorking with Data (Weeks 4-7)\n\nCleaning, refining, and analyzing messy data sets\nTechniques for effective data interpretation\n\nModeling (Weeks 8-12)\n\nStatistical, predictive, and classification models\nIntroduction to Machine Learning concepts\nUnderstand that “all” problems are either prediction or classification\n\nGeospatial Data (Weeks 13-16)\n\nApplying spatial information to data analysis and problem-solving"
  },
  {
    "objectID": "syllabus.html#grading-evaluation",
    "href": "syllabus.html#grading-evaluation",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Grading & Evaluation:",
    "text": "Grading & Evaluation:\nFinal grades will be based on points earned out throughout the semester based on the following opportunities. Regular participation and consistent practice will set you up for success.\n\n\n\n\n\n\n\n\n\nComponent\nPoints\nPercentage\n\n\n\n\nDaily Exercises\n250\n20%\n\n\nLab Activities\n120\n10%\n\n\nLabs\n620\n50%\n\n\nFinal Project\n250\n20%\n\n\nExtra Credit Opportunities\n130\n10%\n\n\nTotal Assigned Points\n1,240\n\n\n\nTotal Possible Points\n1,370\n\n\n\n\n\n\nGrading Scale:\n\nA+: 100 % to 96.67%\nA : &lt; 96.67 % to 93.33%\nA-: &lt; 93.33 % to 90.0%\nB+: &lt; 90.0 % to 86.67%\nB : &lt; 86.67 % to 83.33%\nB-: &lt; 83.33 % to 80.0%\nC+: &lt; 80.0 % to 76.67%\nC : &lt; 76.67 % to 70.0%\nD : &lt; 70.0 % to 60.0%\nF : &lt; 60.0 % to 0.0%\n\n\n\n\n\nEvaluation Components\n\nDaily Exercises (20%)\nShort coding or reading assignments graded pass/fail. Complete 25 out of 29 assignments, with 4 extra credit opportunities.\n\n\nLab Activities (10%)\nWeekly in-class activities reinforcing lecture topics. Complete 12 out of 13 activities, with 1 extra credit opportunity.\n\n\nLabs (50%)\nApproximately 9 hands-on labs will provide applied learning experiences, focusing on solving real-world problems through data analysis.\n\n\nFinal project (20%)\nStudents will design and choose a final project to demonstrate their quantitative reasoning skills, mixing ideas from lectures and labs to answer a question of interest to them. Final projects will be presented in the final lab section - lightning talk style.\n\n\n\nExtra Credit Opportunities (10%)\n\n\nCourse Material\n\nAll readings and resources are free and avialable online\nIt is highly encouraged that you do all work on you own laptop. You’ll need a machine with a full OS (not Chromebook) to install the software and process the data we’ll be working with. If this is not possible for you, please work with me or your TA to find a good solution.\nThis class borrows from the R community and the data science world at large - particualry from UCSB. It seeks to provide a curreated set of the best material along with careful guidance through it. If someone has made exceptional resources, we want to share that with you rather then reinvnet the wheel (a core tenet of data science at large - borrow, share, contirbute)"
  },
  {
    "objectID": "syllabus.html#software",
    "href": "syllabus.html#software",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Software",
    "text": "Software\nIn this course we will use R which is an open source programming environment. You will interact with R through the RStudio IDE. Your projects and code will be turned into through GitHub as Quarto reports. Through the course you will build an online portfolio that can be taken with you later on. If you haven’t used these tools before, don’t worry - we will get up and running with them during the first week."
  },
  {
    "objectID": "syllabus.html#references",
    "href": "syllabus.html#references",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "References",
    "text": "References\nI recommend the following reference if a topic peeks your interest. Versions of all of them are available for free at the following links:\n\nR Programming: Hadley Wickham et al., R for Data Science\nData Visualization: Claus E. Wilke, Fundamentals of Data Visualization.\nGeospatial Data Science: Robin Lovelace et al., Geocomputation with R\nMachine Learning: Max Kuhn and Julia Silge, Tidy Modeling with R\nCommunication: Quarto Guide"
  },
  {
    "objectID": "slides/4-your-tools.html",
    "href": "slides/4-your-tools.html",
    "title": "Lecture 04",
    "section": "",
    "text": "In the modern environmental data science landscape, a variety of tools help analyze spatial data, build reproducible workflows, and collaborate effectively. This document summarizes five key tools — R, RStudio, Git, GitHub, and Quarto — that are fundamental for careers in environmental science and that have been installed in this unit:"
  },
  {
    "objectID": "slides/4-your-tools.html#packages",
    "href": "slides/4-your-tools.html#packages",
    "title": "Lecture 04",
    "section": "Packages",
    "text": "Packages\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR packages are collections of functions, data, and documentation that extend the base capabilities of R. Packages, can be easily installed from repositories like CRAN (Comprehensive R Archive Network), Bioconductor, and GitHub, allowing users to perform specialized tasks such as geospatial analysis (sf, raster), machine learning (tidymodels, caret), and environmental data access (dataRetrival, climateR). The modular nature of R packages enables researchers to tailor their workflows to specific needs while promoting reproducibility and collaboration. Additionally, the active R community continuously develops and maintains packages, ensuring that the latest scientific methods and computational tools are available to environmental scientists and data analysts alike."
  },
  {
    "objectID": "slides/4-your-tools.html#tidyverse",
    "href": "slides/4-your-tools.html#tidyverse",
    "title": "Lecture 04",
    "section": "tidyverse",
    "text": "tidyverse\n\n\n\n\n\n\nThe tidyverse, a collection of R packages designed for data science, makes learning R more intuitive while still offering the flexibility needed for long-time programmers. Packages like dplyr, ggplot2, tidyr, and readr provide a consistent, human-readable syntax that simplifies data manipulation, visualization, and cleaning. The pipe operator (|&gt;) and chaining functions (%&gt;%) allow for streamlined workflows, reducing the need for nested functions while improving code readability. For beginners, this structured approach lowers the barrier to entry, making it easier to work with data without needing extensive programming experience. Meanwhile, experienced programmers benefit from the modularity and extensibility of the tidyverse, enabling them to integrate R with other languages like Python, SQL, or even shell scripts (e.g Bash). This balance between simplicity and power makes the tidyverse an ideal framework for both learning R and scaling up to more advanced environmental data science applications."
  },
  {
    "objectID": "slides/4-your-tools.html#tidymodels",
    "href": "slides/4-your-tools.html#tidymodels",
    "title": "Lecture 04",
    "section": "tidymodels",
    "text": "tidymodels\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe tidymodels framework extends the tidyverse philosophy to machine learning, providing a consistent and user-friendly approach to model building and evaluation. With a syntax similar to tidyverse packages, tidymodels makes it easier for those familiar with R’s data wrangling tools to transition into predictive modeling. The framework includes packages like parsnip for model specification, recipes for data preprocessing, and yardstick for performance evaluation. For early-career environmental scientists, tidymodels offers an accessible way to learn machine learning basics, such as regression, classification, and resampling techniques, while maintaining best practices like reproducibility and workflow automation. Beyond learning, it provides powerful tools for running models that enhance environmental science, whether for predicting climate patterns, classifying land cover, or analyzing water quality trends, allowing scientists to make data-driven decisions with confidence."
  },
  {
    "objectID": "slides/4-your-tools.html#terminal-interface",
    "href": "slides/4-your-tools.html#terminal-interface",
    "title": "Lecture 04",
    "section": "Terminal (Interface):",
    "text": "Terminal (Interface):\nA terminal is a program that provides a text-based interface for interacting with the system. It does not process commands itself but acts as a bridge between the user and the shell.\n\nExamples: GNOME Terminal, macOS Terminal, Windows Terminal, Alacritty."
  },
  {
    "objectID": "slides/4-your-tools.html#shell-command-processor",
    "href": "slides/4-your-tools.html#shell-command-processor",
    "title": "Lecture 04",
    "section": "Shell (Command Processor)",
    "text": "Shell (Command Processor)\nA shell is a command-line interpreter that processes user commands. It runs inside a terminal and executes commands to interact with the operating system.\n\nExamples: sh (Bourne Shell), Bash (Bourne Again Shell), zsh (Z Shell), ksh (Korn Shell), fish (Friendly Interactive Shell)."
  },
  {
    "objectID": "slides/4-your-tools.html#bash-a-type-of-shell",
    "href": "slides/4-your-tools.html#bash-a-type-of-shell",
    "title": "Lecture 04",
    "section": "Bash (A Type of Shell)",
    "text": "Bash (A Type of Shell)\nBash (Bourne Again Shell) is one of the most widely used shells, an extension of the original Bourne Shell (sh) with additional scripting capabilities. Default on most Linux distributions and older versions of macOS (before switching to zsh). Supports features like scripting, history, tab completion, and automation."
  },
  {
    "objectID": "slides/4-your-tools.html#how-they-work-together",
    "href": "slides/4-your-tools.html#how-they-work-together",
    "title": "Lecture 04",
    "section": "How They Work Together",
    "text": "How They Work Together\n\nYou open a terminal (like GNOME Terminal or macOS Terminal).\nThe terminal launches a shell (such as Bash or zsh).\nYou type a command, and the shell interprets and executes it.\n\nAnalogy: Terminal = TV screen & remote (interface to interact). Shell = Cable box (interprets inputs and sends output). Bash = Specific cable provider (one of many options for command processing).\nFor most users, Bash inside a terminal is the default way to interact with Linux and macOS systems, making it essential for scripting, automation, and working with geospatial and environmental data tools like GDAL and PROJ."
  },
  {
    "objectID": "slides/4-your-tools.html#key-applications-for-environmental-scientists",
    "href": "slides/4-your-tools.html#key-applications-for-environmental-scientists",
    "title": "Lecture 04",
    "section": "Key Applications for Environmental Scientists",
    "text": "Key Applications for Environmental Scientists\nGeospatial Data Processing: Tools like GDAL, PROJ, and OGR allow for the manipulation of large geospatial datasets, such as raster and vector data.\n\nExample: Converting coordinate systems or clipping satellite imagery using gdalwarp or ogr2ogr.\n\nClimate and Hydrologic Modeling: Many environmental models (e.g., WRF, SWAT, DHSVM, PRMS) are run via the command line, often on remote servers or high-performance computing (HPC) clusters.\n\nExample: Running a WRF simulation with wrf.exe or automating a SWAT model run.\n\nVersion Control and Collaboration: Git commands (git add, git commit, git push) allow researchers to track changes and collaborate efficiently.\nHigh-Performance Computing (HPC): Many environmental models and analyses require substantial computational power. Understanding CLI commands is essential for running jobs on remote servers via SSH and Slurm.\n\nExample: Submitting a model run to an HPC cluster using sbatch myscript.sh.\n\nAutomating Repetitive Tasks: Bash scripting can automate data preprocessing, file management, and analysis pipelines.\n\nExample: Running an analysis or report every day"
  },
  {
    "objectID": "slides/2-digital-environment.html#your-environment",
    "href": "slides/2-digital-environment.html#your-environment",
    "title": "Lecture 02",
    "section": "Your Environment",
    "text": "Your Environment\n\n\n\n\n\n\nComputer: An electronic device for storing and processing data, typically in binary form, according to instruction. Computers store persistent data on disk, ephemeral data in memory, and executes processes with the CPU (Central Processing Unit).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFile: A block of arbitrary information available to a computer program."
  },
  {
    "objectID": "slides/2-digital-environment.html#compute",
    "href": "slides/2-digital-environment.html#compute",
    "title": "Lecture 02",
    "section": "Compute",
    "text": "Compute"
  },
  {
    "objectID": "slides/2-digital-environment.html#bytes-vs-bits",
    "href": "slides/2-digital-environment.html#bytes-vs-bits",
    "title": "Lecture 02",
    "section": "Bytes vs Bits",
    "text": "Bytes vs Bits\n\n\n\n\n\n\n\nA byte is a group of 8 binary digits (bits) and a unit of memory size.\nThe bit is a basic unit of information in computing and represents a logical state with two possible values (0 or 1)."
  },
  {
    "objectID": "slides/2-digital-environment.html#file-storage",
    "href": "slides/2-digital-environment.html#file-storage",
    "title": "Lecture 02",
    "section": "File Storage",
    "text": "File Storage\n\nFiles are stored as a collection of bytes on a hard drive\nHard drives do not understand files - they just store bytes and directions to those bytes\nWe need ways to retrieve (and write) bytes from (and to) the hard drive.\n\n\n\n\n\n\n\n\nInterpreting Capacity\n\n\n\nNew computer capacity"
  },
  {
    "objectID": "slides/2-digital-environment.html#storage-pattern",
    "href": "slides/2-digital-environment.html#storage-pattern",
    "title": "Lecture 02",
    "section": "Storage Pattern",
    "text": "Storage Pattern\n\n\n\n\n\n\nFile Storage\n\n\n\nDefragmentation"
  },
  {
    "objectID": "slides/2-digital-environment.html#what-is-a-file",
    "href": "slides/2-digital-environment.html#what-is-a-file",
    "title": "Lecture 02",
    "section": "What is a file?",
    "text": "What is a file?\n\n\n\n\n\n\n\nFiles save data on the hard drive as bytes in a meaningful way.\nFiles have three key properties:\n\na name (machine and human interpret-able address)\na path (a location in the file system)\nan extension (how to/what program reads the format)"
  },
  {
    "objectID": "slides/2-digital-environment.html#filesystem",
    "href": "slides/2-digital-environment.html#filesystem",
    "title": "Lecture 02",
    "section": "Filesystem",
    "text": "Filesystem\n\n\n\n\n\n\nTip\n\n\nFor every file, there are paths and directories that lead to that specific file. These paths and directories are called File Systems.\n\n\n\n\n\n\n\n\n\n\nFilesystem: describes the methods an operating system uses to organize files\n\nIf you are on a Windows device  , and you want to find a file you just downloaded, you go to “This PC,” from where you click on “Documents” and there you find yet another folder called “Downloads” that has the downloaded files stored.\nIf you are on a Mac  , to get the same result is click on “Downloads.” Whether you do it from the menu bar or anywhere else, it’s going to get you to exactly where you need to go."
  },
  {
    "objectID": "slides/2-digital-environment.html#directories",
    "href": "slides/2-digital-environment.html#directories",
    "title": "Lecture 02",
    "section": "Directories",
    "text": "Directories\n\n\n\n\n\n\n\nDirectory: is a location for storing, organizing, and separating files and other directories on a computer. Think of folders!\nRoot directory: the “highest” or top-level directory in the hierarchy.\n\nThe root directory contains all other folders/files in the drive or folder\nSometimes referred to as the home directory"
  },
  {
    "objectID": "slides/2-digital-environment.html#file-names",
    "href": "slides/2-digital-environment.html#file-names",
    "title": "Lecture 02",
    "section": "File Names",
    "text": "File Names\n\n\n\n\n\n\nTip\n\n\n“There are only two hard things in Computer Science: cache invalidation and naming things.” ~Phil Karlton\n\n\n\n\nFile names/paths are how we locate and identify information stored on a machine.\nNames are always up to us as users!\n\n\nThree Principles for file names\n\nmachine readable\nhuman readable\nsortable"
  },
  {
    "objectID": "slides/2-digital-environment.html#machine-readable",
    "href": "slides/2-digital-environment.html#machine-readable",
    "title": "Lecture 02",
    "section": "machine readable",
    "text": "machine readable\n\navoid spaces, punctuation, accented characters, and mixed cases\nregular expression friendly (e.g. use patterns!)\nuse ISO 8601 dates (YYYY-MM-DD)\nbe consistent with delimiters (easy to compute on)\nUse “_” (underscores) to separate “metadata” you want latter\nUse “-” (hyphens) to separate words for readability (like dates or names)"
  },
  {
    "objectID": "slides/2-digital-environment.html#doing-so-makes-files",
    "href": "slides/2-digital-environment.html#doing-so-makes-files",
    "title": "Lecture 02",
    "section": "Doing so makes files …",
    "text": "Doing so makes files …\n\neasy to search for & narrow\n\n\n\n# Only those files with pattern \"_tx\"\nfiles = list.files(\"data/usgs-files\", pattern = \"_tx\") \nlength(files) # total number of Texas files\n#&gt; [1] 27\n\n\n#&gt; [1] \"1903-07-01_08033500_00060_tyler_tx.txt\"   \n#&gt; [2] \"1923-10-01_08033000_00060_angelina_tx.txt\"\n\n\n\nand metadata easy to recover (easy to compute on)\n\n\n\nstringr::str_split(files, \"[_\\\\.]\", simplify = TRUE) \n\n\n#&gt;    StartDate   siteID parameterCode   county state extension\n#&gt; 1 1903-07-01 08033500         00060    tyler    tx       txt\n#&gt; 2 1923-10-01 08033000         00060 angelina    tx       txt\n#&gt; 3 1923-10-01 08180500         00060   medina    tx       txt\n#&gt; 4 1923-12-01 08082500         00060   baylor    tx       txt\n#&gt; 5 1924-08-01 08062500         00060    ellis    tx       txt"
  },
  {
    "objectID": "slides/2-digital-environment.html#human-readable",
    "href": "slides/2-digital-environment.html#human-readable",
    "title": "Lecture 02",
    "section": "human readable",
    "text": "human readable\n\nFile names contain information about the content and purpose of the file\neasy to find the right file a year from now\n\n\n\nlist.files(\"R\")\n#&gt; [1] \"00_src_utils.R\"         \"01_src_data-download.R\" \"02_src_data-clean.R\"   \n#&gt; [4] \"03_src_analysis.R\"      \"04_src_figures.R\"\n\n\nHere, we see the order that the files run (utilities, download, clean, analyze, figures), the project they belong to (src), are archived in the file names.\n\n\n\n\n#&gt;   Order Project       Purpose extension\n#&gt; 1    00     src         utils         R\n#&gt; 2    01     src data-download         R\n#&gt; 3    02     src    data-clean         R\n#&gt; 4    03     src      analysis         R\n#&gt; 5    04     src       figures         R"
  },
  {
    "objectID": "slides/2-digital-environment.html#sort-easily",
    "href": "slides/2-digital-environment.html#sort-easily",
    "title": "Lecture 02",
    "section": "Sort easily",
    "text": "Sort easily\n\nput numeric values first (use leading 0 for 1-9)\nuse ISO 8601 dates (YYYY-MM-DD)"
  },
  {
    "objectID": "slides/2-digital-environment.html#file-paths",
    "href": "slides/2-digital-environment.html#file-paths",
    "title": "Lecture 02",
    "section": "File Paths",
    "text": "File Paths\n\n\n\n\n\n\n\nFile paths tell us the location of a file within the file system\nDirectories are stored as hierarchies, again with root (home) directory being the one holding everything on a system\nThe folder you are in, is called your working directory. (think pwd)\nThe folder above the working directory is the parent directory\nAll folders within the working directory are sub folders or child folder"
  },
  {
    "objectID": "slides/2-digital-environment.html#declaring-file-paths",
    "href": "slides/2-digital-environment.html#declaring-file-paths",
    "title": "Lecture 02",
    "section": "Declaring File Paths",
    "text": "Declaring File Paths\n\nFiles are located by their path. Think of this as the directions - from the root directory.\nDirectories are separated with backslashes (“\\\") on windows, and forward slashes (”/“) or MacOS and Linux machines."
  },
  {
    "objectID": "slides/2-digital-environment.html#example",
    "href": "slides/2-digital-environment.html#example",
    "title": "Lecture 02",
    "section": "Example:",
    "text": "Example:\n/Users/mikejohnson/github/csu-ess-330/slides/images/03-bit-byte.png\n\nRoot: /Users/mikejohnson  \n\n\n\nSys.getenv(\"LOGNAME\")\n#&gt; [1] \"mikejohnson\"\n\n\ngit-enabled projects: github  \nproject: csu-ess-330  \nsub directory: slides  \nsub directory: images  \nfile: 03-bit-byte  \next: .png"
  },
  {
    "objectID": "slides/2-digital-environment.html#absolute-vs-realative-paths",
    "href": "slides/2-digital-environment.html#absolute-vs-realative-paths",
    "title": "Lecture 02",
    "section": "Absolute vs Realative Paths",
    "text": "Absolute vs Realative Paths\nThere are two ways to specify a file path.\n\n\nAn absolute path always begins in the root folder\n\n\n\n\nimg &lt;- png::readPNG('/Users/mikejohnson/github/csu-ess-330/slides/images/03-bit-byte.png')\n\n\nA relative path is relative to the current working directory\n\n\n\n\ngetwd()\n#&gt; [1] \"/Users/mikejohnson/github/csu-ess-330/slides\"\nimg &lt;- png::readPNG('images/03-bit-byte.png')"
  },
  {
    "objectID": "slides/2-digital-environment.html#and-.-notation",
    "href": "slides/2-digital-environment.html#and-.-notation",
    "title": "Lecture 02",
    "section": ".. and . notation",
    "text": ".. and . notation\n\n\n\n\n\n\n\nThe dot (.) and dot-dot (..) notation to help us write shorter paths\nA single ‘.’ denotes “this directory”.\nTwo periods (“..”) means “the parent directory”"
  },
  {
    "objectID": "slides/2-digital-environment.html#enforcing-relative-paths",
    "href": "slides/2-digital-environment.html#enforcing-relative-paths",
    "title": "Lecture 02",
    "section": "Enforcing Relative Paths",
    "text": "Enforcing Relative Paths\n\n\n\n\n\n\nTip\n\n\nWorking with absolute paths can be a pain compared to relative paths…\n\n\n\n\nIt is a good practice to keep all the files associated with a project — input data, R scripts, analytic results, figures - together.\nThis is such a common practice that RStudio has built-in support for this via projects.\nA good project layout will ultimately make your life easier:\n\nIt will help ensure the integrity of your data;\nIt makes it simpler to share your code with someone else (a lab-mate, collaborator, or supervisor);\nIt allows you to easily upload your code with your manuscript submission;\nIt makes it easier to pick the project back up after a break."
  },
  {
    "objectID": "slides/2-digital-environment.html#file-extensions",
    "href": "slides/2-digital-environment.html#file-extensions",
    "title": "Lecture 02",
    "section": "File Extensions",
    "text": "File Extensions\n\n\n\n\n\n\n\nAll files store bits.\nExtensions can be considered a type of metadata that provides information about the way data might be stored\nThere are 1000’s of different formats for data ranging from common to custom\nEach format defines how the sequence of bits and bytes are laid out\nIndicate the characteristics of the file, its intended use, and the default applications that can open/use the file.\nIf you double click a .docx file it opens in Word which interprets the meaning of the bytes\nIf you double click an .R file it opens with RStudio, and R interprets the meaning of the bytes"
  },
  {
    "objectID": "slides/2-digital-environment.html#extension-interpretation",
    "href": "slides/2-digital-environment.html#extension-interpretation",
    "title": "Lecture 02",
    "section": "Extension Interpretation",
    "text": "Extension Interpretation\n\nReaders depended on anticipated structure\n\n\n\nimg &lt;- jpeg::readJPEG('images/03-bit-byte.png')\n#&gt; Error in jpeg::readJPEG(\"images/03-bit-byte.png\"): JPEG decompression error: Not a JPEG file: starts with 0x89 0x50\n\n\nThe file is actually a PNG with the wrong file extension. “0x89 0x50” is how a PNG file starts.\n\n\n\n\nimg &lt;- png::readPNG('images/03-bit-byte.png')\n\n\nThe data returned to R is a structured set of bits, interpreted according to the directions of the file and the interpreting language!\n\n\n\n\ndim(img)\n#&gt; [1] 394 768   3\nclass(img)\n#&gt; [1] \"array\"\nstr(img)\n#&gt;  num [1:394, 1:768, 1:3] 1 1 1 1 1 1 1 1 1 1 ...\n\n\n\n\nplot(NA, xlim = c(0, 2), ylim = c(0, 1))\nrasterImage(img, 0, 0, 2, 1)"
  },
  {
    "objectID": "slides/2-digital-environment.html#bytes-being-interpreted",
    "href": "slides/2-digital-environment.html#bytes-being-interpreted",
    "title": "Lecture 02",
    "section": "Bytes Being Interpreted",
    "text": "Bytes Being Interpreted\n\n\n\n# Character Object\n(x &lt;- \"ESS 330\")\n\n\n\n#&gt; [1] \"ESS 330\""
  },
  {
    "objectID": "slides/2-digital-environment.html#bytes-being-interpreted-1",
    "href": "slides/2-digital-environment.html#bytes-being-interpreted-1",
    "title": "Lecture 02",
    "section": "Bytes Being Interpreted",
    "text": "Bytes Being Interpreted\n\n\n\n# Character Object\n(x &lt;- \"ESS 330\")\n\n# Character Object to Raw Type\n# How R sees the data\n(y &lt;- charToRaw(x))\n\n\n\n#&gt; [1] \"ESS 330\"\n#&gt; [1] 45 53 53 20 33 33 30"
  },
  {
    "objectID": "slides/2-digital-environment.html#bytes-being-interpreted-2",
    "href": "slides/2-digital-environment.html#bytes-being-interpreted-2",
    "title": "Lecture 02",
    "section": "Bytes Being Interpreted",
    "text": "Bytes Being Interpreted\n\n\n\n# Character Object\n(x &lt;- \"ESS 330\")\n\n# Character Object to Raw Type\n# How R sees the data\n(y &lt;- charToRaw(x))\n\n# Raw to Bits\n# Whats on disk\n(z &lt;- rawToBits(y))\n\n\n\n#&gt; [1] \"ESS 330\"\n#&gt; [1] 45 53 53 20 33 33 30\n#&gt;  [1] 01 00 01 00 00 00 01 00 01 01 00 00 01 00 01 00 01 01 00 00 01 00 01 00 00\n#&gt; [26] 00 00 00 00 01 00 00 01 01 00 00 01 01 00 00 01 01 00 00 01 01 00 00 00 00\n#&gt; [51] 00 00 01 01 00 00"
  },
  {
    "objectID": "slides/2-digital-environment.html#bytes-being-interpreted-3",
    "href": "slides/2-digital-environment.html#bytes-being-interpreted-3",
    "title": "Lecture 02",
    "section": "Bytes Being Interpreted",
    "text": "Bytes Being Interpreted\n\n\n\n# Character Object\n(x &lt;- \"ESS 330\")\n\n# Character Object to Raw Type\n# How R sees the data\n(y &lt;- charToRaw(x))\n\n# Raw to Bits\n# Whats on disk\n(z &lt;- rawToBits(y))\n\nlength(z)\n\n\n\n#&gt; [1] \"ESS 330\"\n#&gt; [1] 45 53 53 20 33 33 30\n#&gt;  [1] 01 00 01 00 00 00 01 00 01 01 00 00 01 00 01 00 01 01 00 00 01 00 01 00 00\n#&gt; [26] 00 00 00 00 01 00 00 01 01 00 00 01 01 00 00 01 01 00 00 01 01 00 00 00 00\n#&gt; [51] 00 00 01 01 00 00\n#&gt; [1] 56"
  },
  {
    "objectID": "slides/2-digital-environment.html#bytes-being-interpreted-4",
    "href": "slides/2-digital-environment.html#bytes-being-interpreted-4",
    "title": "Lecture 02",
    "section": "Bytes Being Interpreted",
    "text": "Bytes Being Interpreted\n\n\n\n# Character Object\n(x &lt;- \"ESS 330\")\n\n# Character Object to Raw Type\n# How R sees the data\n(y &lt;- charToRaw(x))\n\n# Raw to Bits\n# Whats on disk\n(z &lt;- rawToBits(y))\n\nlength(z)\n\nnchar(x)\n\n\n\n#&gt; [1] \"ESS 330\"\n#&gt; [1] 45 53 53 20 33 33 30\n#&gt;  [1] 01 00 01 00 00 00 01 00 01 01 00 00 01 00 01 00 01 01 00 00 01 00 01 00 00\n#&gt; [26] 00 00 00 00 01 00 00 01 01 00 00 01 01 00 00 01 01 00 00 01 01 00 00 00 00\n#&gt; [51] 00 00 01 01 00 00\n#&gt; [1] 56\n#&gt; [1] 7"
  },
  {
    "objectID": "slides/2-digital-environment.html#bytes-being-interpreted-5",
    "href": "slides/2-digital-environment.html#bytes-being-interpreted-5",
    "title": "Lecture 02",
    "section": "Bytes Being Interpreted",
    "text": "Bytes Being Interpreted\n\n\n\n# Character Object\n(x &lt;- \"ESS 330\")\n\n# Character Object to Raw Type\n# How R sees the data\n(y &lt;- charToRaw(x))\n\n# Raw to Bits\n# Whats on disk\n(z &lt;- rawToBits(y))\n\nlength(z)\n\nnchar(x)\n\nnchar(x) == (length(z)/8)\n\n\n\n#&gt; [1] \"ESS 330\"\n#&gt; [1] 45 53 53 20 33 33 30\n#&gt;  [1] 01 00 01 00 00 00 01 00 01 01 00 00 01 00 01 00 01 01 00 00 01 00 01 00 00\n#&gt; [26] 00 00 00 00 01 00 00 01 01 00 00 01 01 00 00 01 01 00 00 01 01 00 00 00 00\n#&gt; [51] 00 00 01 01 00 00\n#&gt; [1] 56\n#&gt; [1] 7\n#&gt; [1] TRUE\n\n\nExample"
  },
  {
    "objectID": "slides/2-digital-environment.html#overview-of-file-types",
    "href": "slides/2-digital-environment.html#overview-of-file-types",
    "title": "Lecture 02",
    "section": "Overview of File Types",
    "text": "Overview of File Types\n\nText Files: Human-readable, easy to edit (e.g., .txt, .csv).\nBinary Files: Optimized for performance, not human-readable (e.g., .nc, .tif).\nStructured Files: Contain unified metadata and data (e.g., .json, .xlsx)."
  },
  {
    "objectID": "slides/2-digital-environment.html#practical-contexts-for-files-in-ecosystem-science",
    "href": "slides/2-digital-environment.html#practical-contexts-for-files-in-ecosystem-science",
    "title": "Lecture 02",
    "section": "Practical Contexts for Files in Ecosystem Science",
    "text": "Practical Contexts for Files in Ecosystem Science\n\nCSV: Used for tabular field survey data (e.g., species counts, water quality measurements).\nGeoTIFF: Stores spatial data like satellite imagery or digital elevation models (DEMs).\nNetCDF: Common for data with space and time data (multi-dimensional arrays) like climate models, hydrological simulations, and multidimensional data.\nJSON/GeoJSON: Facilitates sharing geographic features in web applications or APIs.\nGPKG (GeoPackage): An open, standards-based format for spatial data that supports vector and raster data.\nSHP (Shapefile): Widely used for vector geographic data, though limited in attribute sizes and modern functionality."
  },
  {
    "objectID": "slides/2-digital-environment.html#structure",
    "href": "slides/2-digital-environment.html#structure",
    "title": "Lecture 02",
    "section": "Structure",
    "text": "Structure\n\n\nProtocol (Scheme): https, ftp, s3, …\nSubdomain\nDomain Name\nTop Level Domain (TLD)\nPath/File (w/ extension!)\nParameters (APIs, databases, etc.)"
  },
  {
    "objectID": "slides/2-digital-environment.html#servers-acts-as-a-file-system",
    "href": "slides/2-digital-environment.html#servers-acts-as-a-file-system",
    "title": "Lecture 02",
    "section": "Servers acts as a file system",
    "text": "Servers acts as a file system\nhttps://mikejohnson51.github.io/\n\n{Protocol (https)} / {subdomain} / {domain} / {top level domain}\n\n\nhttps://mikejohnson51.github.io/csu-ess-330/\n\nProtocol, subdomain, domain, TLD, path (repo)\n\n\n\nhttps://mikejohnson51.github.io/csu-ess-330/schedule.html\n\nProtocol, subdomain, domain, TLD, repo, file\n\n\n\nhttps://mikejohnson51.github.io/csu-ess-330/slides/1-welcome.html#/title-slide\n\nProtocol, subdomain, domain, TLD, repo, directory, file, component (html)"
  },
  {
    "objectID": "slides/2-digital-environment.html#cloud",
    "href": "slides/2-digital-environment.html#cloud",
    "title": "Lecture 02",
    "section": "Cloud",
    "text": "Cloud\ns3://spatial-water-noaa/nwm/CONUS/ISLTYP.tif\n\n{Protocol (s3)} / {bucket} / {directory} / {file}"
  },
  {
    "objectID": "slides/2-digital-environment.html#information",
    "href": "slides/2-digital-environment.html#information",
    "title": "Lecture 02",
    "section": "Information",
    "text": "Information\nhttps://www.etix.com/ticket/p/53375671/steel-pulse-50th-anniversary-tour-fort-collins-washingtons\n\n\n\n\n\n\n\nImportant\n\n\nindex.html is everywhere online (lets take a look!)"
  },
  {
    "objectID": "slides/2-digital-environment.html#summary",
    "href": "slides/2-digital-environment.html#summary",
    "title": "Lecture 02",
    "section": "Summary:",
    "text": "Summary:"
  },
  {
    "objectID": "slides/2-digital-environment.html#next-time",
    "href": "slides/2-digital-environment.html#next-time",
    "title": "Lecture 02",
    "section": "Next Time:",
    "text": "Next Time:\n\n\n\n\n\n\n\nDaily Assignment: Set up Git and Github\n\n\n\n\n\n\n\n\n\nNext Topic: Data Types\n\n\n\n\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "",
    "text": "Understand the essentials of modern data workflows. This module focuses on setting up your computational environment with R, RStudio, Git, and GitHub while introducing best practices for organizing and managing data. Learn how computers process and interface with data, ensuring you’re equipped for transparent and reproducible science.\n\n\n\n\n\n\nLearning Outcomes\n\n\n\n\nSet up and navigate R, RStudio, Git, and GitHub.\nDevelop effective data organization strategies.\nUnderstand data structures and types.\n\n\n\n\n\n Lecture 01 (w1): Welcome!\n Lecture 02 (w2): Your Digital Environment\n Lecture 03 (w2): Data Types\n ** —- (w3)**: CANCELLED\n Lecture 04 (w3): Your Tools: Interactive Example\n\nExercise 01: Setup R & RStudio\nExercise 02: Intro to Terminal / Git Install\nExercise 03: Your first Project\n** —- **: CANCELLED\nExercise 04: Tools, Forking, Quarto"
  },
  {
    "objectID": "schedule.html#component-1-open-science-tools",
    "href": "schedule.html#component-1-open-science-tools",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "",
    "text": "Understand the essentials of modern data workflows. This module focuses on setting up your computational environment with R, RStudio, Git, and GitHub while introducing best practices for organizing and managing data. Learn how computers process and interface with data, ensuring you’re equipped for transparent and reproducible science.\n\n\n\n\n\n\nLearning Outcomes\n\n\n\n\nSet up and navigate R, RStudio, Git, and GitHub.\nDevelop effective data organization strategies.\nUnderstand data structures and types.\n\n\n\n\n\n Lecture 01 (w1): Welcome!\n Lecture 02 (w2): Your Digital Environment\n Lecture 03 (w2): Data Types\n ** —- (w3)**: CANCELLED\n Lecture 04 (w3): Your Tools: Interactive Example\n\nExercise 01: Setup R & RStudio\nExercise 02: Intro to Terminal / Git Install\nExercise 03: Your first Project\n** —- **: CANCELLED\nExercise 04: Tools, Forking, Quarto"
  },
  {
    "objectID": "schedule.html#component-2-working-with-data",
    "href": "schedule.html#component-2-working-with-data",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Component 2: Working with Data",
    "text": "Component 2: Working with Data\nBuild confidence in wrangling, visualizing, and analyzing data. This section covers importing and cleaning data sets, working with joins, and creating effective visualizations. You’ll also delve into study design, hypothesis testing, and statistical analyses spanning uni-variate, bivariate, and multivariate techniques.\n\n\n\n\n\n\nLearning Outcomes\n\n\n\n\nImport, clean, and merge data sets from diverse sources using core tidyverse packages.\nConduct hypothesis testing and interpret results.\nCreate impact visualizations to communicate findings.\n\n\n\n\n\n Lecture 05 (w4): Data Structures\n Lecture 06 (w4): Data Manipulation (dplyr)\n Lecture 07 (w5): Data Visualization (ggplot2)\n Lecture 08 (w5): Data Relations (joins)\n Lecture 09 (w6): Data format & EDA (2,3)\n Lecture 10 (w6): Hypothesis Testing (4,5)\n Lecture 11 (w7): Uni-, bi- statistics (6,)\n Lecture 12 (w7): Multivariate statistics\n Lecture 13 (w8): Regression (12,13),\n Lecture 14 (w8): Tidymodels, Project Introduction\n\nExercise 05: Building subsets\nExercise 06:\nExercise 07:\nExercise 08:\nExercise 09:\nExercise 10:\nExercise 11:\nExercise 12:\nExercise 13:\nExercise 14:"
  },
  {
    "objectID": "schedule.html#spring-break-w9",
    "href": "schedule.html#spring-break-w9",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Spring Break (w9)",
    "text": "Spring Break (w9)"
  },
  {
    "objectID": "schedule.html#component-3-modeling",
    "href": "schedule.html#component-3-modeling",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Component 3: Modeling",
    "text": "Component 3: Modeling\nGain hands-on experience in regression and machine learning. From foundational techniques in base R to more advanced workflows using the tidymodels framework, this module walks you through feature engineering, model setup, and model evaluation. You’ll also explore time series analysis, preparing you to tackle dynamic ecosystem data challenges where time is a consideration.\n\n\n\n\n\n\nLearning Outcomes\n\n\n\n\nApply regression techniques to ecological data.\nBuild and evaluate machine learning models using tidymodels\nUnderstand time-series data and methods.\n\n\n\n\n\n Lecture 15 (w10): ML: Data Engineering\n Lecture 16 (w10): ML: Model Classes\n Lecture 17 (w11): ML: Model Selection\n Lecture 18 (w11): ML: Evaluation & Tuning\n Lecture 19 (w12): Time series Analysis\n Lecture 20 (w12): Time series Forecasting\n\nExercise 15:\nExercise 16:\nExercise 17:\nExercise 18:\nExercise 19:\nExercise 20:"
  },
  {
    "objectID": "schedule.html#component-4-geospatial",
    "href": "schedule.html#component-4-geospatial",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Component 4: Geospatial",
    "text": "Component 4: Geospatial\nHarness the power of R as a GIS. Learn to process, analyze, and visualize vector and raster data to address spatial questions in ecosystem science. This component equips you to integrate geospatial techniques into broader data science workflows you’ve already established.\n\n\n\n\n\n\nLearning Outcomes\n\n\n\n\nUse R for vector (sf) and raster (terra) spatial data analysis.\nCreate maps and spatial visualizations.\nIntegrate location with you data science workflows\n\n\n\n\n\n Lecture 21 (w13): Spatial Data Libraries\n Lecture 22 (w13): Feature Geometries (CRS)\n Lecture 23 (w14): Spatial Analysis (Predicts, Unary, Binary)\n Lecture 24 (w14): Mapping\n Lecture 25 (w15): Raster Data\n Lecture 26 (w15: Raster Data Manipulation\n Lecture 27 (w16): Categorization\n Lecture 28 (w16): Terrain, Wrap up\n\nExercise 21:\nExercise 22:\nExercise 23:\nExercise 24:\nExercise 25:\nExercise 26:\nExercise 27:\nExercise 28:"
  },
  {
    "objectID": "labs/lab1.html",
    "href": "labs/lab1.html",
    "title": "Lab 1: Personal Portfolio",
    "section": "",
    "text": "This is a two week lab, and this site will be updated with the needed content at the beginning of each week."
  },
  {
    "objectID": "labs/lab1.html#github-pages",
    "href": "labs/lab1.html#github-pages",
    "title": "Lab 1: Personal Portfolio",
    "section": "GitHub Pages",
    "text": "GitHub Pages\nGitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository and publishes them as a website. GitHub Pages is available for public repositories.\nThere are three types of GitHub Pages sites: project, user, and organization.\nWe are not interested in organization sites, and will focus on the details of user and project sites.\nIn this lab, we will be building your user site, and in future labs, you might build a project site.\n\n\nuser sites are connected to a GitHub account (not a project/repository). To publish a user site, you must create a repository named &lt;user&gt;.github.io. Active user sites are available at http(s)://&lt;username&gt;.github.io.\nproject sites are connected to a single project (repository). The source files for a project site are stored in the same repository as their project. Active project sites are available at URLs following the pattern: http(s)://&lt;username&gt;.github.io/&lt;repository&gt;.\n\nWhy are Github Pages cool? Well they are free. They are secure. And like the versioned code, all you need to do to modify a site is edit, commit, and push your changes."
  },
  {
    "objectID": "labs/lab1.html#index.html",
    "href": "labs/lab1.html#index.html",
    "title": "Lab 1: Personal Portfolio",
    "section": "index.html",
    "text": "index.html\nindex.html is the most common name for the default page shown on a website. If you publish a website, and a server looks for the web address, the information rendered is likely stored in the index.html file. Therefore it is critical you have a file named index.html if you are going to host your own site.\nWe will use your websites landing page as an “about me” section to introduce yourself to our class and more broadly to the internet. Take some time to write a concise and clear paragraph introducing yourself, describing what you enjoy, and what you aim to do (within a professional context). Feel free to add hyperlinks to relevant accounts or other web pages using the Rmarkdown syntax."
  },
  {
    "objectID": "labs/lab1.html#specifics-for-this-class",
    "href": "labs/lab1.html#specifics-for-this-class",
    "title": "Lab 1: Personal Portfolio",
    "section": "Specifics for this class:",
    "text": "Specifics for this class:\nBy the beginning of next weeks lab, you should have your site deployed to Github and have a tab for the following three sections:\n\nAbout (index.qmd): Your job is to make this paragraph meaningful to you, and to add a image of yourself (or something relevant to you). Think about the following when writing the section.\n\n\n[What adjectives describe your personal brand (i.e. you, your skills / expertise, your motivations, your achievements? Choose 3-5.]\n\n\n[What key messages do you want to maintain as a consistent theme across your website / professional portfolio?]\n\n\n[What audience(s) do you want your website to serve / reach?]\n\nI cannot emphasize enough that anytime I read an application, if there is a website I’ll go to it, and if there is a short bio, I read it. It is a very good way to make a strong technical and personal first impression.\n\nCSU Projects (projects.qmd) . This tab will be populated next week and through out the quarter. It can be populated initially with something like this:\n\n\n---\ntitle: \"Projects\"\n---\n\nIn the Spring of 2025 I took a class Quantative Reasoning class based in R. I wrote some code, and did some cool data science. Here is a collection of links! \n\n## [Building a project website]()\n\n- In this assignment we built a static users site with Github Pages \n- Includes a github repo for access to all the code.\n- Look at how high quality my work is!\n\nYour job is to make this text meaningful to you, and to add the appropriate URL to the header. You must also describe what you learned in this activity in 3-5 bullet points. Do this in a way that is directed at showing an audience what you know, not as an exercise to satisfy me.\n\nResume (resume.qmd). Here you should store a more traditional resume/CV. This can be written in Quarto, or as a linked PDF.\n\n🎉 Congrats 🎉 you have created a personal website and hosted it online."
  },
  {
    "objectID": "labs/lab1.html#rubric",
    "href": "labs/lab1.html#rubric",
    "title": "Lab 1: Personal Portfolio",
    "section": "Rubric",
    "text": "Rubric\n\nGithub repo (10)\n\nWith a description and website URL in the “about”\n\nClear RProject Structure (10)\n\n.Rproj\nimg folder\n\nyml (20)\n\nApplies a theme\nContains a complete navbar\nApplies a .scss file\nwith link to your github account\n\nindex qmd/html (10)\n\nContains an image of yourself\nConcise “about me” paragraph depicting your interests and career aspirations (remember this is professional webpage)\nApplied template\nSocial links are present\n\nprojects qmd/html (10)\n\nProject description with link to home page (index.html)\n\nSummary of skills gained in this project\n\nResume qmd/html (10)\n\nminimal CV\n\nAll links work (from https) (10)\n\nSubmitted as a pull request (20)\n\nExtra Credit: Create a unique favicon (10)\nTotal: 100 points"
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Welcome!",
    "text": "Welcome!\nWelcome to Ecosystem Science and Sustainability 330: Quantitative Reasoning for Ecosystem Science! This course is your entry point to understanding data science tools and techniques essential for solving today’s most pressing environmental challenges. We aim to equip students with the skills needed to address complex challenges in ecosystem science by emphasizing the integration of open-source technologies, statistical methods, spatial data analysis, and machine learning to foster reproducible, data-driven insights."
  },
  {
    "objectID": "index.html#who-this-class-is-for",
    "href": "index.html#who-this-class-is-for",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Who This Class is For:",
    "text": "Who This Class is For:\nThis course is ideal for students in ecosystem science, sustainability, and related disciplines who want to enhance their data science skills. Whether you’re new to coding or looking to expand your expertise, ESS 330 provides the resources to address critical environmental challenges with data-driven insights. By the end of this course, students will have the skills (and confidence) to tackle a wide range of applied and theoretical questions, including:\n\nHow can I efficiently organize, store, and share data for a research project?\nHow do I set up a reproducible workflow using R, Git, and GitHub to collaborate with others, or, my future self?\nHow do I clean, merge, and visualize messy data sets from different sources?\nWhat statistical methods should I use to test my hypotheses?\nHow can I identify patterns and relationships in environmental data sets?\nHow can I predict ecosystem changes using regression and machine learning models?\nHow do I design, train, and evaluate models to ensure reliable predictions?\nHow can I analyze and forecast environmental trends using time-series data?\nHow do I process and analyze spatial data to answer location-based questions?\nHow can I visualize and interpret geospatial trends in ecosystem variables?\nHow can GIS tools be integrated into larger data science workflows?"
  },
  {
    "objectID": "index.html#careers",
    "href": "index.html#careers",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Careers",
    "text": "Careers\nGraduates of this course will be equipped to pursue careers as geospatial analysts, ecological modelers, data scientists, hydrologists, or climate scientists. You’ll be prepared to tackle pressing environmental challenges in academia, government, industry, or NGOs, making data-driven decisions to shape the future of ecosystem science and sustainability. Ideally, as an upper division course it will help you unify your domain expertise, writing skills, and data skills to provide a cross-cutting, in demand, rewarding and flexible future for you and the planet."
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Acknowledgments",
    "text": "Acknowledgments\n\nThis website, including all slides, are made with Quarto. Please submit an issue on the GitHub repo for this course if you find something that could be fixed or improved.\nWe borrow significant content from the amazing R community and do our best to curate and design course content for students."
  },
  {
    "objectID": "index.html#reuse-and-licensing",
    "href": "index.html#reuse-and-licensing",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Reuse and licensing",
    "text": "Reuse and licensing\n\nUnless otherwise noted (i.e. not an original creation and reused from another source), these educational materials are licensed under Apache 2."
  },
  {
    "objectID": "exercises/2-terminal.html",
    "href": "exercises/2-terminal.html",
    "title": "Daily Exercise 02",
    "section": "",
    "text": "The RStudio terminal provides access to the operating system (OS) shell from within the RStudio IDE. Beneath the surface of any OS is an entire world that can only be accessed only from the command line. The terminal is a gateway to that command line. With it, instead of pointing and clicking, you can type commands and have your computer respond."
  },
  {
    "objectID": "exercises/2-terminal.html#step-1.-see-if-git-is-already-installed",
    "href": "exercises/2-terminal.html#step-1.-see-if-git-is-already-installed",
    "title": "Daily Exercise 02",
    "section": "Step 1. See if git is already installed",
    "text": "Step 1. See if git is already installed\nIn your terminal, type the following (note: PC USERS type where git) and hit Enter.\nIf git is installed, it will return a path like below.\n\nwhich git\n\n/usr/bin/git\n\n\nYou may be prompted to install git automatically – do it! If you are not automatically prompted to install, continue to Step 2 to install manually.\nIf you have git installed, or it automatically installed, consider yourself fortunate and move to section 3. Otherwise…"
  },
  {
    "objectID": "exercises/2-terminal.html#step-2-manually-install-git",
    "href": "exercises/2-terminal.html#step-2-manually-install-git",
    "title": "Daily Exercise 02",
    "section": "Step 2: Manually install git",
    "text": "Step 2: Manually install git\nYou should only have to do this if git was NOT found in Step 1 !!!\n\nMacOS \nInstall the Xcode command line tools (not all of Xcode), which includes Git, by typing the following in your terminal:\n\nxcode-select --install\n\n\n\nWindows \nInstall Git for Windows, also known as “Git Bash”, to get Git and some other useful tools, such as the Bash shell.\n‘Git for Windows’ places the Git executable in the conventional location, which will help you and other programs (like RStudio) find and use it.\nWhen asked about “Adjusting your PATH environment”, make sure to select “Git from the command line and also from 3rd-party software”. Otherwise, accept the defaults unless you have specific reasons not to.\nOnce git is installed - restart RStudio and make sure that you can see the git pathway (which/where git) in the terminal. Once installed, continue to Step 3."
  },
  {
    "objectID": "exercises/2-terminal.html#step-3-check-the-version",
    "href": "exercises/2-terminal.html#step-3-check-the-version",
    "title": "Daily Exercise 02",
    "section": "Step 3: Check the version",
    "text": "Step 3: Check the version\nOnce you have git installed, you can also type git --version (then press Enter) to see the version of git you have. Like this:\n\ngit --version\n\ngit version 2.39.5 (Apple Git-154)"
  },
  {
    "objectID": "exercises/2-terminal.html#note-for-windows-users",
    "href": "exercises/2-terminal.html#note-for-windows-users",
    "title": "Daily Exercise 02",
    "section": "Note for Windows Users",
    "text": "Note for Windows Users\nGit Bash is an application for Windows environments which provides an emulation layer for a Git command line experience. Bash (or zsh) is default shell on Linux and macOS. Git Bash is a package that installs Bash, some common bash utilities, and Git on a Windows operating system. To use bash in R Studio, you can change the setting in your profile by going to Tools -&gt; Global Options -&gt; Terminal\n\nIf you change these settings, then you will be able to use the “Mac” commands above like touch."
  },
  {
    "objectID": "exercises/2-terminal.html#your-github",
    "href": "exercises/2-terminal.html#your-github",
    "title": "Daily Exercise 02",
    "section": " Your GitHub",
    "text": "Your GitHub\n\nGo to GitHub to register an account.\nChoose your user.name and email wisely! Your user.name will appear on all websites we build, and will eventually become a “long-form” business card to advertise your work online.\nBoth your email and user.name will be used in the next steps so make sure to remember them\nFill in your profile information including email, location, ect and change your profile image\n\nThe image does NOT have to be a personal picture but should not remain the pixelated Github Avatar."
  },
  {
    "objectID": "exercises/2-terminal.html#finding-open-source-code",
    "href": "exercises/2-terminal.html#finding-open-source-code",
    "title": "Daily Exercise 02",
    "section": " Finding Open Source code",
    "text": "Finding Open Source code\nGitHub is full of open source code that you can use, borrow, find, etc. To find your first repository search for mikejohnson51/csu-ess-330. This should take you to the repository for this course!\n\nIn the upper right hand corner you see three options:\n\nwatch: will notify you via email when changes to the repo are made\nstar: this will place the repo in your “stared” repositories making it easy to find latter\nfork: this makes a copy of the current repo in your account that you can modify and build on.\n\nWatching a repo can be nice, but for a class like this - which is updated every day - the notifications will be a lot.\nFor now, please star csu-ess-330 so that you can easily find it and I will have easy access to your accounts (you can always “unstar” after the course).\nWe will deal with forking repositories latter!"
  },
  {
    "objectID": "exercises/2-terminal.html#telling-git-who-we-are",
    "href": "exercises/2-terminal.html#telling-git-who-we-are",
    "title": "Daily Exercise 02",
    "section": " Telling Git who we are",
    "text": "Telling Git who we are\nNow you have Git locally and you have a Github account that you’ve used to find published projects. Lets connect them…\nThe first thing we need to do is tell git who we are. Git comes with a tool called git config that lets us set the configuration variables that control how Git looks and operates.\nIn the RStudio Terminal, enter the following, where YOUR NAME is what you want git to know you by (this can be your user.name or real name)\n\ngit config --global user.name 'YOUR NAME'\n\nSo what did we just do? We used the terminal to tell git (a local program) to set a global configuration variable, called user.name, to a specified value. Next, tell git the email associated with your GitHub account in the same way …\n\ngit config --global user.email 'Your Email Here'\n\nWhen you are done, you can list your global configuration variables:\n\ngit config --list --global\n\nuser.name=mikejohnson51\nuser.email=mikecp11@gmail.com\ncredential.helper=osxkeychain\ninit.defaultbranch=main\n\n\nSo long as your user.name and user.email are consistent with your entries you are doing great 👍!"
  },
  {
    "objectID": "exercises/2-terminal.html#githubs-local-home",
    "href": "exercises/2-terminal.html#githubs-local-home",
    "title": "Daily Exercise 02",
    "section": " GitHub’s local home",
    "text": "GitHub’s local home\nOk the last thing! This is a matter of convenience rather the necessity but we will create a local directory on our computers to house all git-enabled projects.\nTo do this, create a folder called github in the home directory of your computer. We can quickly do this by changing to our home directory (cd) and making a new folder (mkdir) called github:\n\ncd ~\nmkdir github"
  },
  {
    "objectID": "exercises/1-install-r.html",
    "href": "exercises/1-install-r.html",
    "title": "Daily Exercise 01",
    "section": "",
    "text": "Getting all the necessary software installed, configured, and playing nicely together is half the battle when first adopting an open source, reproducable scientific workflow. These steps have become increasingly easier over the years and we are here to help you if you hit a hurdle 😄\nWelcome to ESS 330, Quantitative Reasoning for Ecosystem Science! In this course, we’ll be using R and RStudio for data organization, manipulation, analysis, and visualization. You’ll become more familiar with both tools throughout the course.\nIt’s highly recommended to install these tools on your own laptop for convenience and the following step-by-step guide will walk you through installing R and RStudio on your computer, as well as introducing a few essential tools we’ll use throughout the quarter. If you encounter any issues during the process, don’t hesitate to contact me or a teaching assistant for assistance!"
  },
  {
    "objectID": "exercises/1-install-r.html#macos-installation",
    "href": "exercises/1-install-r.html#macos-installation",
    "title": "Daily Exercise 01",
    "section": "MacOS Installation  ",
    "text": "MacOS Installation  \n\nInstall R\n\nDownload the latest release of R from CRAN (choose the .pkg version).\nSave the .pkg file and double-click it to start the installation. Follow the prompts to complete the installation.\n\n\n\n\n\n\n\nKnow your chip\n\n\n\nEnsure you download the correct version based on your Mac’s chip. If you’re unsure, click the apple icon in the menu bar → About This Mac, and check your chip (Intel or Apple).\n\n\n\n\nInstalling RStudio\n\nDownload RStudio for Mac.\nAfter downloading, double-click the .dmg file and move RStudio into your Applications folder.\n\n\nNow that R is installed, you can download and install RStudio."
  },
  {
    "objectID": "exercises/1-install-r.html#windows-installation",
    "href": "exercises/1-install-r.html#windows-installation",
    "title": "Daily Exercise 01",
    "section": "Windows Installation  ",
    "text": "Windows Installation  \n\nInstalling R\n\nDownload the latest version of R for Windows from CRAN.\nInstall the downloaded .exe file as you would any other Windows application.\n\n\n\nInstalling RStudio\n\nDownload RStudio for Windows.\nRun the .exe installer and follow the prompts to complete the installation."
  },
  {
    "objectID": "exercises/1-install-r.html#launch-rstudio",
    "href": "exercises/1-install-r.html#launch-rstudio",
    "title": "Daily Exercise 01",
    "section": "Launch RStudio",
    "text": "Launch RStudio\nOnce both R and RStudio are installed, locate and click the RStudio icon to launch the program. It should look like this:\n\n\n\nOpening RStudio will launch a workplace. If something like the below image appears for you, then you are all set!\n\nThroughout the quarter, we’ll be working extensively within this IDE. The layout and features will become more familiar as we progress. A few things to note now are:\n\nYour session is linked to a specific project (pink box).\n\nIn the blue box, you have:\n\nAn Environment tab that shows all the active objects in your session\nA Files tab that shows all the files and folders in your default (project) workplace\nA Plots tab that will show all your graphs once we start visualizing data.\n\nIn the red window you will write code and open scripts/markdown files.\nAll output will be printed to your console (yellow box). Code and prompts can be directly entered in the console but will not be saved after executing.\n\nYour layout and theme may not look like the above (all the elements are the same but arranged differently). If you want to change your theme and layout got to RStudio –&gt; Preferences.\nHere you can adjust the “Appearance” and “Pane Layout”. If you want your to look like mine, see below:"
  },
  {
    "objectID": "exercises/1-install-r.html#installing-package",
    "href": "exercises/1-install-r.html#installing-package",
    "title": "Daily Exercise 01",
    "section": "Installing Package",
    "text": "Installing Package\nR comes loaded with many base packages and tools. There are also many additional tools that will make your life easier. Throughout this class, we’ll use packages that exist in the aggregate tidyverse package.\n\nTidyverse\nThe tidyverse contains a collection of very useful packages that play nicely together for data exploration, manipulation, wrangling and visualization (among other things). Packages can be installed from CRAN (Comprehensive R Archive Network) using the following pattern which should be typed in the console (yellow box):\n\ninstall.packages(\"tidyverse\")\n\nAfter you press ‘Enter,’ you should see a whole bunch of text streaming across the Console Window. This is a good sign and is simply logging what’s being downloaded/installed. This process can go on for a few minutes (the tidyverse has a lot of different components). You will know it’s done when the active cursor shows up again waiting for your next command.\nOnce it’s installed, you can ensure that everything worked by loading/attaching the tidyverse using the library call:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter()     masks stats::filter()\n✖ dplyr::group_rows() masks kableExtra::group_rows()\n✖ dplyr::lag()        masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nWhen you press enter, some information will come up below the command. Don’t worry too much about it now as long as there are no errors!\nIf you got something similar to the above you’ve successfully installed R, RStudio, and the tidyverse package. Congratulations!"
  },
  {
    "objectID": "exercises/1-install-r.html#assignment",
    "href": "exercises/1-install-r.html#assignment",
    "title": "Daily Exercise 01",
    "section": "Assignment",
    "text": "Assignment\nFor Exercise 01, your task is to install three additional packages: tidymodels, remotes, gapminder, and palmerpenguins. Once installed, clear the console by clicking the broom icon ( ) and run the following 4 lines of code:\n\nSys.getenv(\"LOGNAME\")\n\nversion$major\n\nRStudio.Version()$version\n\nc(\"tidymodels\", 'remotes', 'gapminder', 'palmerpenguins')  %in% rownames(installed.packages()) \n\nFor Exercise 01, submit a screenshot of the output to the Canvas dropbox. It should look like this:\n\nKey points to verify include:\n\nCorrect R version (4.x)\nCorrect RStudio version (2024.X.XXXX)\nAll three packages installed (4 TRUE values)\n\nOnce you’ve completed this, you can close RStudio—no need to save the workspace.\nNice work!"
  },
  {
    "objectID": "exercises/3-first-project.html",
    "href": "exercises/3-first-project.html",
    "title": "Daily Exercise 03",
    "section": "",
    "text": "So far you have done a LOT!! You’ve installed a programming language and IDE, you’ve mastered some terminal commands, you’ve installed a version control system, and created a GitHub Account. All in the first 2 days of class!\nThe assignment for today is to set up your first project using the R Terminal, Github, and RStudio Projects.\nFor the purposes of ESS 330, the things you’ll need to do with GitHub are:"
  },
  {
    "objectID": "exercises/3-first-project.html#create",
    "href": "exercises/3-first-project.html#create",
    "title": "Daily Exercise 03",
    "section": "  Create",
    "text": "Create\nThe first thing we want to do is create a new repository on your Github account. After logging in, look in the upper right hand corner of your account for the “+” button. Click on that and select “New repository”:\n\n\n\n\n\n\n\n\n\nThis will create a new repository and prompt a new window that looks like:\n\n\n\n\n\n\n\n\n\nHere, we can fill in the metadata for our new repo:\n\nLet call it: hello-world\nGive it an informative description: My first Github Repository!\nKeep it “Public”\n\n\n\nInitialize it with a README\nKeep .gitignore and License as NONE\nConfrim “Create repository”\n\nAwesome! You created your own first Github Repository"
  },
  {
    "objectID": "exercises/3-first-project.html#connect-to-rstudio",
    "href": "exercises/3-first-project.html#connect-to-rstudio",
    "title": "Daily Exercise 03",
    "section": "  Connect to RStudio",
    "text": "Connect to RStudio\nWe now need to ensure that RStudio can communicate with that GitHub Repository. By doing this we will be able sync our local files with a remote copy, make changes/additions, and the publish those changes back to remote repo. This “pulling” from and “pushing” to is the basic Github workflow.\nTo practice this, lets walk through the steps of cloning a copy of the empty “hello-world” repo.\n\nfirst navigate to (YOUR USERNAME/hello-world).\nIn a new repo, look for the quick setup option. The URL listed provides a dedicated path to the repo that RStudio can use to communicate (remember our URL based “filepaths”). Copy that link (easiest to click the clippy icon) and return to (or launch) RStudio.\n\n\n\n\n\n\n\n\n\n\n\nOnce in RStudio, create a new version controlled project using the Github URL\n\nFile --&gt; New Project --&gt; Version Control --&gt; Git\n\nTo provide the metadata for this project lets do the following:\n\nPaste the URL you copied into the Repository URL section, and press TAB\nKeep the default Project directory name that matches the GitHub project\nCreate the project as a sub directory of your ~/github folder created in the last activity\nOptional: select ‘Open in new session’ (if you’re already working on stuff that you don’t want to close)\n\n\n\n\n\n\n\n\n\n\n\n\nClick create!\n\nCongratulations! You just created a git-enabled project. You will know you are successful if you see the Git tab somewhere in your RStudio IDE (mine is next to “History” and “Environment”)."
  },
  {
    "objectID": "exercises/3-first-project.html#structure-your-project",
    "href": "exercises/3-first-project.html#structure-your-project",
    "title": "Daily Exercise 03",
    "section": "  Structure your Project",
    "text": "Structure your Project\nTo start out this project take what we learned today in lecture and construct a skeleton for a project. If you think carefully you should only need 4 terminal prompts. I will start you with the first:\n\nmkdir data\n\nUsing cd to navigate, add one qmd file and one R file in the correct directories. Use (touch/$null &gt;) to create them.\nOnce you’ve built your skeleton, open your README.md from the RStudio file viewer and enter the following, replacing the ‘XXXX’ with your info:\n\n# My first Project\n## **Course**: ESS 330\n## **Name**: XXXXX\n## **Year**: XXXXX\n## **Major**: XXXXX\n## **OS**: XXXXX\n\nHow does your structure look compared to what we discussed in lecture? Do you have a place for data? What about images? Source Code? Docs?"
  },
  {
    "objectID": "exercises/3-first-project.html#git-workflow",
    "href": "exercises/3-first-project.html#git-workflow",
    "title": "Daily Exercise 03",
    "section": "  Git Workflow",
    "text": "Git Workflow\nYou know that Git is a version control software that allows us to track changes in files. You also know Github is a web platform for hosting and working with git enabled projects…\nVersion control is kind of weird. Not only are you keeping current files, but you are keeping past versions of your files. BUT, you dont want to archive each and every little change. Instead, your versions (think snapshots) have to be determined by you, through commits.\n\n\n\n\n\n\n\n\n\nArmed with that idea, it is time to introduce the Git tab in RStudio. If you click on the Git tab, you will see all the files that have changed from the last commit.\n\n\n\n\n\n\n\n\n\n\nTo stage files, select the empty box (under ‘Staged’) next to each file\n\nTo select all files, click in the Git tab, and click CMND+SHIFT+A (Mac) or CRTL+SHIFT+A (Windows)\n\nAdd your checked files by clicking Commit\nIn the dialogue box, enter a brief commit message (e.g. “Initial Project Structure”) and press ‘Commit’ to stage these files to git."
  },
  {
    "objectID": "exercises/3-first-project.html#git-github",
    "href": "exercises/3-first-project.html#git-github",
    "title": "Daily Exercise 03",
    "section": "  Git –> Github",
    "text": "Git –&gt; Github\nIn order to allows Github and your .git archive to talk to each other securly, you’ll need to set up a Personal Access Token (PAT). This process needs to be done very infrequently (~90 days). To do this, in your R console enter:\n\n## create a personal access token for authentication:\nusethis::create_github_token() \n\nThis will lauch a broswer were you can enter the following information:\n\nDescribe the Use Case (e.g. “RStudio”)\nSet expire to 90 days for ease\nGenerate Token\nCopy the Token and return to RStudio\n\nWith you copied Token, enter the following function changing out “your-PAT” with the copied token:\n\n## set personal access token:\n## If credentials is not installed, do you remember how to install a package?\ncredentials::set_github_pat(\"your-PAT\")\n\nOnce done, you can verify the tool (github) under the scope of “user” is connected with git_sitrep. Specifically you should see that Personal access token for \"https://github.com\": &lt;discovered&gt; and your associated email.\n\nusethis::git_sitrep(tool = \"github\", scope = \"user\")\n\n\nFinally, with your Github account authorized, you can press the upward green push arrow in the Git Pane to “Push” your changes to GitHub.\nIf you receive no errors then you successfully staged, committed and pushed your project to YOUR USERNAME/hello-world\n\n\nTo make sure:\n\nGo to GitHub and refresh the repo page.\nYou should see the files you recently committed and the associated rendered README. If this is true. You are done - Great work!"
  },
  {
    "objectID": "exercises/3-first-project.html#assignment",
    "href": "exercises/3-first-project.html#assignment",
    "title": "Daily Exercise 03",
    "section": "  Assignment",
    "text": "Assignment\nFor this assignment submit the URL to your hello-world repository to the Canvas dropbox.\nAnd 🎉 congrats 🎉! All the setup technical setup is done for this course and we are on to bigger and more fun things!"
  },
  {
    "objectID": "labs.html",
    "href": "labs.html",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "",
    "text": "Week\nLab\nLab Activity\nDue Date\n\n\n\n\n1\nNo Lab Meetings\n—\n—\n\n\n2\nPersonal Portfolio \nIntroduction\nFriday Week 4 @ 5:00pm\n\n\n3\nPersonal Portfolio \nIntro to Quarto\nFriday Week 4 @ 5:00pm\n\n\n4\nMinnesota tree growth \nData Transform\nFriday Week 5 @ 5:00pm"
  },
  {
    "objectID": "labs.html#labs",
    "href": "labs.html#labs",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "",
    "text": "Week\nLab\nLab Activity\nDue Date\n\n\n\n\n1\nNo Lab Meetings\n—\n—\n\n\n2\nPersonal Portfolio \nIntroduction\nFriday Week 4 @ 5:00pm\n\n\n3\nPersonal Portfolio \nIntro to Quarto\nFriday Week 4 @ 5:00pm\n\n\n4\nMinnesota tree growth \nData Transform\nFriday Week 5 @ 5:00pm"
  },
  {
    "objectID": "labs/lab2.html#key-features-of-dplyr",
    "href": "labs/lab2.html#key-features-of-dplyr",
    "title": "Lab 2: Minnesota tree growth",
    "section": "Key Features of dplyr",
    "text": "Key Features of dplyr\n\nPipe-friendly (%&gt;%/|&gt;) – Works seamlessly with the pipe operator from the magrittr package.\nEfficient – Built on top of Rcpp for fast performance.\nConsistent Grammar – Uses a consistent set of verbs for data manipulation.\n\nThese verbs can be organized into three categories based on the component of the dataset upon which they (most commonly) operate:"
  },
  {
    "objectID": "labs/lab2.html#rows",
    "href": "labs/lab2.html#rows",
    "title": "Lab 2: Minnesota tree growth",
    "section": "Rows:",
    "text": "Rows:\n\nfilter() subset rows based on column values.\nslice() subset rows based on index.\narrange() change row order."
  },
  {
    "objectID": "labs/lab2.html#columns",
    "href": "labs/lab2.html#columns",
    "title": "Lab 2: Minnesota tree growth",
    "section": "Columns:",
    "text": "Columns:\n\nselect() subset columns based on name or characteristics.\nmutate() change column values or create new columns.\nrename() change column name."
  },
  {
    "objectID": "labs/lab2.html#groups-of-rows",
    "href": "labs/lab2.html#groups-of-rows",
    "title": "Lab 2: Minnesota tree growth",
    "section": "Groups of rows:",
    "text": "Groups of rows:\n\nsummarize() collapse multiple rows into a single row.\nn()/n_distint() count group membership"
  },
  {
    "objectID": "labs/lab2.html#glimpse",
    "href": "labs/lab2.html#glimpse",
    "title": "Lab 2: Minnesota tree growth",
    "section": "Glimpse",
    "text": "Glimpse\nglimpse() is a function from the dplyr package that provides a compact and easy-to-read summary of a data.frame. It is similar to str(), but with a more readable format. Its key features are that it:\n\nDisplays the number of rows and columns.\nShows column names, types, and a preview of values.\nPrints data in a transposed format (variables as rows instead of columns).\n\nWe will use glimpse to report on our outputs in each question through this lab!"
  },
  {
    "objectID": "labs/lab2.html#piping",
    "href": "labs/lab2.html#piping",
    "title": "Lab 2: Minnesota tree growth",
    "section": "Piping",
    "text": "Piping\nThe pipe operator (|&gt;) in R is used to streamline code by passing the result of one function directly into the next function as the first argument. This makes code more readable and reduces the need for nested function calls.\n\nBase R Pipe (|&gt;): Introduced in R 4.1.0, the native pipe (|&gt;) works similarly to the magrittr pipe (%&gt;%) but is built into base R.\nExample 1: Without Pipe This code calculates the mean of a vector and rounds the result.\n\nround(mean(c(1, 2, 3, 4, 5), na.rm = TRUE), digits = 2)\n\n[1] 3\n\n\nExample 2: Using native pipe |&gt; \nHere, the output of each function is passed to the next, making it easier to read.\n\nc(1, 2, 3, 4, 5) |&gt; \n  mean(na.rm = TRUE) |&gt; \n  round(digits = 2)\n\n[1] 3\n\n\n\n\nTidyverse Pipe (%&gt;%)\nFrom the magrittr package (and used in dplyr), %&gt;% allows greater flexibility than |&gt;, such as:\n\nUsing placeholders (.) when the first argument isn’t where the function expects input.\nAutomatically handling non-standard evaluation in dplyr.\n\nExample 3: Using %&gt;% pipe\nThis filters cars with mpg &gt; 20, selects relevant columns, and sorts them by mpg in descending order.\n\nmtcars %&gt;%\n  filter(mpg &gt; 20) %&gt;%\n  select(mpg, cyl, hp) %&gt;%\n  arrange(desc(mpg))\n\n                mpg cyl  hp\nToyota Corolla 33.9   4  65\nFiat 128       32.4   4  66\nHonda Civic    30.4   4  52\nLotus Europa   30.4   4 113\nFiat X1-9      27.3   4  66\nPorsche 914-2  26.0   4  91\nMerc 240D      24.4   4  62\nDatsun 710     22.8   4  93\nMerc 230       22.8   4  95\nToyota Corona  21.5   4  97\nHornet 4 Drive 21.4   6 110\nVolvo 142E     21.4   4 109\nMazda RX4      21.0   6 110\nMazda RX4 Wag  21.0   6 110\n\n\n\n\nKey Differences\n\n\n\n\n\n\n\n\nFeature\n|&gt; (Base R)\n%&gt;% (Tidyverse)\n\n\n\n\nAvailable in\nR 4.1.0+ (no extra packages)\n{magrittr} package\n\n\nFirst argument\nAlways passed as first argument\nCan use . for flexibility\n\n\nFunction compatibility\nWorks with most functions\nWorks better with dplyr and NSE functions\n\n\n\nIf you’re using tidyverse/dplyr, %&gt;% is still widely used. If you’re sticking to base R, |&gt; is the better choice."
  },
  {
    "objectID": "labs/lab2.html#filtering-rows",
    "href": "labs/lab2.html#filtering-rows",
    "title": "Lab 2: Minnesota tree growth",
    "section": "1 Filtering rows",
    "text": "1 Filtering rows\nfilter() creates row subsets that satisfy a condition involving values in one or more columns. The first argument in filter() is the data.frame from which you want to subset rows. Conditional statements passed as separate arguments are combined with the & operator.\n\n\n\n\n\n\n\n\n\nFor this lab, you will read in the Minnesota tree growth dataset from the trees_dat.csv file found from Dyrad and saved to your data folder.\n\nQuestion 1: Read in the Minnesota tree growth dataset. How many records are there in the dataset?\n\n\nQuestion 2: How many trees are in stand 1?\n\n\nQuestion 3: How many trees are of the Abies balsamea (ABBA) and Pinus strobus (PIST) species?\n\n\nQuestion 4: From the above subset, how many are there of each ABBA and PIST?\n\n\nQuestion 5: How many trees are older then 200 years old in the last year of the dataset?"
  },
  {
    "objectID": "labs/lab2.html#slicing-rows",
    "href": "labs/lab2.html#slicing-rows",
    "title": "Lab 2: Minnesota tree growth",
    "section": "2. Slicing rows",
    "text": "2. Slicing rows\nYou can use the slice() family of functions to extract a chunk of your rows by their position in the dataset.\nThis function family includes:\nslice(X:Y): filters out rows X to Y (where X and Y are numbers). slice_max / slice_min - filters for observations with the max/min values for a variable V. slice_head/slice_tail - return the first and last row of the given data.frame, respectively slice_sample - return a random subset of rows, with or without replacement, and with specified selection probability\nChange the n argument in these functions to return more than one row (i.e., the default argument is n = 1), or use the prop argument to return the desired proportion of rows.\n\nQuestion 6: What is the oldest tree in the dataset found using slice_max?\n\n\nQuestion 7: Using slice_max, find the oldest 5 trees, limit the query to those in year 2007. Use the help docs to understand optional parameters\n\n\nQuestion 8: Using slice_sample, how many trees are in a 30% sample?"
  },
  {
    "objectID": "labs/lab2.html#arranging-rows",
    "href": "labs/lab2.html#arranging-rows",
    "title": "Lab 2: Minnesota tree growth",
    "section": "3 Arranging Rows",
    "text": "3 Arranging Rows\narrange() orders rows based on values in one or more columns. If you specify more than one column, each additional column is used to break ties in values of preceding columns. The default behavior is to sort column values in ascending order (i.e., smallest values at the top). If you want to sort column values in descending order, put the column name inside **desc().\narrange() doesn’t change the number of rows, only their order. Row order doesn’t typically matter when analyzing data; however, order is often important for understanding and communicating data structure.\n\nQuestion 9: Filter all trees in stand 5 in the maximum year. Sort this subset by descending radius at breast height (rad_ib) and use slice_head() to get the top three trees. Report the tree IDs"
  },
  {
    "objectID": "labs/lab2.html#reducing-columns",
    "href": "labs/lab2.html#reducing-columns",
    "title": "Lab 2: Minnesota tree growth",
    "section": "4 Reducing Columns",
    "text": "4 Reducing Columns\nAnother common task is to select a subset of columns in the dataset. This is accomplished using select(). &gt; Question 10: Reduce your full data.frame to [treeID, year, and radius at breast height]. Filter to only those in year 2007, and use slice to pull the top 3 rows.\n\nQuestion 11: Use select to remove the radius at breast height column\n\n\nQuestion 12: Look at the help document for dplyr::select and examine the “Overview of selection features”. Identify an option (there are multiple) that would help select all columns with the string “ID” in the name.\n\nThe & and | operators provide additional flexibility for specifying columns to retain or exclude. Use & to identify the intersection between two column sets (i.e., those columns that are in both sets). Use | to identify the union of two column sets (i.e., all columns in at least one set).\n\nQuestion 13: Find a selection pattern that captures all columns with either ‘ID’ or ‘stand’ in the name. Use a member of the slice family to return the last 3 rows."
  },
  {
    "objectID": "labs/lab2.html#renaming-columns",
    "href": "labs/lab2.html#renaming-columns",
    "title": "Lab 2: Minnesota tree growth",
    "section": "5. Renaming columns",
    "text": "5. Renaming columns\nIt’s easy to rename data.frame columns using rename(). The first argument in rename() is the data.frame containing columns to rename and subsequent arguments takes the form new_name = old_name.\n\n**Question 14: Looking back at the data dictionary, rename rad_inc and inc to include _{unit} in the name. Unlike earlier options, be sure that this renaming is permanent, and stays with your data.frame (e.g. &lt;-). Print the names of your new data.frame **"
  },
  {
    "objectID": "labs/lab2.html#creating-new-columns",
    "href": "labs/lab2.html#creating-new-columns",
    "title": "Lab 2: Minnesota tree growth",
    "section": "6 Creating new columns",
    "text": "6 Creating new columns\nmutate() creates new columns (or modifies existing ones) and adds them to the right side of an existing data.frame. The first argument in mutate() is the data.frame to be augmented and subsequent arguments define the new columns. This function is useful because exiting columns in the data.frame can be referenced when defining new columns.\nSometimes, we want a data.frame that includes only newly created columns, or a combination of original and new columns. In this case we use transmute(). For example, as illustrated in Figure 7.7, say we want to make ba using dbh in trees, but this time we want the new data.frame to include only the columns id, year, and ba (i.e., we don’t want to retain dbh). Also notice in Figure 7.7, we can carryover columns unchanged by just listing their names in transmute arguments.\n\nQuestion 15: Looking back at the data dictionary, rename rad_inc and inc to include_{unit} in the name. Unlike earlier options, be sure that this renaming is permanent, and stays with your data.frame through reassignment (e.g. &lt;-). Print the names of your new data.frame \n\n\nQuestion 16: A key measurement in forestry in “basal area column”. The metric is computed with the formula:  BA(m2) = 0.00007854⋅DBH^2  Where DBH is the diameter at breast height (cm). Use mutate to compute both DBH in centimeters, and BA_m2. What is the mean BA_m2 of the the species POTR (in year 2007)"
  },
  {
    "objectID": "labs/lab2.html#case_when-if_esle",
    "href": "labs/lab2.html#case_when-if_esle",
    "title": "Lab 2: Minnesota tree growth",
    "section": "7 case_when / if_esle",
    "text": "7 case_when / if_esle\ncase_when() is a function that provides a vectorized way to apply multiple conditional statements. It is commonly used for creating new variables based on conditions. Each condition is evaluated in order, and the first one that is TRUE determines the output. case_when() takes one or more arguments, where each argument, or case, is a two-sided formula where the left side is separated by the right side by a tilde symbol ~. The left side is a logical vector created using one or more vectors and logical operators in Section 4.7. The right side is the value to use when the left side is TRUE. If no cases are TRUE (i.e., none of the arguments’ left sides are TRUE) then a NA is returned. The TRUE ~ default_result at the end serves as a catch-all for any observation that does not meet a defined condition:\nSyntax:\ncase_when(\n  condition1 ~ result1,\n  condition2 ~ result2,\n  condition3 ~ result3,\n  TRUE ~ default_result\n)\nIn forestry, DBH_cm can be used to classify a tree using the following classification:\n\n\n\nlow\nhigh\nclass\n\n\n\n\n0\n2.5\n“seedling”\n\n\n2.5\n10\n“sapling”\n\n\n10\n30\n“pole”\n\n\n30\n-\n“sawlog”\n\n\n\n\nQuestion 17: Use mutate and case_when to add a new column to you data.frame that classifies each tree into the proper DBH_class. Once done, limit your dataset to the year 2007 and report the number of each class with table. (Hint: table requires a vector input, not a data.frame)"
  },
  {
    "objectID": "labs/lab2.html#summarizing",
    "href": "labs/lab2.html#summarizing",
    "title": "Lab 2: Minnesota tree growth",
    "section": "8. Summarizing",
    "text": "8. Summarizing\nsummarize() collapses a data.frame to a single row. We can use summarize() to compute summary statistics for one or more columns in a data.frame. The first argument in summarize() is the data.frame and subsequent arguments define how rows should be collapsed.\n\nQuestion 18: Compute the mean DBH and standard deviation of DBH for all trees in 2007. Explain the values you found and their statistical meaning.\n\nsummarize() is often the most useful when applied to groups of data (e.g species) rather then entire datasets!"
  },
  {
    "objectID": "labs/lab2.html#grouped-data",
    "href": "labs/lab2.html#grouped-data",
    "title": "Lab 2: Minnesota tree growth",
    "section": "9 Grouped data",
    "text": "9 Grouped data\ngroup_by() is used to group data by one or more variables. It is commonly used in conjunction with functions like summarize(), mutate(), or filter() to perform operations on subsets of data within a data.frame.\nThe first argument in group_by() is the data.frame to group and subsequent arguments identify the columns, or combination of columns, that define row membership to a group.\n\ntrees_by_id &lt;- group_by(trees, treeID)\nglimpse(trees_by_id)\n\n#&gt; Rows: 131,386 #&gt; Columns: 13 #&gt; Groups: treeID [2,291] #&gt; $ treeID  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #&gt; $ standID  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #&gt; $ stand  “A1”, “A1”, “A1”, “A1”, “A1”, “A1”, “A1”, “A1”, “A1”, “A1”, “A1”… #&gt; $ year  1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970…\n\nHow do dplyr functions behave given a grouped data.frame?\nIf filter() is passed a grouped data.frame and the filtering condition uses a summary function or group characteristic (e.g., number of rows computed using the n()), the result will be group specific. Similarly, slice() and its various flavors subset rows within each group.Passing grouped and ungrouped data to arrange() gives the same result, unless you set the function’s optional argument .by_group to TRUE, in which case it will order first by the grouping. Recall, the functions select(), rename(), mutate(), transmute(), and relocate() operate on data.frame columns. Because rename() only affects the column name and position, its behavior is the same given grouped or ungrouped data. Similarly, a grouped select() is the same as an ungrouped select(), except grouping columns are always included in the resulting column subset. Similar to a grouped filter(), a grouped mutate() has different behavior if your new column definition uses a summary function or some other group specific characteristic (e.g. max/min/n()/lag/diff, etc.). As mentioned, summarize() is most useful when applied to grouped data. Given a groupeddata.frame, column summaries requested from summarize() are applied to each group. Each time you apply summarize() to a grouped data.frame, the default behavior is to remove the last grouping level.\n\nQuestion 19: Compute the per species mean tree age using only those ages recorded in 2003. Identify the three species with the oldest mean age."
  },
  {
    "objectID": "labs/lab2.html#counting",
    "href": "labs/lab2.html#counting",
    "title": "Lab 2: Minnesota tree growth",
    "section": "10 Counting",
    "text": "10 Counting\nWe often need to know the number of rows, perhaps by group, within a dataset. Rows are counted using the n() helper function, which is a context dependent function used within dplyr verb functions. It takes no arguments and returns the context specific group size. We see n() used most often in summarize() and mutate() to count rows in groups.\nThe number of distinct values in a discrete variable is also often of interest (e.g., number of distinct plot numbers or species). n_distinct() returns the number of unique values in one or more variable. Like n(), when applied to a grouped data.frame within a verb function,n_distinct() returns the number of group specific distinct values:\n\nQuestion 20: (1) Compute the number of unique years with records in the data set. (2) Determine the stands with the largest number of unique years recorded. Report all stands with largest (or tied wit the largest) temporal record."
  },
  {
    "objectID": "slides/1-welcome.html#section",
    "href": "slides/1-welcome.html#section",
    "title": "1 - Introduction",
    "section": "",
    "text": "Welcome!"
  },
  {
    "objectID": "slides/1-welcome.html#what-this-class-is-about",
    "href": "slides/1-welcome.html#what-this-class-is-about",
    "title": "1 - Introduction",
    "section": "What This Class Is About:",
    "text": "What This Class Is About:\n\n\n\n\n\n\n\nLearning essential quantitative skills for ecosystem science\nEmphasizing real-world applications\nDeveloping proficiency in data science tools and methods\nUnderstanding and applying open science principles\n\n\n\n\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "slides/1-welcome.html#why-this-class-matters",
    "href": "slides/1-welcome.html#why-this-class-matters",
    "title": "1 - Introduction",
    "section": "Why This Class Matters:",
    "text": "Why This Class Matters:\n\n\n\n\n\n\n\nComplex, messy data sets\nDiverse, rapidly changing tools and workflows\nNeed for reproducibility and transparency\nIncreasing societal role in that face of new world\n\n\n\n\n\n\n\nNOAA Climate Change Impacts"
  },
  {
    "objectID": "slides/1-welcome.html#goals-for-you",
    "href": "slides/1-welcome.html#goals-for-you",
    "title": "1 - Introduction",
    "section": "Goals for You:",
    "text": "Goals for You:\n\n\n\n\n\n\n\nBuild confidence in tackling data-intensive problems: if not you then who?\nGain practical, hands-on experience: All (almost) environmental issues now require data\n\nPolicy & Management\nModeling\nStake holder engagement\n\nDevelop a critical mindset for evaluating models and results\n\nMerging technical skill, communication skills, and passion are critical to success\n\nLearn to merge data, and writing to communicate complex issues\nPrepare for careers or advanced studies in environmental science and sustainability"
  },
  {
    "objectID": "slides/1-welcome.html#building-a-ess-trifecta",
    "href": "slides/1-welcome.html#building-a-ess-trifecta",
    "title": "1 - Introduction",
    "section": "Building a “ESS Trifecta”:",
    "text": "Building a “ESS Trifecta”:\n\n\n\n\n\n\nCombining strong writing skills, advanced data analysis capabilities, and deep domain expertise (in areas such as water, carbon, or ecosystem management systems) paves the way for a flexible, impactful, and interdisciplinary career. Whether your goal is to excel as a scientist, policymaker, or NGO leader, these skills will empower you to make meaningful contributions across diverse fields."
  },
  {
    "objectID": "slides/1-welcome.html#instructor-mike-johnson",
    "href": "slides/1-welcome.html#instructor-mike-johnson",
    "title": "1 - Introduction",
    "section": "Instructor: Mike Johnson",
    "text": "Instructor: Mike Johnson\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeospatial Science & Technology Lead @ NOAA Office of Water Prediction\nPreviously, Chief Data Scientist for local consulting group\n\nGrew our division form 3 to 15 before transitioning\n\nPhD from UCSB in Geography\nOver 10 years of experience working in hydrology and ecosystem science\nPassionate about applying data science to solve environmental challenges\nExcited to share practical tools and insights to prepare you for real-world problem"
  },
  {
    "objectID": "slides/1-welcome.html#teaching-assistant-alan-cai",
    "href": "slides/1-welcome.html#teaching-assistant-alan-cai",
    "title": "1 - Introduction",
    "section": "Teaching Assistant: Alan Cai",
    "text": "Teaching Assistant: Alan Cai"
  },
  {
    "objectID": "slides/1-welcome.html#teaching-assistant-jaque-mcvey",
    "href": "slides/1-welcome.html#teaching-assistant-jaque-mcvey",
    "title": "1 - Introduction",
    "section": "Teaching Assistant: Jaque McVey",
    "text": "Teaching Assistant: Jaque McVey"
  },
  {
    "objectID": "slides/1-welcome.html#course-website",
    "href": "slides/1-welcome.html#course-website",
    "title": "1 - Introduction",
    "section": "Course Website:",
    "text": "Course Website:\n\nhttps://github.com/mikejohnson51/csu-ess-330/"
  },
  {
    "objectID": "slides/1-welcome.html#course-structure-4-units",
    "href": "slides/1-welcome.html#course-structure-4-units",
    "title": "1 - Introduction",
    "section": "Course Structure: 4 Units",
    "text": "Course Structure: 4 Units\n\nOpen Science and Tools (Weeks 1-3)\n\nIntroduction to reproducible workflows and software (R, Rmd, Git)\nHow do you interact with you computer whether you love it or hate it\n\nWorking with Data (Weeks 4-7)\n\nAll data is messy!\nHow do you refine data to answer questions you have in ways others will care about and understand\n\nModeling (Weeks 8-12)\n\nStatistical and simulation models to solve ecosystem-related problems\nPull the current back on “Machine Learning”\nUnderstand that “all” problems are either prediction or classification\n\nGeospatial Data (Weeks 13-16)\n\nAll problems are spatial, how can we add location information to our growing skill set?"
  },
  {
    "objectID": "slides/1-welcome.html#course-components",
    "href": "slides/1-welcome.html#course-components",
    "title": "1 - Introduction",
    "section": "Course Components:",
    "text": "Course Components:\n\n\n\n\n\n\nActivites:\n\nDaily Exercises (20%)\n\nTo be completed between the end of a class and the beginning of the next\nPass/Fail based on effort\nMeant to be low stakes opportunity to experiments\nOne “opps pass” is given per unit\n\nLab Activities (10%)\n\nWork with TAs is lab sections to practice skills learned in class on real world problems\nPass/Fail based on effort\nMeant to be low stakes opportunity to experiments\nOne “opps pass” is given\n\n\n\n\nAssignments:\n\nLabs (50%)\n\nWork with TAs is lab sections to practice skills learned in class on real world problems\n9 in total, some due weekly, others spread over a few\n\nFinal project (20%)\n\nChoose a final project to demonstrate your quantitative reasoning skills, mixing ideas from lectures and labs throughout the semester\nPresent in lightning talk format within lab section\n\n\n\n\nExtra Credit:\n\nExtra Credit (up to 10%)\n\n4% are available for completing all Daily Assignments\n6% are available in extra aspects of the bigger labs\n1% are available for extra lab activity"
  },
  {
    "objectID": "slides/1-welcome.html#grading",
    "href": "slides/1-welcome.html#grading",
    "title": "1 - Introduction",
    "section": "Grading:",
    "text": "Grading:\n\n\n\n\n\n\n\nComponents\n\n\n\nComponent\nPoints\nPercentage\n\n\n\n\nDaily Exercises\n250\n20%\n\n\nLab Activities\n120\n10%\n\n\nLabs\n620\n50%\n\n\nFinal Project\n250\n20%\n\n\nExtra Credit Opportunities\n130\n10%\n\n\nTotal Assigned Points\n1,240\n\n\n\nTotal Possible Points\n1,370\n\n\n\n\n\n\nScale:\nA+: 100 % to 96.67%\nA : &lt; 96.67 % to 93.33%\nA-: &lt; 93.33 % to 90.0%\nB+: &lt; 90.0 % to 86.67%\nB : &lt; 86.67 % to 83.33%\nB-: &lt; 83.33 % to 80.0%\nC+: &lt; 80.0 % to 76.67%\nC : &lt; 76.67 % to 70.0%\nD : &lt; 70.0 % to 60.0%\nF : &lt; 60.0 % to 0.0%"
  },
  {
    "objectID": "slides/1-welcome.html#our-promise",
    "href": "slides/1-welcome.html#our-promise",
    "title": "1 - Introduction",
    "section": "Our promise:",
    "text": "Our promise:\n\n\n\n\n\n\n\nThis class will have a steep learning curve.\nJaque, Alan and I will do everything we can to help you along. If you stick with the course and do the work (particularly the daily assignments!), you will get a good grade, learn a lot, and be prepared to serve as a environmental data scientist in a quantitative capacity - OR - better communicate with those who are serving in that role\nThis style has worked for past students and while I have had students drop, I have never had anyone who tried get lower then a B+.\nSo, please don’t let “getting a bad grade” be a reason to not see this class through!"
  },
  {
    "objectID": "slides/1-welcome.html#working-together",
    "href": "slides/1-welcome.html#working-together",
    "title": "1 - Introduction",
    "section": "Working Together:",
    "text": "Working Together:\n\n\n\n\n\n\n\nFor exercises, labs and assignments, you are welcome to work together but you are expected to write up your own assignment, and hand in your own individually conducted work, including results (models, graphics, tables, etc.) and writing.\nThe project will be done in teams determined in lab"
  },
  {
    "objectID": "slides/1-welcome.html#compute-needs",
    "href": "slides/1-welcome.html#compute-needs",
    "title": "1 - Introduction",
    "section": "Compute Needs:",
    "text": "Compute Needs:\n\n\n\n\n\n\n\nFor this class, we will be installing software and learning about how to organize and interact with our computers\nTo do this effectively you’ll need your own computer running a full OS (not Chromebook)\nIf this is not possible, please reach out to me or your TA and we can find a solution"
  },
  {
    "objectID": "slides/1-welcome.html#attendance",
    "href": "slides/1-welcome.html#attendance",
    "title": "1 - Introduction",
    "section": "Attendance:",
    "text": "Attendance:\n\n\n\n\n\n\n\nEach lecture will introduce new topics or expand on existing content. Therefore if you miss a section or lab, you will miss material. It is highly encouraged that you attend all lectures and the lab sections.\nWe have built this into the grading scheme and believe it facilitates the push to “put in the time”\nThat said, things happen. If you communicate with your TA’s or me we will help you find a solution"
  },
  {
    "objectID": "slides/1-welcome.html#next-time",
    "href": "slides/1-welcome.html#next-time",
    "title": "1 - Introduction",
    "section": "Next Time:",
    "text": "Next Time:\n\n\n\n\n\n\n\nDaily Assignment: Install R and RStudio\n\n\n\n\n\n\n\n\n\nNext Topic: Your Digital Environment\n\n\n\n\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "slides/3-data-types.html#slido",
    "href": "slides/3-data-types.html#slido",
    "title": "Lecture 03",
    "section": "Slido!",
    "text": "Slido!\n\n\n\n\n\n\n\nImportant\n\n\nIf you are having trouble setting up R, RStudio, ect email the teaching team ASAP!"
  },
  {
    "objectID": "slides/3-data-types.html#back-to-compute",
    "href": "slides/3-data-types.html#back-to-compute",
    "title": "Lecture 03",
    "section": "Back to Compute:",
    "text": "Back to Compute:"
  },
  {
    "objectID": "slides/3-data-types.html#information",
    "href": "slides/3-data-types.html#information",
    "title": "Lecture 03",
    "section": "Information",
    "text": "Information\nhttps://www.etix.com/ticket/p/53375671/steel-pulse-50th-anniversary-tour-fort-collins-washingtons\n\n\n\n\n\n\n\nImportant\n\n\nindex.html is everywhere online (lets take a look!)"
  },
  {
    "objectID": "slides/3-data-types.html#input-and-output",
    "href": "slides/3-data-types.html#input-and-output",
    "title": "Lecture 03",
    "section": "Input and Output",
    "text": "Input and Output\n\nI/O stands for Input/Output\nIt provides the guideline for how to read bytes, stored as a file, at a specific path\nLanguages (like R) have readers that take general directions (e.g. “0x89 0x50” is how a PNG file starts.) and interprets it to how the language needs the data"
  },
  {
    "objectID": "slides/3-data-types.html#read-from-disk",
    "href": "slides/3-data-types.html#read-from-disk",
    "title": "Lecture 03",
    "section": "Read from Disk",
    "text": "Read from Disk\n\nimg &lt;- png::readPNG('images/03-bit-byte.png')"
  },
  {
    "objectID": "slides/3-data-types.html#return-from-server-json",
    "href": "slides/3-data-types.html#return-from-server-json",
    "title": "Lecture 03",
    "section": "Return from Server: JSON",
    "text": "Return from Server: JSON\n\n'https://geoconnex.us/ref/mainstems/352913' |&gt; \n1 jsonlite::fromJSON()\n$type\n[1] \"Feature\"\n\n$properties\n$properties$uri\n[1] \"https://geoconnex.us/ref/mainstems/352913\"\n\n$properties$head_nhdpv2huc12\n[1] \"https://geoconnex.us/nhdplusv2/huc12/101900070202\"\n\n$properties$head_2020huc12\n[1] \"101900070202\"\n\n$properties$featuretype\n[1] \"['https://www.opengis.net/def/schema/hy_features/hyf/HY_FlowPath', 'https://www.opengis.net/def/schema/hy_features/hyf/HY_WaterBody']\"\n\n$properties$outlet_nhdpv2huc12\n[1] \"https://geoconnex.us/nhdplusv2/huc12/101900071008\"\n\n$properties$outlet_2020huc12\n[1] \"101900071008\"\n\n$properties$downstream_mainstem_id\n[1] \"https://geoconnex.us/ref/mainstems/313255\"\n\n$properties$lengthkm\n[1] 200.5\n\n$properties$superseded\n[1] FALSE\n\n$properties$encompassing_mainstem_basins\n[1] \"['https://geoconnex.us/ref/mainstems/313255', 'https://geoconnex.us/ref/mainstems/312532', 'https://geoconnex.us/ref/mainstems/312091']\"\n\n$properties$outlet_drainagearea_sqkm\n[1] 4875.9\n\n$properties$new_mainstemid\n[1] \"\"\n\n$properties$name_at_outlet\n[1] \"Cache la Poudre River\"\n\n$properties$head_rf1id\n[1] 22904\n\n$properties$name_at_outlet_gnis_id\n[1] 205018\n\n$properties$outlet_rf1id\n[1] 22867\n\n$properties$head_nhdpv2_comid\n[1] \"https://geoconnex.us/nhdplusv2/comid/2902889\"\n\n$properties$head_nhdpv1_comid\nNULL\n\n$properties$fid\n[1] 18032\n\n$properties$outlet_nhdpv2_comid\n[1] \"https://geoconnex.us/nhdplusv2/comid/2903809\"\n\n$properties$outlet_nhdpv1_comid\nNULL\n\n$properties$datasets\n                                                       monitoringLocation\n1 https://sta.geoconnex.dev/collections/USGS/Things/items/'USGS-06752280'\n2 https://sta.geoconnex.dev/collections/USGS/Things/items/'USGS-06752280'\n3 https://sta.geoconnex.dev/collections/USGS/Things/items/'USGS-06752280'\n4 https://sta.geoconnex.dev/collections/USGS/Things/items/'USGS-06752280'\n       siteName                                           datasetDescription\n1 USGS-06752280 Gage height / USGS-06752280-7176ea9161f94cbf8bd7b30aba7891fd\n2 USGS-06752280 Gage height / USGS-06752280-7176ea9161f94cbf8bd7b30aba7891fd\n3 USGS-06752280   Discharge / USGS-06752280-b9cc8727355d4de08f7c0826530c96ce\n4 USGS-06752280   Discharge / USGS-06752280-b9cc8727355d4de08f7c0826530c96ce\n    type\n1 Stream\n2 Stream\n3 Stream\n4 Stream\n                                                                           url\n1 https://waterdata.usgs.gov/monitoring-location/06752280/#parameterCode=00065\n2 https://waterdata.usgs.gov/monitoring-location/06752280/#parameterCode=00065\n3 https://waterdata.usgs.gov/monitoring-location/06752280/#parameterCode=00060\n4 https://waterdata.usgs.gov/monitoring-location/06752280/#parameterCode=00060\n                                              variableMeasured variableUnit\n1 Gage height / USGS-06752280-7176ea9161f94cbf8bd7b30aba7891fd           ft\n2 Gage height / USGS-06752280-7176ea9161f94cbf8bd7b30aba7891fd           ft\n3   Discharge / USGS-06752280-b9cc8727355d4de08f7c0826530c96ce       ft^3/s\n4   Discharge / USGS-06752280-b9cc8727355d4de08f7c0826530c96ce       ft^3/s\n  measurementTechnique                          temporalCoverage\n1          observation 2024-08-30T09:15:00Z/2024-09-09T18:00:00Z\n2          observation 2024-08-30T09:15:00Z/2024-09-09T18:00:00Z\n3          observation 2024-08-30T09:15:00Z/2024-09-09T18:00:00Z\n4          observation 2024-08-30T09:15:00Z/2024-09-09T18:00:00Z\n                   distributionName\n1 USGS Instantaneous Values Service\n2             USGS SensorThings API\n3             USGS SensorThings API\n4 USGS Instantaneous Values Service\n                                                                                                      distributionURL\n1                                https://waterservices.usgs.gov/nwis/iv/?sites=USGS:06752280¶meterCd=00065&format=rdb\n2 https://labs.waterdata.usgs.gov/sta/v1.1/Datastreams('7176ea9161f94cbf8bd7b30aba7891fd')?$expand=Thing,Observations\n3 https://labs.waterdata.usgs.gov/sta/v1.1/Datastreams('b9cc8727355d4de08f7c0826530c96ce')?$expand=Thing,Observations\n4                                https://waterservices.usgs.gov/nwis/iv/?sites=USGS:06752280¶meterCd=00060&format=rdb\n         distributionFormat                                        wkt\n1 text/tab-separated-values POINT (-105.011365078564 40.5519269209862)\n2          application/json POINT (-105.011365078564 40.5519269209862)\n3          application/json POINT (-105.011365078564 40.5519269209862)\n4 text/tab-separated-values POINT (-105.011365078564 40.5519269209862)\n\n\n$id\n[1] \"352913\"\n\n$geometry\n$geometry$type\n[1] \"LineString\"\n\n$geometry$coordinates\n            [,1]     [,2]\n  [1,] -105.8107 40.42002\n  [2,] -105.7947 40.43621\n  [3,] -105.7852 40.44236\n  [4,] -105.7735 40.44730\n  [5,] -105.7606 40.45680\n  [6,] -105.7513 40.46771\n  [7,] -105.7444 40.46977\n  [8,] -105.7345 40.46944\n  [9,] -105.7318 40.47216\n [10,] -105.7320 40.47614\n [11,] -105.7383 40.48742\n [12,] -105.7356 40.49914\n [13,] -105.7376 40.50436\n [14,] -105.7371 40.51262\n [15,] -105.7421 40.51571\n [16,] -105.7427 40.51838\n [17,] -105.7473 40.52252\n [18,] -105.7499 40.53037\n [19,] -105.7526 40.53142\n [20,] -105.7547 40.54133\n [21,] -105.7642 40.54846\n [22,] -105.7739 40.55154\n [23,] -105.7793 40.55726\n [24,] -105.7907 40.56379\n [25,] -105.7984 40.57411\n [26,] -105.8025 40.57606\n [27,] -105.8041 40.58197\n [28,] -105.8016 40.58544\n [29,] -105.8042 40.58956\n [30,] -105.8044 40.59581\n [31,] -105.8002 40.59709\n [32,] -105.7954 40.61033\n [33,] -105.8007 40.61327\n [34,] -105.7993 40.61670\n [35,] -105.8005 40.62526\n [36,] -105.8074 40.63057\n [37,] -105.8062 40.63652\n [38,] -105.8094 40.64254\n [39,] -105.8102 40.65254\n [40,] -105.8129 40.65833\n [41,] -105.8092 40.66116\n [42,] -105.8092 40.66420\n [43,] -105.8039 40.67100\n [44,] -105.7970 40.66987\n [45,] -105.7869 40.67158\n [46,] -105.7764 40.67752\n [47,] -105.7662 40.68802\n [48,] -105.7609 40.69060\n [49,] -105.7587 40.69469\n [50,] -105.7591 40.69991\n [51,] -105.7544 40.70198\n [52,] -105.7538 40.70562\n [53,] -105.7495 40.70701\n [54,] -105.7511 40.70825\n [55,] -105.7461 40.71049\n [56,] -105.7413 40.71027\n [57,] -105.7398 40.71210\n [58,] -105.7374 40.71162\n [59,] -105.7328 40.71387\n [60,] -105.7276 40.71037\n [61,] -105.7253 40.70610\n [62,] -105.7217 40.70688\n [63,] -105.7159 40.70043\n [64,] -105.7073 40.69936\n [65,] -105.7065 40.70083\n [66,] -105.7040 40.69795\n [67,] -105.7013 40.69703\n [68,] -105.6996 40.69859\n [69,] -105.6936 40.69502\n [70,] -105.6871 40.69732\n [71,] -105.6797 40.69380\n [72,] -105.6768 40.69444\n [73,] -105.6742 40.69835\n [74,] -105.6679 40.69730\n [75,] -105.6624 40.70014\n [76,] -105.6502 40.70014\n [77,] -105.6355 40.70280\n [78,] -105.6274 40.70070\n [79,] -105.6243 40.69759\n [80,] -105.6196 40.69807\n [81,] -105.6063 40.69424\n [82,] -105.5992 40.69751\n [83,] -105.5818 40.69733\n [84,] -105.5772 40.69893\n [85,] -105.5740 40.69819\n [86,] -105.5670 40.70100\n [87,] -105.5621 40.69892\n [88,] -105.5538 40.70022\n [89,] -105.5386 40.69987\n [90,] -105.5309 40.69817\n [91,] -105.5227 40.69891\n [92,] -105.5191 40.69726\n [93,] -105.5195 40.69516\n [94,] -105.5158 40.69154\n [95,] -105.5127 40.69170\n [96,] -105.5087 40.68952\n [97,] -105.5027 40.69180\n [98,] -105.4943 40.69020\n [99,] -105.4913 40.68810\n[100,] -105.4885 40.69046\n[101,] -105.4862 40.68865\n[102,] -105.4802 40.67479\n[103,] -105.4777 40.67390\n[104,] -105.4728 40.67521\n[105,] -105.4713 40.68141\n[106,] -105.4670 40.68325\n[107,] -105.4625 40.68311\n[108,] -105.4582 40.68012\n[109,] -105.4553 40.68033\n[110,] -105.4530 40.68326\n[111,] -105.4468 40.68624\n[112,] -105.4505 40.69434\n[113,] -105.4450 40.69480\n[114,] -105.4417 40.69748\n[115,] -105.4347 40.69396\n[116,] -105.4325 40.69073\n[117,] -105.4357 40.68084\n[118,] -105.4303 40.67707\n[119,] -105.4292 40.67449\n[120,] -105.4231 40.67671\n[121,] -105.4180 40.67383\n[122,] -105.4113 40.67884\n[123,] -105.4123 40.68166\n[124,] -105.4092 40.68392\n[125,] -105.4039 40.68273\n[126,] -105.3965 40.68457\n[127,] -105.3940 40.68292\n[128,] -105.3899 40.68285\n[129,] -105.3880 40.68532\n[130,] -105.3816 40.68358\n[131,] -105.3769 40.68784\n[132,] -105.3792 40.69168\n[133,] -105.3766 40.69464\n[134,] -105.3705 40.69230\n[135,] -105.3717 40.68951\n[136,] -105.3684 40.68727\n[137,] -105.3627 40.68859\n[138,] -105.3552 40.68820\n[139,] -105.3455 40.69111\n[140,] -105.3413 40.69072\n[141,] -105.3368 40.69413\n[142,] -105.3330 40.69310\n[143,] -105.3294 40.69476\n[144,] -105.3228 40.68948\n[145,] -105.2996 40.68690\n[146,] -105.2978 40.68990\n[147,] -105.2954 40.68873\n[148,] -105.2879 40.69014\n[149,] -105.2888 40.69415\n[150,] -105.2813 40.69588\n[151,] -105.2804 40.69867\n[152,] -105.2716 40.69608\n[153,] -105.2646 40.69751\n[154,] -105.2648 40.69298\n[155,] -105.2553 40.69178\n[156,] -105.2557 40.69766\n[157,] -105.2458 40.70302\n[158,] -105.2424 40.70346\n[159,] -105.2411 40.70142\n[160,] -105.2466 40.69878\n[161,] -105.2420 40.69565\n[162,] -105.2390 40.69067\n[163,] -105.2363 40.69083\n[164,] -105.2354 40.68902\n[165,] -105.2367 40.68673\n[166,] -105.2403 40.68598\n[167,] -105.2364 40.68348\n[168,] -105.2380 40.67122\n[169,] -105.2326 40.66894\n[170,] -105.2290 40.67203\n[171,] -105.2251 40.66455\n[172,] -105.2128 40.66273\n[173,] -105.2109 40.65982\n[174,] -105.2044 40.65926\n[175,] -105.2016 40.66088\n[176,] -105.1860 40.65664\n[177,] -105.1738 40.64820\n[178,] -105.1729 40.64195\n[179,] -105.1678 40.63680\n[180,] -105.1686 40.63163\n[181,] -105.1667 40.62971\n[182,] -105.1435 40.62473\n[183,] -105.1390 40.62070\n[184,] -105.1281 40.61912\n[185,] -105.1206 40.61313\n[186,] -105.1159 40.61411\n[187,] -105.1136 40.61180\n[188,] -105.1069 40.61210\n[189,] -105.1033 40.60709\n[190,] -105.0987 40.60443\n[191,] -105.0926 40.60143\n[192,] -105.0798 40.59838\n[193,] -105.0712 40.59158\n[194,] -105.0679 40.59177\n[195,] -105.0696 40.58813\n[196,] -105.0656 40.58710\n[197,] -105.0656 40.58408\n[198,] -105.0594 40.58332\n[199,] -105.0582 40.58048\n[200,] -105.0525 40.57981\n[201,] -105.0481 40.57612\n[202,] -105.0447 40.57850\n[203,] -105.0351 40.57859\n[204,] -105.0323 40.57250\n[205,] -105.0279 40.57130\n[206,] -105.0269 40.56611\n[207,] -105.0229 40.56038\n[208,] -105.0191 40.55860\n[209,] -105.0169 40.55285\n[210,] -105.0137 40.55081\n[211,] -105.0093 40.55136\n[212,] -105.0073 40.54840\n[213,] -105.0025 40.54920\n[214,] -104.9973 40.54249\n[215,] -104.9995 40.53741\n[216,] -104.9945 40.53128\n[217,] -104.9892 40.53326\n[218,] -104.9860 40.53086\n[219,] -104.9858 40.52191\n[220,] -104.9807 40.52148\n[221,] -104.9808 40.51494\n[222,] -104.9764 40.51622\n[223,] -104.9748 40.50222\n[224,] -104.9732 40.50117\n[225,] -104.9704 40.50311\n[226,] -104.9675 40.50229\n[227,] -104.9680 40.49907\n[228,] -104.9644 40.49724\n[229,] -104.9677 40.49476\n[230,] -104.9650 40.49072\n[231,] -104.9662 40.48838\n[232,] -104.9583 40.48550\n[233,] -104.9575 40.48022\n[234,] -104.9527 40.47862\n[235,] -104.9506 40.47546\n[236,] -104.9467 40.47604\n[237,] -104.9417 40.47053\n[238,] -104.9385 40.46998\n[239,] -104.9373 40.47183\n[240,] -104.9344 40.46961\n[241,] -104.9303 40.46911\n[242,] -104.9289 40.46660\n[243,] -104.9242 40.46404\n[244,] -104.9192 40.46395\n[245,] -104.9208 40.46722\n[246,] -104.9188 40.46932\n[247,] -104.9168 40.46907\n[248,] -104.9130 40.46475\n[249,] -104.9163 40.46173\n[250,] -104.9153 40.45967\n[251,] -104.9106 40.46242\n[252,] -104.9064 40.46281\n[253,] -104.9054 40.45537\n[254,] -104.9015 40.45528\n[255,] -104.8977 40.45320\n[256,] -104.8940 40.45505\n[257,] -104.8897 40.44803\n[258,] -104.8840 40.44647\n[259,] -104.8836 40.44336\n[260,] -104.8795 40.44148\n[261,] -104.8765 40.44201\n[262,] -104.8760 40.44020\n[263,] -104.8783 40.43780\n[264,] -104.8771 40.43647\n[265,] -104.8736 40.43697\n[266,] -104.8706 40.43997\n[267,] -104.8670 40.44100\n[268,] -104.8657 40.44530\n[269,] -104.8625 40.44450\n[270,] -104.8593 40.43926\n[271,] -104.8539 40.44278\n[272,] -104.8505 40.44132\n[273,] -104.8477 40.44310\n[274,] -104.8442 40.44310\n[275,] -104.8386 40.44738\n[276,] -104.8341 40.44445\n[277,] -104.8313 40.44438\n[278,] -104.8309 40.44758\n[279,] -104.8279 40.44834\n[280,] -104.8132 40.44666\n[281,] -104.8076 40.44217\n[282,] -104.8042 40.44526\n[283,] -104.8009 40.44288\n[284,] -104.7965 40.44429\n[285,] -104.7999 40.44693\n[286,] -104.7988 40.44853\n[287,] -104.7875 40.44419\n[288,] -104.7842 40.44701\n[289,] -104.7800 40.44666\n[290,] -104.7775 40.44821\n[291,] -104.7760 40.44775\n[292,] -104.7767 40.44547\n[293,] -104.7734 40.44601\n[294,] -104.7667 40.44012\n[295,] -104.7652 40.44076\n[296,] -104.7653 40.44383\n[297,] -104.7676 40.44825\n[298,] -104.7630 40.44772\n[299,] -104.7627 40.44493\n[300,] -104.7601 40.44433\n[301,] -104.7554 40.45126\n[302,] -104.7429 40.45225\n[303,] -104.7305 40.44885\n[304,] -104.7221 40.44988\n[305,] -104.7175 40.44765\n[306,] -104.7172 40.44522\n[307,] -104.7116 40.44582\n[308,] -104.7109 40.44188\n[309,] -104.7063 40.44100\n[310,] -104.7008 40.44235\n[311,] -104.6966 40.44093\n[312,] -104.6878 40.44075\n[313,] -104.6887 40.43744\n[314,] -104.6861 40.43277\n[315,] -104.6829 40.42996\n[316,] -104.6801 40.42382\n[317,] -104.6739 40.41975\n[318,] -104.6710 40.42220\n[319,] -104.6665 40.42262\n[320,] -104.6607 40.42054\n[321,] -104.6518 40.42036\n[322,] -104.6480 40.42162\n[323,] -104.6396 40.41798\n[324,] -104.6331 40.41999\n[325,] -104.6293 40.41867\n[326,] -104.6225 40.42214\n[327,] -104.6195 40.41965\n[328,] -104.6173 40.42244\n[329,] -104.6091 40.42322\n[330,] -104.6075 40.42535\n[331,] -104.6022 40.42493\n[332,] -104.6000 40.42158\n\n\n$prev\n[1] \"352803\"\n\n$`next`\n[1] \"352986\"\n\n$links\n                  type        rel                                   title\n1     application/json       root The landing page of this server as JSON\n2            text/html       root The landing page of this server as HTML\n3 application/geo+json       self                   This document as JSON\n4  application/ld+json  alternate          This document as RDF (JSON-LD)\n5            text/html  alternate                   This document as HTML\n6     application/json collection                     Reference Mainstems\n7     application/json       prev                                    &lt;NA&gt;\n8     application/json       next                                    &lt;NA&gt;\n                                                                      href\n1                                    https://reference.geoconnex.us?f=json\n2                                    https://reference.geoconnex.us?f=html\n3                         https://geoconnex.us/ref/mainstems/352913?f=json\n4                       https://geoconnex.us/ref/mainstems/352913?f=jsonld\n5                         https://geoconnex.us/ref/mainstems/352913?f=html\n6                     https://reference.geoconnex.us/collections/mainstems\n7 https://reference.geoconnex.us/collections/mainstems/items/352803?f=json\n8 https://reference.geoconnex.us/collections/mainstems/items/352986?f=json\n\n\n1\n\nRead as JSON using json reader"
  },
  {
    "objectID": "slides/3-data-types.html#return-2-ogr",
    "href": "slides/3-data-types.html#return-2-ogr",
    "title": "Lecture 03",
    "section": "Return 2: OGR",
    "text": "Return 2: OGR\n\nx &lt;- 'https://geoconnex.us/ref/mainstems/352913' |&gt; \n1 sf::read_sf()\n\n\n1\n\nRead as spatial data using simple features (sf) reader . . .\n\n\n\n\n\nmapview::mapview(x)"
  },
  {
    "objectID": "slides/3-data-types.html#return-2-gdal",
    "href": "slides/3-data-types.html#return-2-gdal",
    "title": "Lecture 03",
    "section": "Return 2: GDAL",
    "text": "Return 2: GDAL\n\n's3://spatial-water-noaa/nwm/CONUS/ISLTYP.tif' |&gt; \n1  terra::rast() |&gt;\n  terra::plot()\n\n\n1\n\nRead tif data as raster with GDAL"
  },
  {
    "objectID": "slides/3-data-types.html#return-3-csv",
    "href": "slides/3-data-types.html#return-3-csv",
    "title": "Lecture 03",
    "section": "Return 3: CSV",
    "text": "Return 3: CSV\n\n'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv' |&gt; \n1  readr::read_csv(n_max = 5)\n# A tibble: 5 × 6\n  date       county    state       fips cases deaths\n  &lt;date&gt;     &lt;chr&gt;     &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 2020-01-21 Snohomish Washington 53061     1      0\n2 2020-01-22 Snohomish Washington 53061     1      0\n3 2020-01-23 Snohomish Washington 53061     1      0\n4 2020-01-24 Cook      Illinois   17031     1      0\n5 2020-01-24 Snohomish Washington 53061     1      0\n\n\n1\n\nRead CSV data using csv reader"
  },
  {
    "objectID": "slides/3-data-types.html#note-bytehttp-range-requests",
    "href": "slides/3-data-types.html#note-bytehttp-range-requests",
    "title": "Lecture 03",
    "section": "Note: Byte/HTTP Range Requests",
    "text": "Note: Byte/HTTP Range Requests\n\n\n\n\n\n\n\nByte range requests are a feature of HTTP. They allow clients to request only a portion of a resource\nStarted with video buffering and bandwidth conservation\nMassively valuable in cloud compute\nIntegral to cloud native geospatial"
  },
  {
    "objectID": "slides/3-data-types.html#objects",
    "href": "slides/3-data-types.html#objects",
    "title": "Lecture 03",
    "section": "Objects",
    "text": "Objects\n\nObjects store data (values) (my.school = “UCSB”)\nObjects can be changed according to our needs. (my.school = “CSU”)\nA object provides us with named storage that our programs can manipulate.\n\nObjects have a human readable name\nAn operable value\nA location in memory where it is stored"
  },
  {
    "objectID": "slides/3-data-types.html#so-how-do-we-define-objects",
    "href": "slides/3-data-types.html#so-how-do-we-define-objects",
    "title": "Lecture 03",
    "section": "So how do we define objects?",
    "text": "So how do we define objects?\n\nWe can read them from a location (local or remote)\n\n\n\npoudre.river &lt;-  sf::read_sf('https://geoconnex.us/ref/mainstems/352913') \n\n\n\n\npoudre.river\nSimple feature collection with 1 feature and 23 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -105.8129 ymin: 40.41798 xmax: -104.6 ymax: 40.71387\nGeodetic CRS:  WGS 84\n# A tibble: 1 × 24\n  id     featuretype      head_nhdpv2huc12 head_2020huc12 downstream_mainstem_id\n  &lt;chr&gt;  &lt;chr&gt;            &lt;chr&gt;            &lt;chr&gt;          &lt;chr&gt;                 \n1 352913 ['https://www.o… https://geoconn… 101900070202   https://geoconnex.us/…\n# ℹ 19 more variables: outlet_nhdpv2huc12 &lt;chr&gt;, outlet_2020huc12 &lt;chr&gt;,\n#   encompassing_mainstem_basins &lt;chr&gt;, lengthkm &lt;dbl&gt;, superseded &lt;lgl&gt;,\n#   name_at_outlet &lt;chr&gt;, outlet_drainagearea_sqkm &lt;dbl&gt;, new_mainstemid &lt;chr&gt;,\n#   name_at_outlet_gnis_id &lt;int&gt;, head_rf1id &lt;int&gt;, head_nhdpv2_comid &lt;chr&gt;,\n#   outlet_rf1id &lt;int&gt;, fid &lt;int&gt;, outlet_nhdpv2_comid &lt;chr&gt;,\n#   head_nhdpv1_comid &lt;chr&gt;, uri &lt;chr&gt;, outlet_nhdpv1_comid &lt;chr&gt;,\n#   datasets &lt;chr&gt;, geometry &lt;LINESTRING [°]&gt;\n\n\n\n\nWe can define them in code!"
  },
  {
    "objectID": "slides/3-data-types.html#object-names-values",
    "href": "slides/3-data-types.html#object-names-values",
    "title": "Lecture 03",
    "section": "Object Names & Values",
    "text": "Object Names & Values\n\nIn both cases, the object name is arbitrary and helps reference values.\nNames are used by reader ( ) of the program\nvalues are “bound” to a name using the = or &lt;- assignment operators\n\n\n\na = 3\na &lt;- 3\n\n\n\n\nprint(a)\n[1] 3\n\n\n\n\nThe result is the value 3 is bound to the name “a”.\nR can interpret the name as the object/value it holds.\n\n\n\n\n# Allow computations\n3*a\n[1] 9\n\n# Allow reassignment\na &lt;- 5\n\n# Allow operations\nrep(\"TEXT\", a)\n[1] \"TEXT\" \"TEXT\" \"TEXT\" \"TEXT\" \"TEXT\""
  },
  {
    "objectID": "slides/3-data-types.html#binding-101",
    "href": "slides/3-data-types.html#binding-101",
    "title": "Lecture 03",
    "section": "Binding 101",
    "text": "Binding 101\nIt is easy to read this statement as “create an object, named x, containing the value 10”\n\n\nx &lt;- 10\n\n\n\n\nBut this is a simplification!\nIn actuality:\n\nIt’s creating a object of value 10\nAnd binding that object to a name ‘x’\n\nTherefore the value (10) does not have a name, rather, the name (x) has a value (Subtle but important!!)"
  },
  {
    "objectID": "slides/3-data-types.html#object-address",
    "href": "slides/3-data-types.html#object-address",
    "title": "Lecture 03",
    "section": "Object Address",
    "text": "Object Address\n\nObjects have unique identifiers.\nThese identifiers have a form that looks like the object’s memory “address”\nThe actual memory addresses changes every time the code is run, so we use these identifiers instead.\nIf you are interested in this, the Wikipedia page is great!\n\n\n\nx &lt;- 10\n\nlobstr::obj_addr(x)\n[1] \"0x153c7da38\""
  },
  {
    "objectID": "slides/3-data-types.html#to-illustate-this",
    "href": "slides/3-data-types.html#to-illustate-this",
    "title": "Lecture 03",
    "section": "To illustate this…",
    "text": "To illustate this…\nIn the code below, y doesn’t make another copy of the value 10, but instead creates an additional binding to the existing object.\n\n\nx &lt;- 10\ny &lt;- x\n\nrlang::obj_address(x)\n[1] \"0x153f70c88\"\nrlang::obj_address(y)\n[1] \"0x153f70c88\"\n\n\n\nEqually, if we create two unique objects (even with the same value), they are different:\n\n\n\nx2 &lt;- 10\ny2 &lt;- 10\n\nrlang::obj_address(x2)\n[1] \"0x135e57e70\"\nrlang::obj_address(y2)\n[1] \"0x135e6b610\"\n\n\n\nThis is because the values are buffered in memory rather then on hard disk!"
  },
  {
    "objectID": "slides/3-data-types.html#computer-memory-like-a-dynamic-hard-disk",
    "href": "slides/3-data-types.html#computer-memory-like-a-dynamic-hard-disk",
    "title": "Lecture 03",
    "section": "Computer Memory: Like a Dynamic Hard Disk",
    "text": "Computer Memory: Like a Dynamic Hard Disk\n\nTemporary Storage: Just like a hard disk stores data, computer memory (RAM) stores data, but it is temporary. It holds data and instructions that are actively used by the CPU.\n\n\n\nDynamic: Unlike a static hard disk, memory is dynamic—it constantly updates as the system runs, reading and writing data quickly.\n\n\n\n\nFaster than Hard Disk: Memory operates at high speeds, enabling quicker access and retrieval of data compared to the relatively slower hard disk drives (HDDs).\n\n\n\n\nVolatility: Memory is volatile, meaning that once the computer is powered off, all stored data is lost. In contrast, hard disks retain data even when the system is powered down."
  },
  {
    "objectID": "slides/3-data-types.html#this-is-why-memory-and-clearing-memory-matters",
    "href": "slides/3-data-types.html#this-is-why-memory-and-clearing-memory-matters",
    "title": "Lecture 03",
    "section": "This is why memory (and clearing memory!) matters",
    "text": "This is why memory (and clearing memory!) matters"
  },
  {
    "objectID": "slides/3-data-types.html#so-what-can-we-do-with-objects",
    "href": "slides/3-data-types.html#so-what-can-we-do-with-objects",
    "title": "Lecture 03",
    "section": "So what can we do with objects?",
    "text": "So what can we do with objects?\n\nRemember our school example?\nWe wanted to store information about the school as named values:\n\n\n\nmy.school &lt;- \"CSU\"\nlat &lt;- 40.5715\nlng &lt;- -105.0752\n\n\n\n\nBut these are very different kinds of information with defined capabilities.\nWhat would happen if we tried to add lng to lat?\n\n\n\n\nlng + lat\n[1] -64.5037\n\n\n\n\nWhat would happen if we tried to add lng to my.school?\n\n\n\n\nlng + my.school\nError in lng + my.school: non-numeric argument to binary operator\n\n\n\n\nWe see a non-numeric argument error telling us that name is not a numeric value. This is our first hint that values have different classes/types.\n\n\n\n\ncharToRaw(3)\nError in charToRaw(3): argument must be a character vector of length 1\ncharToRaw(\"3\")\n[1] 33\n\n\n\n\nWhy is the value “3” different the the value 3?"
  },
  {
    "objectID": "slides/3-data-types.html#computers-via-r-convert-bytes---hex---value",
    "href": "slides/3-data-types.html#computers-via-r-convert-bytes---hex---value",
    "title": "Lecture 03",
    "section": "Computers (via R) convert bytes <-> hex <-> value",
    "text": "Computers (via R) convert bytes &lt;-&gt; hex &lt;-&gt; value"
  },
  {
    "objectID": "slides/3-data-types.html#whats-the-difference-between-3-the-number-and-3-the-character",
    "href": "slides/3-data-types.html#whats-the-difference-between-3-the-number-and-3-the-character",
    "title": "Lecture 03",
    "section": "What’s the difference between 3 (the number) and ‘3’ (the character)?",
    "text": "What’s the difference between 3 (the number) and ‘3’ (the character)?\n\nTo a computer: nothing\nTo us: meaning\nTo software: hows its handled"
  },
  {
    "objectID": "slides/3-data-types.html#data-types-1",
    "href": "slides/3-data-types.html#data-types-1",
    "title": "Lecture 03",
    "section": "Data Types",
    "text": "Data Types\nValues in R can be one of 6 different types : 1. numeric (e.g. 2, 2.15) 2. integer (e.g. 2L) 3. character (e.g. \"x\", \"Welcome!\") 4. logical (e.g. TRUE, FALSE) 5. raw (e.g. holds bytes) 6. complex (e.g. 1+4i) - we are going to ignore\n\nThe class function tells us what kind of object is it (high-level)\nThe typeof function can tell us the object’s data type (low-level)"
  },
  {
    "objectID": "slides/3-data-types.html#numeric",
    "href": "slides/3-data-types.html#numeric",
    "title": "Lecture 03",
    "section": "1. Numeric",
    "text": "1. Numeric\n\nValues with decimals\nOf type “double” in computer science terms\nDefault computational data type in R.\nDoubles can be specified in decimal (0.1234), scientific (1.23e4), or hexadecimal (0xcafe) form.\nThere are three special values unique to doubles: Inf, -Inf, and NaN (not a number)."
  },
  {
    "objectID": "slides/3-data-types.html#numerics",
    "href": "slides/3-data-types.html#numerics",
    "title": "Lecture 03",
    "section": "Numerics",
    "text": "Numerics\n\n\n\n(x = 4.75)\n\n\n\n[1] 4.75"
  },
  {
    "objectID": "slides/3-data-types.html#numerics-1",
    "href": "slides/3-data-types.html#numerics-1",
    "title": "Lecture 03",
    "section": "Numerics",
    "text": "Numerics\n\n\n\n(x = 4.75)\nclass(x)\n\n\n\n[1] 4.75\n[1] \"numeric\""
  },
  {
    "objectID": "slides/3-data-types.html#numerics-2",
    "href": "slides/3-data-types.html#numerics-2",
    "title": "Lecture 03",
    "section": "Numerics",
    "text": "Numerics\n\n\n\n(x = 4.75)\nclass(x)\ntypeof(x)\n\n\n\n[1] 4.75\n[1] \"numeric\"\n[1] \"double\""
  },
  {
    "objectID": "slides/3-data-types.html#numerics-3",
    "href": "slides/3-data-types.html#numerics-3",
    "title": "Lecture 03",
    "section": "Numerics",
    "text": "Numerics\n\n\n\n(x = 4.75)\nclass(x)\ntypeof(x)\n\nx * 2\n\n\n\n[1] 4.75\n[1] \"numeric\"\n[1] \"double\"\n[1] 9.5"
  },
  {
    "objectID": "slides/3-data-types.html#numerics-4",
    "href": "slides/3-data-types.html#numerics-4",
    "title": "Lecture 03",
    "section": "Numerics",
    "text": "Numerics\n\n\n\n(x = 4.75)\nclass(x)\ntypeof(x)\n\nx * 2\nx + 2\n\n\n\n[1] 4.75\n[1] \"numeric\"\n[1] \"double\"\n[1] 9.5\n[1] 6.75"
  },
  {
    "objectID": "slides/3-data-types.html#numerics-5",
    "href": "slides/3-data-types.html#numerics-5",
    "title": "Lecture 03",
    "section": "Numerics",
    "text": "Numerics\n\n\n\n(x = 4.75)\nclass(x)\ntypeof(x)\n\nx * 2\nx + 2\nx - 5\n\n\n\n[1] 4.75\n[1] \"numeric\"\n[1] \"double\"\n[1] 9.5\n[1] 6.75\n[1] -0.25"
  },
  {
    "objectID": "slides/3-data-types.html#numerics-6",
    "href": "slides/3-data-types.html#numerics-6",
    "title": "Lecture 03",
    "section": "Numerics",
    "text": "Numerics\n\n\n\n(x = 4.75)\nclass(x)\ntypeof(x)\n\nx * 2\nx + 2\nx - 5\nx / 4\n\n\n\n[1] 4.75\n[1] \"numeric\"\n[1] \"double\"\n[1] 9.5\n[1] 6.75\n[1] -0.25\n[1] 1.1875"
  },
  {
    "objectID": "slides/3-data-types.html#numerics-7",
    "href": "slides/3-data-types.html#numerics-7",
    "title": "Lecture 03",
    "section": "Numerics",
    "text": "Numerics\n\n\n\n(x = 4.75)\nclass(x)\ntypeof(x)\n\nx * 2\nx + 2\nx - 5\nx / 4\n\n\nx == 4\n\n\n\n[1] 4.75\n[1] \"numeric\"\n[1] \"double\"\n[1] 9.5\n[1] 6.75\n[1] -0.25\n[1] 1.1875\n[1] FALSE"
  },
  {
    "objectID": "slides/3-data-types.html#integer",
    "href": "slides/3-data-types.html#integer",
    "title": "Lecture 03",
    "section": "2. Integer",
    "text": "2. Integer\n\nValues without decimals\nTo create an integer in R you must follow the a number with an uppercase L.\nTake less memory then doubles but this is rarely an issue\nOne byte is 8 bits,\nEach bit can represent two values (0,1),\nOne byte can hold 28=256 values.\nused for (0 to 255) –or– (−128 to 127)."
  },
  {
    "objectID": "slides/3-data-types.html#integers",
    "href": "slides/3-data-types.html#integers",
    "title": "Lecture 03",
    "section": "Integers",
    "text": "Integers\n\n\n\n(x = 2)  # defaults to numeric\n\n\n\n[1] 2"
  },
  {
    "objectID": "slides/3-data-types.html#integers-1",
    "href": "slides/3-data-types.html#integers-1",
    "title": "Lecture 03",
    "section": "Integers",
    "text": "Integers\n\n\n\n(x = 2)  # defaults to numeric\ntypeof(x)\n\n\n\n[1] 2\n[1] \"double\""
  },
  {
    "objectID": "slides/3-data-types.html#integers-2",
    "href": "slides/3-data-types.html#integers-2",
    "title": "Lecture 03",
    "section": "Integers",
    "text": "Integers\n\n\n\n(x = 2)  # defaults to numeric\ntypeof(x)\n(y = 2L)  # specifies integer\n\n\n\n[1] 2\n[1] \"double\"\n[1] 2"
  },
  {
    "objectID": "slides/3-data-types.html#integers-3",
    "href": "slides/3-data-types.html#integers-3",
    "title": "Lecture 03",
    "section": "Integers",
    "text": "Integers\n\n\n\n(x = 2)  # defaults to numeric\ntypeof(x)\n(y = 2L)  # specifies integer\ntypeof(y)\n\n\n\n[1] 2\n[1] \"double\"\n[1] 2\n[1] \"integer\""
  },
  {
    "objectID": "slides/3-data-types.html#integers-4",
    "href": "slides/3-data-types.html#integers-4",
    "title": "Lecture 03",
    "section": "Integers",
    "text": "Integers\n\n\n\n(x = 2)  # defaults to numeric\ntypeof(x)\n(y = 2L)  # specifies integer\ntypeof(y)\nclass(y)\n\n\n\n[1] 2\n[1] \"double\"\n[1] 2\n[1] \"integer\"\n[1] \"integer\""
  },
  {
    "objectID": "slides/3-data-types.html#integers-5",
    "href": "slides/3-data-types.html#integers-5",
    "title": "Lecture 03",
    "section": "Integers",
    "text": "Integers\n\n\n\n(x = 2)  # defaults to numeric\ntypeof(x)\n(y = 2L)  # specifies integer\ntypeof(y)\nclass(y)\n\n(t = 1L / 5L)\n\n\n\n[1] 2\n[1] \"double\"\n[1] 2\n[1] \"integer\"\n[1] \"integer\"\n[1] 0.2"
  },
  {
    "objectID": "slides/3-data-types.html#integers-6",
    "href": "slides/3-data-types.html#integers-6",
    "title": "Lecture 03",
    "section": "Integers",
    "text": "Integers\n\n\n\n(x = 2)  # defaults to numeric\ntypeof(x)\n(y = 2L)  # specifies integer\ntypeof(y)\nclass(y)\n\n(t = 1L / 5L)\ntypeof(t)\n\n\n\n[1] 2\n[1] \"double\"\n[1] 2\n[1] \"integer\"\n[1] \"integer\"\n[1] 0.2\n[1] \"double\""
  },
  {
    "objectID": "slides/3-data-types.html#integers-7",
    "href": "slides/3-data-types.html#integers-7",
    "title": "Lecture 03",
    "section": "Integers",
    "text": "Integers\n\n\n\n(x = 2)  # defaults to numeric\ntypeof(x)\n(y = 2L)  # specifies integer\ntypeof(y)\nclass(y)\n\n(t = 1L / 5L)\ntypeof(t)\n\n## Casting\n\nas.integer(c(4.1, 5.2, 6.3, 6.4))\n\n\n\n[1] 2\n[1] \"double\"\n[1] 2\n[1] \"integer\"\n[1] \"integer\"\n[1] 0.2\n[1] \"double\"\n[1] 4 5 6 6"
  },
  {
    "objectID": "slides/3-data-types.html#character",
    "href": "slides/3-data-types.html#character",
    "title": "Lecture 03",
    "section": "3. Character",
    "text": "3. Character\n\ncharacter values stores text ranging in size from a single letter to a novel.\nsurrounded by \" (“here”) or ' (‘there’).\nSpecial characters are escaped with \\; see ?Quotes for full details."
  },
  {
    "objectID": "slides/3-data-types.html#characters",
    "href": "slides/3-data-types.html#characters",
    "title": "Lecture 03",
    "section": "Characters",
    "text": "Characters\n\n\n\n(x = \"a\")\n\n\n\n[1] \"a\""
  },
  {
    "objectID": "slides/3-data-types.html#characters-1",
    "href": "slides/3-data-types.html#characters-1",
    "title": "Lecture 03",
    "section": "Characters",
    "text": "Characters\n\n\n\n(x = \"a\")\n(y = \"bc\")\n\n\n\n[1] \"a\"\n[1] \"bc\""
  },
  {
    "objectID": "slides/3-data-types.html#characters-2",
    "href": "slides/3-data-types.html#characters-2",
    "title": "Lecture 03",
    "section": "Characters",
    "text": "Characters\n\n\n\n(x = \"a\")\n(y = \"bc\")\n(z = \"GIS is Great!!!\")\n\n\n\n[1] \"a\"\n[1] \"bc\"\n[1] \"GIS is Great!!!\""
  },
  {
    "objectID": "slides/3-data-types.html#logical",
    "href": "slides/3-data-types.html#logical",
    "title": "Lecture 03",
    "section": "4. Logical",
    "text": "4. Logical\n\nLogical values store boolean values (TRUE and FALSE).\nUsefull for checking conditions and controlling the flow of a program.\nOr, for checking binary conditions (like on,off; open/closed; &gt;100)\nThe idea of the T/F boolean will be one of the most important in this class\nLogicals can be written in full (TRUE or FALSE), or abbreviated (T or F)."
  },
  {
    "objectID": "slides/3-data-types.html#logicals",
    "href": "slides/3-data-types.html#logicals",
    "title": "Lecture 03",
    "section": "Logicals",
    "text": "Logicals\n\n\n\nu = TRUE"
  },
  {
    "objectID": "slides/3-data-types.html#logicals-1",
    "href": "slides/3-data-types.html#logicals-1",
    "title": "Lecture 03",
    "section": "Logicals",
    "text": "Logicals\n\n\n\nu = TRUE\nv = FALSE"
  },
  {
    "objectID": "slides/3-data-types.html#logicals-2",
    "href": "slides/3-data-types.html#logicals-2",
    "title": "Lecture 03",
    "section": "Logicals",
    "text": "Logicals\n\n\n\nu = TRUE\nv = FALSE\ntypeof(u)\n\n\n\n[1] \"logical\""
  },
  {
    "objectID": "slides/3-data-types.html#logicals-3",
    "href": "slides/3-data-types.html#logicals-3",
    "title": "Lecture 03",
    "section": "Logicals",
    "text": "Logicals\n\n\n\nu = TRUE\nv = FALSE\ntypeof(u)\n\n# if u AND v are TRUE\nu & v\n\n\n\n[1] \"logical\"\n[1] FALSE"
  },
  {
    "objectID": "slides/3-data-types.html#logicals-4",
    "href": "slides/3-data-types.html#logicals-4",
    "title": "Lecture 03",
    "section": "Logicals",
    "text": "Logicals\n\n\n\nu = TRUE\nv = FALSE\ntypeof(u)\n\n# if u AND v are TRUE\nu & v\n# if u OR v are TRUE\nu | v\n\n\n\n[1] \"logical\"\n[1] FALSE\n[1] TRUE"
  },
  {
    "objectID": "slides/3-data-types.html#logicals-5",
    "href": "slides/3-data-types.html#logicals-5",
    "title": "Lecture 03",
    "section": "Logicals",
    "text": "Logicals\n\n\n\nu = TRUE\nv = FALSE\ntypeof(u)\n\n# if u AND v are TRUE\nu & v\n# if u OR v are TRUE\nu | v\n# The opposite\n!u\n\n\n\n[1] \"logical\"\n[1] FALSE\n[1] TRUE\n[1] FALSE"
  },
  {
    "objectID": "slides/3-data-types.html#logicals-6",
    "href": "slides/3-data-types.html#logicals-6",
    "title": "Lecture 03",
    "section": "Logicals",
    "text": "Logicals\n\n\n\nu = TRUE\nv = FALSE\ntypeof(u)\n\n# if u AND v are TRUE\nu & v\n# if u OR v are TRUE\nu | v\n# The opposite\n!u\n\n# Equality / conditions\n2 == 6\n\n\n\n[1] \"logical\"\n[1] FALSE\n[1] TRUE\n[1] FALSE\n[1] FALSE"
  },
  {
    "objectID": "slides/3-data-types.html#logicals-7",
    "href": "slides/3-data-types.html#logicals-7",
    "title": "Lecture 03",
    "section": "Logicals",
    "text": "Logicals\n\n\n\nu = TRUE\nv = FALSE\ntypeof(u)\n\n# if u AND v are TRUE\nu & v\n# if u OR v are TRUE\nu | v\n# The opposite\n!u\n\n# Equality / conditions\n2 == 6\n2 != 6\n\n\n\n[1] \"logical\"\n[1] FALSE\n[1] TRUE\n[1] FALSE\n[1] FALSE\n[1] TRUE"
  },
  {
    "objectID": "slides/3-data-types.html#logicals-8",
    "href": "slides/3-data-types.html#logicals-8",
    "title": "Lecture 03",
    "section": "Logicals",
    "text": "Logicals\n\n\n\nu = TRUE\nv = FALSE\ntypeof(u)\n\n# if u AND v are TRUE\nu & v\n# if u OR v are TRUE\nu | v\n# The opposite\n!u\n\n# Equality / conditions\n2 == 6\n2 != 6\n\n\"test\" == \"test\"\n\n\n\n[1] \"logical\"\n[1] FALSE\n[1] TRUE\n[1] FALSE\n[1] FALSE\n[1] TRUE\n[1] TRUE"
  },
  {
    "objectID": "slides/3-data-types.html#logicals-9",
    "href": "slides/3-data-types.html#logicals-9",
    "title": "Lecture 03",
    "section": "Logicals",
    "text": "Logicals\n\n\n\nu = TRUE\nv = FALSE\ntypeof(u)\n\n# if u AND v are TRUE\nu & v\n# if u OR v are TRUE\nu | v\n# The opposite\n!u\n\n# Equality / conditions\n2 == 6\n2 != 6\n\n\"test\" == \"test\"\n\n6 &gt; 2\n\n\n\n[1] \"logical\"\n[1] FALSE\n[1] TRUE\n[1] FALSE\n[1] FALSE\n[1] TRUE\n[1] TRUE\n[1] TRUE"
  },
  {
    "objectID": "slides/3-data-types.html#raw",
    "href": "slides/3-data-types.html#raw",
    "title": "Lecture 03",
    "section": "5. Raw",
    "text": "5. Raw\n\nThe raw type is intended to hold raw bytes.\nUseful to introduce, but will only be used at a conceptual level."
  },
  {
    "objectID": "slides/3-data-types.html#raws",
    "href": "slides/3-data-types.html#raws",
    "title": "Lecture 03",
    "section": "Raws",
    "text": "Raws\n\n\n\n(x &lt;- charToRaw(\"GIS is great!\"))\n\n\n\n [1] 47 49 53 20 69 73 20 67 72 65 61 74 21"
  },
  {
    "objectID": "slides/3-data-types.html#raws-1",
    "href": "slides/3-data-types.html#raws-1",
    "title": "Lecture 03",
    "section": "Raws",
    "text": "Raws\n\n\n\n(x &lt;- charToRaw(\"GIS is great!\"))\ntypeof(x)\n\n\n\n [1] 47 49 53 20 69 73 20 67 72 65 61 74 21\n[1] \"raw\""
  },
  {
    "objectID": "slides/3-data-types.html#raws-2",
    "href": "slides/3-data-types.html#raws-2",
    "title": "Lecture 03",
    "section": "Raws",
    "text": "Raws\n\n\n\n(x &lt;- charToRaw(\"GIS is great!\"))\ntypeof(x)\n\nx[1]\n\n\n\n [1] 47 49 53 20 69 73 20 67 72 65 61 74 21\n[1] \"raw\"\n[1] 47"
  },
  {
    "objectID": "slides/3-data-types.html#raws-3",
    "href": "slides/3-data-types.html#raws-3",
    "title": "Lecture 03",
    "section": "Raws",
    "text": "Raws\n\n\n\n(x &lt;- charToRaw(\"GIS is great!\"))\ntypeof(x)\n\nx[1]\nrawToChar(x[1])\n\n\n\n [1] 47 49 53 20 69 73 20 67 72 65 61 74 21\n[1] \"raw\"\n[1] 47\n[1] \"G\""
  },
  {
    "objectID": "slides/3-data-types.html#raws-4",
    "href": "slides/3-data-types.html#raws-4",
    "title": "Lecture 03",
    "section": "Raws",
    "text": "Raws\n\n\n\n(x &lt;- charToRaw(\"GIS is great!\"))\ntypeof(x)\n\nx[1]\nrawToChar(x[1])\nrawToHex(x[1])\n\n\n\n [1] 47 49 53 20 69 73 20 67 72 65 61 74 21\n[1] \"raw\"\n[1] 47\n[1] \"G\"\n[1] \"47\""
  },
  {
    "objectID": "slides/3-data-types.html#raws-5",
    "href": "slides/3-data-types.html#raws-5",
    "title": "Lecture 03",
    "section": "Raws",
    "text": "Raws\n\n\n\n(x &lt;- charToRaw(\"GIS is great!\"))\ntypeof(x)\n\nx[1]\nrawToChar(x[1])\nrawToHex(x[1])\nrawToChar(x)\n\n\n\n [1] 47 49 53 20 69 73 20 67 72 65 61 74 21\n[1] \"raw\"\n[1] 47\n[1] \"G\"\n[1] \"47\"\n[1] \"GIS is great!\""
  },
  {
    "objectID": "slides/3-data-types.html#raws-6",
    "href": "slides/3-data-types.html#raws-6",
    "title": "Lecture 03",
    "section": "Raws",
    "text": "Raws\n\n\n\n(x &lt;- charToRaw(\"GIS is great!\"))\ntypeof(x)\n\nx[1]\nrawToChar(x[1])\nrawToHex(x[1])\nrawToChar(x)\nrawToBits(x)\n\n\n\n [1] 47 49 53 20 69 73 20 67 72 65 61 74 21\n[1] \"raw\"\n[1] 47\n[1] \"G\"\n[1] \"47\"\n[1] \"GIS is great!\"\n  [1] 01 01 01 00 00 00 01 00 01 00 00 01 00 00 01 00 01 01 00 00 01 00 01 00 00\n [26] 00 00 00 00 01 00 00 01 00 00 01 00 01 01 00 01 01 00 00 01 01 01 00 00 00\n [51] 00 00 00 01 00 00 01 01 01 00 00 01 01 00 00 01 00 00 01 01 01 00 01 00 01\n [76] 00 00 01 01 00 01 00 00 00 00 01 01 00 00 00 01 00 01 01 01 00 01 00 00 00\n[101] 00 01 00 00"
  },
  {
    "objectID": "slides/3-data-types.html#raws-7",
    "href": "slides/3-data-types.html#raws-7",
    "title": "Lecture 03",
    "section": "Raws",
    "text": "Raws\n\n\n\n(x &lt;- charToRaw(\"GIS is great!\"))\ntypeof(x)\n\nx[1]\nrawToChar(x[1])\nrawToHex(x[1])\nrawToChar(x)\nrawToBits(x)\n\nraw\n\n\n\n [1] 47 49 53 20 69 73 20 67 72 65 61 74 21\n[1] \"raw\"\n[1] 47\n[1] \"G\"\n[1] \"47\"\n[1] \"GIS is great!\"\n  [1] 01 01 01 00 00 00 01 00 01 00 00 01 00 00 01 00 01 01 00 00 01 00 01 00 00\n [26] 00 00 00 00 01 00 00 01 00 00 01 00 01 01 00 01 01 00 00 01 01 01 00 00 00\n [51] 00 00 00 01 00 00 01 01 01 00 00 01 01 00 00 01 00 00 01 01 01 00 01 00 01\n [76] 00 00 01 01 00 01 00 00 00 00 01 01 00 00 00 01 00 01 01 01 00 01 00 00 00\n[101] 00 01 00 00\nfunction (length = 0L) \n.Internal(vector(\"raw\", length))\n&lt;bytecode: 0x1258be2e8&gt;\n&lt;environment: namespace:base&gt;"
  },
  {
    "objectID": "slides/3-data-types.html#bonus-time",
    "href": "slides/3-data-types.html#bonus-time",
    "title": "Lecture 03",
    "section": "Bonus: Time",
    "text": "Bonus: Time\nRepresenting time is a somewhat complex problem. There are different calendars, hours, days, months, and leap years to consider. As a basic introduction, here is simple way to create date values."
  },
  {
    "objectID": "slides/3-data-types.html#times",
    "href": "slides/3-data-types.html#times",
    "title": "Lecture 03",
    "section": "Times",
    "text": "Times\n\n\n\n(start &lt;- as.Date('2020-08-03'))\n\n\n\n[1] \"2020-08-03\""
  },
  {
    "objectID": "slides/3-data-types.html#times-1",
    "href": "slides/3-data-types.html#times-1",
    "title": "Lecture 03",
    "section": "Times",
    "text": "Times\n\n\n\n(start &lt;- as.Date('2020-08-03'))\n(end   &lt;- as.Date('2020-09-11'))\n\n\n\n[1] \"2020-08-03\"\n[1] \"2020-09-11\""
  },
  {
    "objectID": "slides/3-data-types.html#times-2",
    "href": "slides/3-data-types.html#times-2",
    "title": "Lecture 03",
    "section": "Times",
    "text": "Times\n\n\n\n(start &lt;- as.Date('2020-08-03'))\n(end   &lt;- as.Date('2020-09-11'))\ntypeof(start)\n\n\n\n[1] \"2020-08-03\"\n[1] \"2020-09-11\"\n[1] \"double\""
  },
  {
    "objectID": "slides/3-data-types.html#times-3",
    "href": "slides/3-data-types.html#times-3",
    "title": "Lecture 03",
    "section": "Times",
    "text": "Times\n\n\n\n(start &lt;- as.Date('2020-08-03'))\n(end   &lt;- as.Date('2020-09-11'))\ntypeof(start)\n\nend - start\n\n\n\n[1] \"2020-08-03\"\n[1] \"2020-09-11\"\n[1] \"double\"\nTime difference of 39 days"
  },
  {
    "objectID": "slides/3-data-types.html#times-4",
    "href": "slides/3-data-types.html#times-4",
    "title": "Lecture 03",
    "section": "Times",
    "text": "Times\n\n\n\n(start &lt;- as.Date('2020-08-03'))\n(end   &lt;- as.Date('2020-09-11'))\ntypeof(start)\n\nend - start\n\nformat(start, \"%m\")\n\n\n\n[1] \"2020-08-03\"\n[1] \"2020-09-11\"\n[1] \"double\"\nTime difference of 39 days\n[1] \"08\""
  },
  {
    "objectID": "slides/3-data-types.html#times-5",
    "href": "slides/3-data-types.html#times-5",
    "title": "Lecture 03",
    "section": "Times",
    "text": "Times\n\n\n\n(start &lt;- as.Date('2020-08-03'))\n(end   &lt;- as.Date('2020-09-11'))\ntypeof(start)\n\nend - start\n\nformat(start, \"%m\")\nformat(start, \"%y\")\n\n\n\n[1] \"2020-08-03\"\n[1] \"2020-09-11\"\n[1] \"double\"\nTime difference of 39 days\n[1] \"08\"\n[1] \"20\""
  },
  {
    "objectID": "slides/3-data-types.html#times-6",
    "href": "slides/3-data-types.html#times-6",
    "title": "Lecture 03",
    "section": "Times",
    "text": "Times\n\n\n\n(start &lt;- as.Date('2020-08-03'))\n(end   &lt;- as.Date('2020-09-11'))\ntypeof(start)\n\nend - start\n\nformat(start, \"%m\")\nformat(start, \"%y\")\nformat(start, \"%Y\")\n\n\n\n[1] \"2020-08-03\"\n[1] \"2020-09-11\"\n[1] \"double\"\nTime difference of 39 days\n[1] \"08\"\n[1] \"20\"\n[1] \"2020\"\n\n\nAnd there are more advanced classes as well that capture date and time. We will get into these latter in class.\n\nas.POSIXlt(start)\n[1] \"2020-08-03 UTC\"\nas.POSIXct(start)\n[1] \"2020-08-03 UTC\""
  },
  {
    "objectID": "slides/3-data-types.html#r-project",
    "href": "slides/3-data-types.html#r-project",
    "title": "Lecture 03",
    "section": "R Project",
    "text": "R Project\n\nAn R project is a working directory designated with a .RProj file.\n\n\n.\n└── github\n└── my_project\n└── my_project.Rproj\n└── .gitignore\n\n\nWhen you open a project:\n\nIn RStudio: File –&gt; Open Project\n\nOutside RStudio: double–clicking on the .Rproj file\n\nthe working directory is automatically be set to the directory where .RProj file is located!\n\nAllows you to work with relative rather then absolute paths!\nConsider creating a new R Project whenever you are starting a new project.\nThis will enforce a self contained project with associated data, scripts, and output"
  },
  {
    "objectID": "slides/3-data-types.html#building-the-rest-of-the-project",
    "href": "slides/3-data-types.html#building-the-rest-of-the-project",
    "title": "Lecture 03",
    "section": "Building the rest of the Project…",
    "text": "Building the rest of the Project…"
  },
  {
    "objectID": "slides/3-data-types.html#readme.md",
    "href": "slides/3-data-types.html#readme.md",
    "title": "Lecture 03",
    "section": "README.md",
    "text": "README.md\nREADME files are the “users manual” for the project\n\nWhat is the name\npurpose\ninstallation directions\nrules of use\n\nWe use the md extension (markdown) because GitHub autorenders pure Markdown\nFor us, a title, 1-2 sentence description and data attribution is plenty.\n\ntouch README.md\n\n\n.\n└── github\n└── my_project\n└── my_project.Rproj\n└── .gitignore\n└── README.md"
  },
  {
    "objectID": "slides/3-data-types.html#r-or-src",
    "href": "slides/3-data-types.html#r-or-src",
    "title": "Lecture 03",
    "section": "R or (src)",
    "text": "R or (src)\n\nA directory call R (or src) is used to hold all scripts used in the analysis.\nThe can be data processing, analysis, or figure generation sripcts\n\n\nmkdir R # make a R directory\ncd R # Enter the R directory\ntouch some-code.R # make a file\ntouch utils.R # make a file\ncd.. # move back up to my_project directory\n\n\n.\n├── github\n├── my_project\n├── my_project.Rproj\n├── .gitignore\n├── README.md\n└── R\n    └── some-code.R\n    └── utils.R"
  },
  {
    "objectID": "slides/3-data-types.html#imgs-or-img-or-figs-or-output",
    "href": "slides/3-data-types.html#imgs-or-img-or-figs-or-output",
    "title": "Lecture 03",
    "section": "imgs (or img or figs or output)",
    "text": "imgs (or img or figs or output)\nThis folder is for things that are saved as a result of your scripts - Plot images - Maps - Ect\n\nmkdir imgs # make a imgs directory\n\n\n.\n├── github\n├── my_project\n├── my_project.Rproj\n├── .gitignore\n├── README.md\n├── R\n│   └── some-code.R\n|   └── utils.R\n└── img\n     └── cool-img.png"
  },
  {
    "objectID": "slides/3-data-types.html#docs-only-docs",
    "href": "slides/3-data-types.html#docs-only-docs",
    "title": "Lecture 03",
    "section": "docs (only docs)",
    "text": "docs (only docs)\n\nthe docs folder should hold your Qmd files and there rendered output\nGithub Pages can be deployed from the docs folder making this a good practice if you want to share information over the web in a free secure way\n\n\nmkdir docs # make a docs directory\ncd docs # Enter the docs directory\ntouch index.Qmd # make a file\ncd .. # move back up to my_project directory\n\n\n.\n├── github\n├── my_project\n├── my_project.Rproj\n├── .gitignore\n├── README.md\n├── R\n│   └── some-code.R\n|   └── utils.R\n├── img\n|   └── cool-img.png\n├── docs\n├── index.Rmd\n└── index.html"
  },
  {
    "objectID": "slides/3-data-types.html#data",
    "href": "slides/3-data-types.html#data",
    "title": "Lecture 03",
    "section": "data",
    "text": "data\n\nthe data folder is an storage archive for raw data\nIt’s crucial to make a distinction between source/raw data and generated data:\nTreat source/raw data as read-only Treat generated data as disposable.\nSome might separate raw and generated data into separate sub directories. I prefer to segment them through the naming\n\n\nmkdir data # make a data directory\n\n\n.\n├── github\n├── my_project\n├── my_project.Rproj\n├── .gitignore\n├── README.md\n├── R\n│   └── some-code.R\n|   └── utils.R\n├── img\n|   └── some-code.R\n├── docs\n|   └── index.Rmd\n|   └── index.html\n└── data\n    └── data.csv"
  },
  {
    "objectID": "slides/3-data-types.html#rules",
    "href": "slides/3-data-types.html#rules",
    "title": "Lecture 03",
    "section": "Rules…",
    "text": "Rules…\n\nTreat data as read only\nTreat generated output as disposable\nOther then that, structure should match the project goals and is flexable!"
  },
  {
    "objectID": "slides/3-data-types.html#the-goal-for-workflows",
    "href": "slides/3-data-types.html#the-goal-for-workflows",
    "title": "Lecture 03",
    "section": "The goal for workflows:",
    "text": "The goal for workflows:\n\n\n\n\n\n\nTip\n\n\nWe will do everything in well-annotated, organized scripts that contain streamlined and easy-to-follow records of our entire analyses from raw data through final reports, with unbreakable file paths and with a complete history of changes made.\n\n\n\n\nWell-annotated: Through documentation and comments\nOrganized: Directory Strucutre\nRaw Data: Keep raw data raw!\nFinal Reports: Rmarkdown files\nUnbreakable Paths: .Rproj to the rescue\nComplete History: Version control with git and GitHub"
  },
  {
    "objectID": "slides/3-data-types.html#next-time",
    "href": "slides/3-data-types.html#next-time",
    "title": "Lecture 03",
    "section": "Next Time:",
    "text": "Next Time:\n\n\n\n\n\n\n\nDaily Assignment: Your First Project\n\n\n\n\n\n\n\n\n\nNext Topic: Your Tools: Interactive Walk Though\n\n\n\n\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "slides/5-data-structures.html#cran",
    "href": "slides/5-data-structures.html#cran",
    "title": "Lecture 05",
    "section": "CRAN",
    "text": "CRAN\n\nThe “Comprehensive R Archive Network” (CRAN) is a collection of sites which carry identical material, consisting of the R distribution(s) and contributed packages\n\n\n\nCRAN enforces a Repository Policy that ensures contributed code is safe and works (meaning it works not necessarily that its good :))\nThis huge variety of packages is one of the reasons that R is so successful: the chances are that someone has already solved a problem that you’re working on, and you can benefit from their work by downloading their package."
  },
  {
    "objectID": "slides/5-data-structures.html#you-already-know-how-to-use-packages",
    "href": "slides/5-data-structures.html#you-already-know-how-to-use-packages",
    "title": "Lecture 05",
    "section": "You already know how to use packages:",
    "text": "You already know how to use packages:\n\nYou install them from CRAN with install.packages(\"XXX\").\nYou install them from Github with remotes::install_github(\"USERNAME/REPO\").\nYou use them in R with library(\"XXX\").\nYou get help on them with package ?XXX"
  },
  {
    "objectID": "slides/5-data-structures.html#install-vs.-attach",
    "href": "slides/5-data-structures.html#install-vs.-attach",
    "title": "Lecture 05",
    "section": "Install vs. Attach",
    "text": "Install vs. Attach"
  },
  {
    "objectID": "slides/5-data-structures.html#what-is-a-function",
    "href": "slides/5-data-structures.html#what-is-a-function",
    "title": "Lecture 05",
    "section": "What is a function:",
    "text": "What is a function:\n\nA function is a set of statements (directions) organized together to perform a specific task. R has a large number of in-built functions and the user can create their own functions.\n\n\nlibrary(tidyverse)\nlsf.str(\"package:dplyr\")\n#&gt; %&gt;% : function (lhs, rhs)  \n#&gt; across : function (.cols, .fns, ..., .names = NULL, .unpack = FALSE)  \n#&gt; add_count : function (x, ..., wt = NULL, sort = FALSE, name = NULL, .drop = deprecated())  \n#&gt; add_count_ : function (x, vars, wt = NULL, sort = FALSE)  \n#&gt; add_row : function (.data, ..., .before = NULL, .after = NULL)  \n#&gt; add_rownames : function (df, var = \"rowname\")  \n#&gt; add_tally : function (x, wt = NULL, sort = FALSE, name = NULL)  \n#&gt; add_tally_ : function (x, wt, sort = FALSE)  \n#&gt; all_equal : function (target, current, ignore_col_order = TRUE, ignore_row_order = TRUE, \n#&gt;     convert = FALSE, ...)  \n#&gt; all_of : function (x)  \n#&gt; all_vars : function (expr)  \n#&gt; anti_join : function (x, y, by = NULL, copy = FALSE, ...)  \n#&gt; any_of : function (x, ..., vars = NULL)  \n#&gt; any_vars : function (expr)  \n#&gt; arrange : function (.data, ..., .by_group = FALSE)  \n#&gt; arrange_ : function (.data, ..., .dots = list())  \n#&gt; arrange_all : function (.tbl, .funs = list(), ..., .by_group = FALSE, .locale = NULL)  \n#&gt; arrange_at : function (.tbl, .vars, .funs = list(), ..., .by_group = FALSE, .locale = NULL)  \n#&gt; arrange_if : function (.tbl, .predicate, .funs = list(), ..., .by_group = FALSE, .locale = NULL)  \n#&gt; as_data_frame : function (x, ...)  \n#&gt; as_label : function (x)  \n#&gt; as_tibble : function (x, ..., .rows = NULL, .name_repair = c(\"check_unique\", \"unique\", \n#&gt;     \"universal\", \"minimal\"), rownames = pkgconfig::get_config(\"tibble::rownames\", \n#&gt;     NULL))  \n#&gt; as.tbl : function (x, ...)  \n#&gt; auto_copy : function (x, y, copy = FALSE, ...)  \n#&gt; bench_tbls : function (tbls, op, ..., times = 10)  \n#&gt; between : function (x, left, right)  \n#&gt; bind_cols : function (..., .name_repair = c(\"unique\", \"universal\", \"check_unique\", \n#&gt;     \"minimal\"))  \n#&gt; bind_rows : function (..., .id = NULL)  \n#&gt; c_across : function (cols)  \n#&gt; case_match : function (.x, ..., .default = NULL, .ptype = NULL)  \n#&gt; case_when : function (..., .default = NULL, .ptype = NULL, .size = NULL)  \n#&gt; changes : function (x, y)  \n#&gt; check_dbplyr : function ()  \n#&gt; coalesce : function (..., .ptype = NULL, .size = NULL)  \n#&gt; collapse : function (x, ...)  \n#&gt; collect : function (x, ...)  \n#&gt; combine : function (...)  \n#&gt; common_by : function (by = NULL, x, y)  \n#&gt; compare_tbls : function (tbls, op, ref = NULL, compare = equal_data_frame, ...)  \n#&gt; compare_tbls2 : function (tbls_x, tbls_y, op, ref = NULL, compare = equal_data_frame, ...)  \n#&gt; compute : function (x, ...)  \n#&gt; consecutive_id : function (...)  \n#&gt; contains : function (match, ignore.case = TRUE, vars = NULL)  \n#&gt; copy_to : function (dest, df, name = deparse(substitute(df)), overwrite = FALSE, \n#&gt;     ...)  \n#&gt; count : function (x, ..., wt = NULL, sort = FALSE, name = NULL)  \n#&gt; count_ : function (x, vars, wt = NULL, sort = FALSE, .drop = group_by_drop_default(x))  \n#&gt; cross_join : function (x, y, ..., copy = FALSE, suffix = c(\".x\", \".y\"))  \n#&gt; cumall : function (x)  \n#&gt; cumany : function (x)  \n#&gt; cume_dist : function (x)  \n#&gt; cummean : function (x)  \n#&gt; cur_column : function ()  \n#&gt; cur_data : function ()  \n#&gt; cur_data_all : function ()  \n#&gt; cur_group : function ()  \n#&gt; cur_group_id : function ()  \n#&gt; cur_group_rows : function ()  \n#&gt; current_vars : function (...)  \n#&gt; data_frame : function (...)  \n#&gt; db_analyze : function (con, table, ...)  \n#&gt; db_begin : function (con, ...)  \n#&gt; db_commit : function (con, ...)  \n#&gt; db_create_index : function (con, table, columns, name = NULL, unique = FALSE, ...)  \n#&gt; db_create_indexes : function (con, table, indexes = NULL, unique = FALSE, ...)  \n#&gt; db_create_table : function (con, table, types, temporary = FALSE, ...)  \n#&gt; db_data_type : function (con, fields)  \n#&gt; db_desc : function (x)  \n#&gt; db_drop_table : function (con, table, force = FALSE, ...)  \n#&gt; db_explain : function (con, sql, ...)  \n#&gt; db_has_table : function (con, table)  \n#&gt; db_insert_into : function (con, table, values, ...)  \n#&gt; db_list_tables : function (con)  \n#&gt; db_query_fields : function (con, sql, ...)  \n#&gt; db_query_rows : function (con, sql, ...)  \n#&gt; db_rollback : function (con, ...)  \n#&gt; db_save_query : function (con, sql, name, temporary = TRUE, ...)  \n#&gt; db_write_table : function (con, table, types, values, temporary = FALSE, ...)  \n#&gt; dense_rank : function (x)  \n#&gt; desc : function (x)  \n#&gt; dim_desc : function (x)  \n#&gt; distinct : function (.data, ..., .keep_all = FALSE)  \n#&gt; distinct_ : function (.data, ..., .dots, .keep_all = FALSE)  \n#&gt; distinct_all : function (.tbl, .funs = list(), ..., .keep_all = FALSE)  \n#&gt; distinct_at : function (.tbl, .vars, .funs = list(), ..., .keep_all = FALSE)  \n#&gt; distinct_if : function (.tbl, .predicate, .funs = list(), ..., .keep_all = FALSE)  \n#&gt; distinct_prepare : function (.data, vars, group_vars = character(), .keep_all = FALSE, caller_env = caller_env(2), \n#&gt;     error_call = caller_env())  \n#&gt; do : function (.data, ...)  \n#&gt; do_ : function (.data, ..., .dots = list())  \n#&gt; dplyr_col_modify : function (data, cols)  \n#&gt; dplyr_reconstruct : function (data, template)  \n#&gt; dplyr_row_slice : function (data, i, ...)  \n#&gt; ends_with : function (match, ignore.case = TRUE, vars = NULL)  \n#&gt; enexpr : function (arg)  \n#&gt; enexprs : function (..., .named = FALSE, .ignore_empty = c(\"trailing\", \"none\", \"all\"), \n#&gt;     .ignore_null = c(\"none\", \"all\"), .unquote_names = TRUE, .homonyms = c(\"keep\", \n#&gt;         \"first\", \"last\", \"error\"), .check_assign = FALSE)  \n#&gt; enquo : function (arg)  \n#&gt; enquos : function (..., .named = FALSE, .ignore_empty = c(\"trailing\", \"none\", \"all\"), \n#&gt;     .ignore_null = c(\"none\", \"all\"), .unquote_names = TRUE, .homonyms = c(\"keep\", \n#&gt;         \"first\", \"last\", \"error\"), .check_assign = FALSE)  \n#&gt; ensym : function (arg)  \n#&gt; ensyms : function (..., .named = FALSE, .ignore_empty = c(\"trailing\", \"none\", \"all\"), \n#&gt;     .ignore_null = c(\"none\", \"all\"), .unquote_names = TRUE, .homonyms = c(\"keep\", \n#&gt;         \"first\", \"last\", \"error\"), .check_assign = FALSE)  \n#&gt; eval_tbls : function (tbls, op)  \n#&gt; eval_tbls2 : function (tbls_x, tbls_y, op)  \n#&gt; everything : function (vars = NULL)  \n#&gt; explain : function (x, ...)  \n#&gt; expr : function (expr)  \n#&gt; failwith : function (default = NULL, f, quiet = FALSE)  \n#&gt; filter : function (.data, ..., .by = NULL, .preserve = FALSE)  \n#&gt; filter_ : function (.data, ..., .dots = list())  \n#&gt; filter_all : function (.tbl, .vars_predicate, .preserve = FALSE)  \n#&gt; filter_at : function (.tbl, .vars, .vars_predicate, .preserve = FALSE)  \n#&gt; filter_if : function (.tbl, .predicate, .vars_predicate, .preserve = FALSE)  \n#&gt; first : function (x, order_by = NULL, default = NULL, na_rm = FALSE)  \n#&gt; full_join : function (x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ..., keep = NULL)  \n#&gt; funs : function (..., .args = list())  \n#&gt; funs_ : function (dots, args = list(), env = base_env())  \n#&gt; glimpse : function (x, width = NULL, ...)  \n#&gt; group_by : function (.data, ..., .add = FALSE, .drop = group_by_drop_default(.data))  \n#&gt; group_by_ : function (.data, ..., .dots = list(), add = FALSE)  \n#&gt; group_by_all : function (.tbl, .funs = list(), ..., .add = FALSE, .drop = group_by_drop_default(.tbl))  \n#&gt; group_by_at : function (.tbl, .vars, .funs = list(), ..., .add = FALSE, .drop = group_by_drop_default(.tbl))  \n#&gt; group_by_drop_default : function (.tbl)  \n#&gt; group_by_if : function (.tbl, .predicate, .funs = list(), ..., .add = FALSE, .drop = group_by_drop_default(.tbl))  \n#&gt; group_by_prepare : function (.data, ..., .add = FALSE, .dots = deprecated(), add = deprecated(), \n#&gt;     error_call = caller_env())  \n#&gt; group_cols : function (vars = NULL, data = NULL)  \n#&gt; group_data : function (.data)  \n#&gt; group_indices : function (.data, ...)  \n#&gt; group_indices_ : function (.data, ..., .dots = list())  \n#&gt; group_keys : function (.tbl, ...)  \n#&gt; group_map : function (.data, .f, ..., .keep = FALSE)  \n#&gt; group_modify : function (.data, .f, ..., .keep = FALSE)  \n#&gt; group_nest : function (.tbl, ..., .key = \"data\", keep = FALSE)  \n#&gt; group_rows : function (.data)  \n#&gt; group_size : function (x)  \n#&gt; group_split : function (.tbl, ..., .keep = TRUE)  \n#&gt; group_trim : function (.tbl, .drop = group_by_drop_default(.tbl))  \n#&gt; group_vars : function (x)  \n#&gt; group_walk : function (.data, .f, ..., .keep = FALSE)  \n#&gt; grouped_df : function (data, vars, drop = group_by_drop_default(data))  \n#&gt; groups : function (x)  \n#&gt; id : function (.variables, drop = FALSE)  \n#&gt; ident : function (...)  \n#&gt; if_all : function (.cols, .fns, ..., .names = NULL)  \n#&gt; if_any : function (.cols, .fns, ..., .names = NULL)  \n#&gt; if_else : function (condition, true, false, missing = NULL, ..., ptype = NULL, size = NULL)  \n#&gt; inner_join : function (x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ..., keep = NULL)  \n#&gt; intersect : function (x, y, ...)  \n#&gt; is_grouped_df : function (x)  \n#&gt; is.grouped_df : function (x)  \n#&gt; is.src : function (x)  \n#&gt; is.tbl : function (x)  \n#&gt; join_by : function (...)  \n#&gt; lag : function (x, n = 1L, default = NULL, order_by = NULL, ...)  \n#&gt; last : function (x, order_by = NULL, default = NULL, na_rm = FALSE)  \n#&gt; last_col : function (offset = 0L, vars = NULL)  \n#&gt; last_dplyr_warnings : function (n = 5)  \n#&gt; lead : function (x, n = 1L, default = NULL, order_by = NULL, ...)  \n#&gt; left_join : function (x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ..., keep = NULL)  \n#&gt; location : function (df)  \n#&gt; lst : function (...)  \n#&gt; make_tbl : function (subclass, ...)  \n#&gt; matches : function (match, ignore.case = TRUE, perl = FALSE, vars = NULL)  \n#&gt; min_rank : function (x)  \n#&gt; mutate : function (.data, ...)  \n#&gt; mutate_ : function (.data, ..., .dots = list())  \n#&gt; mutate_all : function (.tbl, .funs, ...)  \n#&gt; mutate_at : function (.tbl, .vars, .funs, ..., .cols = NULL)  \n#&gt; mutate_each : function (tbl, funs, ...)  \n#&gt; mutate_each_ : function (tbl, funs, vars)  \n#&gt; mutate_if : function (.tbl, .predicate, .funs, ...)  \n#&gt; n : function ()  \n#&gt; n_distinct : function (..., na.rm = FALSE)  \n#&gt; n_groups : function (x)  \n#&gt; na_if : function (x, y)  \n#&gt; near : function (x, y, tol = .Machine$double.eps^0.5)  \n#&gt; nest_by : function (.data, ..., .key = \"data\", .keep = FALSE)  \n#&gt; nest_join : function (x, y, by = NULL, copy = FALSE, keep = NULL, name = NULL, ...)  \n#&gt; new_grouped_df : function (x, groups, ..., class = character())  \n#&gt; new_rowwise_df : function (data, group_data = NULL, ..., class = character())  \n#&gt; nth : function (x, n, order_by = NULL, default = NULL, na_rm = FALSE)  \n#&gt; ntile : function (x = row_number(), n)  \n#&gt; num_range : function (prefix, range, suffix = \"\", width = NULL, vars = NULL)  \n#&gt; one_of : function (..., .vars = NULL)  \n#&gt; order_by : function (order_by, call)  \n#&gt; percent_rank : function (x)  \n#&gt; pick : function (...)  \n#&gt; progress_estimated : function (n, min_time = 0)  \n#&gt; pull : function (.data, var = -1, name = NULL, ...)  \n#&gt; quo : function (expr)  \n#&gt; quo_name : function (quo)  \n#&gt; quos : function (..., .named = FALSE, .ignore_empty = c(\"trailing\", \"none\", \"all\"), \n#&gt;     .unquote_names = TRUE)  \n#&gt; recode : function (.x, ..., .default = NULL, .missing = NULL)  \n#&gt; recode_factor : function (.x, ..., .default = NULL, .missing = NULL, .ordered = FALSE)  \n#&gt; reframe : function (.data, ..., .by = NULL)  \n#&gt; relocate : function (.data, ..., .before = NULL, .after = NULL)  \n#&gt; rename : function (.data, ...)  \n#&gt; rename_ : function (.data, ..., .dots = list())  \n#&gt; rename_all : function (.tbl, .funs = list(), ...)  \n#&gt; rename_at : function (.tbl, .vars, .funs = list(), ...)  \n#&gt; rename_if : function (.tbl, .predicate, .funs = list(), ...)  \n#&gt; rename_vars : function (vars = chr(), ..., strict = TRUE)  \n#&gt; rename_vars_ : function (vars, args)  \n#&gt; rename_with : function (.data, .fn, .cols = everything(), ...)  \n#&gt; right_join : function (x, y, by = NULL, copy = FALSE, suffix = c(\".x\", \".y\"), ..., keep = NULL)  \n#&gt; row_number : function (x)  \n#&gt; rows_append : function (x, y, ..., copy = FALSE, in_place = FALSE)  \n#&gt; rows_delete : function (x, y, by = NULL, ..., unmatched = c(\"error\", \"ignore\"), copy = FALSE, \n#&gt;     in_place = FALSE)  \n#&gt; rows_insert : function (x, y, by = NULL, ..., conflict = c(\"error\", \"ignore\"), copy = FALSE, \n#&gt;     in_place = FALSE)  \n#&gt; rows_patch : function (x, y, by = NULL, ..., unmatched = c(\"error\", \"ignore\"), copy = FALSE, \n#&gt;     in_place = FALSE)  \n#&gt; rows_update : function (x, y, by = NULL, ..., unmatched = c(\"error\", \"ignore\"), copy = FALSE, \n#&gt;     in_place = FALSE)  \n#&gt; rows_upsert : function (x, y, by = NULL, ..., copy = FALSE, in_place = FALSE)  \n#&gt; rowwise : function (data, ...)  \n#&gt; same_src : function (x, y)  \n#&gt; sample_frac : function (tbl, size = 1, replace = FALSE, weight = NULL, .env = NULL, ...)  \n#&gt; sample_n : function (tbl, size, replace = FALSE, weight = NULL, .env = NULL, ...)  \n#&gt; select : function (.data, ...)  \n#&gt; select_ : function (.data, ..., .dots = list())  \n#&gt; select_all : function (.tbl, .funs = list(), ...)  \n#&gt; select_at : function (.tbl, .vars, .funs = list(), ...)  \n#&gt; select_if : function (.tbl, .predicate, .funs = list(), ...)  \n#&gt; select_var : function (vars, var = -1)  \n#&gt; select_vars : function (vars = chr(), ..., include = chr(), exclude = chr())  \n#&gt; select_vars_ : function (vars, args, include = chr(), exclude = chr())  \n#&gt; semi_join : function (x, y, by = NULL, copy = FALSE, ...)  \n#&gt; setdiff : function (x, y, ...)  \n#&gt; setequal : function (x, y, ...)  \n#&gt; show_query : function (x, ...)  \n#&gt; slice : function (.data, ..., .by = NULL, .preserve = FALSE)  \n#&gt; slice_ : function (.data, ..., .dots = list())  \n#&gt; slice_head : function (.data, ..., n, prop, by = NULL)  \n#&gt; slice_max : function (.data, order_by, ..., n, prop, by = NULL, with_ties = TRUE, na_rm = FALSE)  \n#&gt; slice_min : function (.data, order_by, ..., n, prop, by = NULL, with_ties = TRUE, na_rm = FALSE)  \n#&gt; slice_sample : function (.data, ..., n, prop, by = NULL, weight_by = NULL, replace = FALSE)  \n#&gt; slice_tail : function (.data, ..., n, prop, by = NULL)  \n#&gt; sql : function (...)  \n#&gt; sql_escape_ident : function (con, x)  \n#&gt; sql_escape_string : function (con, x)  \n#&gt; sql_join : function (con, x, y, vars, type = \"inner\", by = NULL, ...)  \n#&gt; sql_select : function (con, select, from, where = NULL, group_by = NULL, having = NULL, \n#&gt;     order_by = NULL, limit = NULL, distinct = FALSE, ...)  \n#&gt; sql_semi_join : function (con, x, y, anti = FALSE, by = NULL, ...)  \n#&gt; sql_set_op : function (con, x, y, method)  \n#&gt; sql_subquery : function (con, from, name = random_table_name(), ...)  \n#&gt; sql_translate_env : function (con)  \n#&gt; src : function (subclass, ...)  \n#&gt; src_df : function (pkg = NULL, env = NULL)  \n#&gt; src_local : function (tbl, pkg = NULL, env = NULL)  \n#&gt; src_mysql : function (dbname, host = NULL, port = 0L, username = \"root\", password = \"\", \n#&gt;     ...)  \n#&gt; src_postgres : function (dbname = NULL, host = NULL, port = NULL, user = NULL, password = NULL, \n#&gt;     ...)  \n#&gt; src_sqlite : function (path, create = FALSE)  \n#&gt; src_tbls : function (x, ...)  \n#&gt; starts_with : function (match, ignore.case = TRUE, vars = NULL)  \n#&gt; summarise : function (.data, ..., .by = NULL, .groups = NULL)  \n#&gt; summarise_ : function (.data, ..., .dots = list())  \n#&gt; summarise_all : function (.tbl, .funs, ...)  \n#&gt; summarise_at : function (.tbl, .vars, .funs, ..., .cols = NULL)  \n#&gt; summarise_each : function (tbl, funs, ...)  \n#&gt; summarise_each_ : function (tbl, funs, vars)  \n#&gt; summarise_if : function (.tbl, .predicate, .funs, ...)  \n#&gt; summarize : function (.data, ..., .by = NULL, .groups = NULL)  \n#&gt; summarize_ : function (.data, ..., .dots = list())  \n#&gt; summarize_all : function (.tbl, .funs, ...)  \n#&gt; summarize_at : function (.tbl, .vars, .funs, ..., .cols = NULL)  \n#&gt; summarize_each : function (tbl, funs, ...)  \n#&gt; summarize_each_ : function (tbl, funs, vars)  \n#&gt; summarize_if : function (.tbl, .predicate, .funs, ...)  \n#&gt; sym : function (x)  \n#&gt; symdiff : function (x, y, ...)  \n#&gt; syms : function (x)  \n#&gt; tally : function (x, wt = NULL, sort = FALSE, name = NULL)  \n#&gt; tally_ : function (x, wt, sort = FALSE)  \n#&gt; tbl : function (src, ...)  \n#&gt; tbl_df : function (data)  \n#&gt; tbl_nongroup_vars : function (x)  \n#&gt; tbl_ptype : function (.data)  \n#&gt; tbl_vars : function (x)  \n#&gt; tibble : function (..., .rows = NULL, .name_repair = c(\"check_unique\", \"unique\", \n#&gt;     \"universal\", \"minimal\"))  \n#&gt; top_frac : function (x, n, wt)  \n#&gt; top_n : function (x, n, wt)  \n#&gt; transmute : function (.data, ...)  \n#&gt; transmute_ : function (.data, ..., .dots = list())  \n#&gt; transmute_all : function (.tbl, .funs, ...)  \n#&gt; transmute_at : function (.tbl, .vars, .funs, ..., .cols = NULL)  \n#&gt; transmute_if : function (.tbl, .predicate, .funs, ...)  \n#&gt; tribble : function (...)  \n#&gt; type_sum : function (x)  \n#&gt; ungroup : function (x, ...)  \n#&gt; union : function (x, y, ...)  \n#&gt; union_all : function (x, y, ...)  \n#&gt; validate_grouped_df : function (x, check_bounds = FALSE)  \n#&gt; validate_rowwise_df : function (x)  \n#&gt; vars : function (...)  \n#&gt; where : function (fn)  \n#&gt; with_groups : function (.data, .groups, .f, ...)  \n#&gt; with_order : function (order_by, fun, x, ...)  \n#&gt; wrap_dbplyr_obj : function (obj_name)"
  },
  {
    "objectID": "slides/5-data-structures.html#signature",
    "href": "slides/5-data-structures.html#signature",
    "title": "Lecture 05",
    "section": "Signature",
    "text": "Signature\n\nWhat is the name, what are the inputs.\n\nadd_count_ : function (x, vars, wt = NULL, sort = FALSE)"
  },
  {
    "objectID": "slides/5-data-structures.html#help",
    "href": "slides/5-data-structures.html#help",
    "title": "Lecture 05",
    "section": "Help",
    "text": "Help\n\nWe can get help about a function by placing a ? in front of of the function\n\n?dplyr::select"
  },
  {
    "objectID": "slides/5-data-structures.html#access",
    "href": "slides/5-data-structures.html#access",
    "title": "Lecture 05",
    "section": "Access",
    "text": "Access\nWe can access the functions that come with a package in 2 ways:\n\nBy attaching the package to the working session (library)\nBy referencing the package directly (dplyr::select())"
  },
  {
    "objectID": "slides/5-data-structures.html#vectors",
    "href": "slides/5-data-structures.html#vectors",
    "title": "Lecture 05",
    "section": "Vectors",
    "text": "Vectors\n\nVectors come in two types: atomic and lists\nFor atomic vectors, all elements must have the same type;\nFor lists, elements can have different types.\nNULL serves as a generic zero length vector.\nThis diagram - taken from here - illustrates the basic relationships:"
  },
  {
    "objectID": "slides/5-data-structures.html#atomic-vectors",
    "href": "slides/5-data-structures.html#atomic-vectors",
    "title": "Lecture 05",
    "section": "Atomic Vectors",
    "text": "Atomic Vectors\n\nA vector containing one type of data is called an atom\n\nAtoms can created using the c() (combine) function.\nThe length can be checked with length()\n\n\n\n\nThere are four primary types of atomic vectors: logical, integer, double, and character (which contains strings).\nCollectively integer and double vectors are known as numeric vectors.\nComplex and raw atomic vectors are rare."
  },
  {
    "objectID": "slides/5-data-structures.html#atoms",
    "href": "slides/5-data-structures.html#atoms",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\n# Numeric\n(dbl_vec = c(1.9,2,3.5))\n\n\n\n#&gt; [1] 1.9 2.0 3.5"
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-1",
    "href": "slides/5-data-structures.html#atoms-1",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\n# Numeric\n(dbl_vec = c(1.9,2,3.5))\ntypeof(dbl_vec)\n\n\n\n#&gt; [1] 1.9 2.0 3.5\n#&gt; [1] \"double\""
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-2",
    "href": "slides/5-data-structures.html#atoms-2",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\n# Numeric\n(dbl_vec = c(1.9,2,3.5))\ntypeof(dbl_vec)\nlength(dbl_vec)\n\n\n\n#&gt; [1] 1.9 2.0 3.5\n#&gt; [1] \"double\"\n#&gt; [1] 3"
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-3",
    "href": "slides/5-data-structures.html#atoms-3",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\n# Numeric\n(dbl_vec = c(1.9,2,3.5))\ntypeof(dbl_vec)\nlength(dbl_vec)\n\n(int_vec = c(1L, 17L, 3L))\n\n\n\n#&gt; [1] 1.9 2.0 3.5\n#&gt; [1] \"double\"\n#&gt; [1] 3\n#&gt; [1]  1 17  3"
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-4",
    "href": "slides/5-data-structures.html#atoms-4",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\n# Numeric\n(dbl_vec = c(1.9,2,3.5))\ntypeof(dbl_vec)\nlength(dbl_vec)\n\n(int_vec = c(1L, 17L, 3L))\ntypeof(int_vec)\n\n\n\n#&gt; [1] 1.9 2.0 3.5\n#&gt; [1] \"double\"\n#&gt; [1] 3\n#&gt; [1]  1 17  3\n#&gt; [1] \"integer\""
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-5",
    "href": "slides/5-data-structures.html#atoms-5",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\n# Numeric\n(dbl_vec = c(1.9,2,3.5))\ntypeof(dbl_vec)\nlength(dbl_vec)\n\n(int_vec = c(1L, 17L, 3L))\ntypeof(int_vec)\nlength(int_vec)\n\n\n\n#&gt; [1] 1.9 2.0 3.5\n#&gt; [1] \"double\"\n#&gt; [1] 3\n#&gt; [1]  1 17  3\n#&gt; [1] \"integer\"\n#&gt; [1] 3"
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-6",
    "href": "slides/5-data-structures.html#atoms-6",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\n# Numeric\n(dbl_vec = c(1.9,2,3.5))\ntypeof(dbl_vec)\nlength(dbl_vec)\n\n(int_vec = c(1L, 17L, 3L))\ntypeof(int_vec)\nlength(int_vec)\n\n(lg_vec = c(TRUE, FALSE, F, T))\n\n\n\n#&gt; [1] 1.9 2.0 3.5\n#&gt; [1] \"double\"\n#&gt; [1] 3\n#&gt; [1]  1 17  3\n#&gt; [1] \"integer\"\n#&gt; [1] 3\n#&gt; [1]  TRUE FALSE FALSE  TRUE"
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-7",
    "href": "slides/5-data-structures.html#atoms-7",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\n# Numeric\n(dbl_vec = c(1.9,2,3.5))\ntypeof(dbl_vec)\nlength(dbl_vec)\n\n(int_vec = c(1L, 17L, 3L))\ntypeof(int_vec)\nlength(int_vec)\n\n(lg_vec = c(TRUE, FALSE, F, T))\ntypeof(lg_vec)\n\n\n\n#&gt; [1] 1.9 2.0 3.5\n#&gt; [1] \"double\"\n#&gt; [1] 3\n#&gt; [1]  1 17  3\n#&gt; [1] \"integer\"\n#&gt; [1] 3\n#&gt; [1]  TRUE FALSE FALSE  TRUE\n#&gt; [1] \"logical\""
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-8",
    "href": "slides/5-data-structures.html#atoms-8",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\n# Numeric\n(dbl_vec = c(1.9,2,3.5))\ntypeof(dbl_vec)\nlength(dbl_vec)\n\n(int_vec = c(1L, 17L, 3L))\ntypeof(int_vec)\nlength(int_vec)\n\n(lg_vec = c(TRUE, FALSE, F, T))\ntypeof(lg_vec)\nlength(lg_vec)\n\n\n\n#&gt; [1] 1.9 2.0 3.5\n#&gt; [1] \"double\"\n#&gt; [1] 3\n#&gt; [1]  1 17  3\n#&gt; [1] \"integer\"\n#&gt; [1] 3\n#&gt; [1]  TRUE FALSE FALSE  TRUE\n#&gt; [1] \"logical\"\n#&gt; [1] 4"
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-9",
    "href": "slides/5-data-structures.html#atoms-9",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\n# Numeric\n(dbl_vec = c(1.9,2,3.5))\ntypeof(dbl_vec)\nlength(dbl_vec)\n\n(int_vec = c(1L, 17L, 3L))\ntypeof(int_vec)\nlength(int_vec)\n\n(lg_vec = c(TRUE, FALSE, F, T))\ntypeof(lg_vec)\nlength(lg_vec)\n\n(char_vec = c(\"ESS\", \"is\", \"Great!\"))\n\n\n\n#&gt; [1] 1.9 2.0 3.5\n#&gt; [1] \"double\"\n#&gt; [1] 3\n#&gt; [1]  1 17  3\n#&gt; [1] \"integer\"\n#&gt; [1] 3\n#&gt; [1]  TRUE FALSE FALSE  TRUE\n#&gt; [1] \"logical\"\n#&gt; [1] 4\n#&gt; [1] \"ESS\"    \"is\"     \"Great!\""
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-10",
    "href": "slides/5-data-structures.html#atoms-10",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\n# Numeric\n(dbl_vec = c(1.9,2,3.5))\ntypeof(dbl_vec)\nlength(dbl_vec)\n\n(int_vec = c(1L, 17L, 3L))\ntypeof(int_vec)\nlength(int_vec)\n\n(lg_vec = c(TRUE, FALSE, F, T))\ntypeof(lg_vec)\nlength(lg_vec)\n\n(char_vec = c(\"ESS\", \"is\", \"Great!\"))\ntypeof(char_vec)\n\n\n\n#&gt; [1] 1.9 2.0 3.5\n#&gt; [1] \"double\"\n#&gt; [1] 3\n#&gt; [1]  1 17  3\n#&gt; [1] \"integer\"\n#&gt; [1] 3\n#&gt; [1]  TRUE FALSE FALSE  TRUE\n#&gt; [1] \"logical\"\n#&gt; [1] 4\n#&gt; [1] \"ESS\"    \"is\"     \"Great!\"\n#&gt; [1] \"character\""
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-11",
    "href": "slides/5-data-structures.html#atoms-11",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\n# Numeric\n(dbl_vec = c(1.9,2,3.5))\ntypeof(dbl_vec)\nlength(dbl_vec)\n\n(int_vec = c(1L, 17L, 3L))\ntypeof(int_vec)\nlength(int_vec)\n\n(lg_vec = c(TRUE, FALSE, F, T))\ntypeof(lg_vec)\nlength(lg_vec)\n\n(char_vec = c(\"ESS\", \"is\", \"Great!\"))\ntypeof(char_vec)\nlength(char_vec)\n\n\n\n#&gt; [1] 1.9 2.0 3.5\n#&gt; [1] \"double\"\n#&gt; [1] 3\n#&gt; [1]  1 17  3\n#&gt; [1] \"integer\"\n#&gt; [1] 3\n#&gt; [1]  TRUE FALSE FALSE  TRUE\n#&gt; [1] \"logical\"\n#&gt; [1] 4\n#&gt; [1] \"ESS\"    \"is\"     \"Great!\"\n#&gt; [1] \"character\"\n#&gt; [1] 3"
  },
  {
    "objectID": "slides/5-data-structures.html#missing-values",
    "href": "slides/5-data-structures.html#missing-values",
    "title": "Lecture 05",
    "section": "Missing Values!",
    "text": "Missing Values!\n\nMissing values need a place holder\nMissing values are denoted with NA (short for not applicable).\nMissing values are ‘infectious’: most computations involving a missing value will return another missing value."
  },
  {
    "objectID": "slides/5-data-structures.html#missing-values-1",
    "href": "slides/5-data-structures.html#missing-values-1",
    "title": "Lecture 05",
    "section": "Missing Values",
    "text": "Missing Values\n\n\n\n(vec = c(5,6,7,8,NA))\n\n\n\n#&gt; [1]  5  6  7  8 NA"
  },
  {
    "objectID": "slides/5-data-structures.html#missing-values-2",
    "href": "slides/5-data-structures.html#missing-values-2",
    "title": "Lecture 05",
    "section": "Missing Values",
    "text": "Missing Values\n\n\n\n(vec = c(5,6,7,8,NA))\nmean(vec)\n\n\n\n#&gt; [1]  5  6  7  8 NA\n#&gt; [1] NA"
  },
  {
    "objectID": "slides/5-data-structures.html#missing-values-3",
    "href": "slides/5-data-structures.html#missing-values-3",
    "title": "Lecture 05",
    "section": "Missing Values",
    "text": "Missing Values\n\n\n\n(vec = c(5,6,7,8,NA))\nmean(vec)\nmean(vec, na.rm = TRUE)\n\n\n\n#&gt; [1]  5  6  7  8 NA\n#&gt; [1] NA\n#&gt; [1] 6.5"
  },
  {
    "objectID": "slides/5-data-structures.html#missing-values-4",
    "href": "slides/5-data-structures.html#missing-values-4",
    "title": "Lecture 05",
    "section": "Missing Values",
    "text": "Missing Values\n\n\n\n(vec = c(5,6,7,8,NA))\nmean(vec)\nmean(vec, na.rm = TRUE)\n\nx &lt;- c(NA, 50, NA, 9)\n\n\n\n#&gt; [1]  5  6  7  8 NA\n#&gt; [1] NA\n#&gt; [1] 6.5"
  },
  {
    "objectID": "slides/5-data-structures.html#missing-values-5",
    "href": "slides/5-data-structures.html#missing-values-5",
    "title": "Lecture 05",
    "section": "Missing Values",
    "text": "Missing Values\n\n\n\n(vec = c(5,6,7,8,NA))\nmean(vec)\nmean(vec, na.rm = TRUE)\n\nx &lt;- c(NA, 50, NA, 9)\nx == NA\n\n\n\n#&gt; [1]  5  6  7  8 NA\n#&gt; [1] NA\n#&gt; [1] 6.5\n#&gt; [1] NA NA NA NA"
  },
  {
    "objectID": "slides/5-data-structures.html#missing-values-6",
    "href": "slides/5-data-structures.html#missing-values-6",
    "title": "Lecture 05",
    "section": "Missing Values",
    "text": "Missing Values\n\n\n\n(vec = c(5,6,7,8,NA))\nmean(vec)\nmean(vec, na.rm = TRUE)\n\nx &lt;- c(NA, 50, NA, 9)\nx == NA\n\nis.na(x)\n\n\n\n#&gt; [1]  5  6  7  8 NA\n#&gt; [1] NA\n#&gt; [1] 6.5\n#&gt; [1] NA NA NA NA\n#&gt; [1]  TRUE FALSE  TRUE FALSE"
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-must-be-of-the-same-type",
    "href": "slides/5-data-structures.html#atoms-must-be-of-the-same-type",
    "title": "Lecture 05",
    "section": "Atoms must be of the same type!",
    "text": "Atoms must be of the same type!\nCohersion\n\ntype is a property of the entire vector\nWhen you try and combine different types they will be coerced in a fixed order:\n\n\ncharacter → double → integer → logical\n\n\nCoercion often happens automatically.\nYou can deliberately coerce by using an as.*() function, like as.logical(), as.integer(), as.double(), or as.character().\nFailed coercion of strings generates a warning and a missing value"
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-12",
    "href": "slides/5-data-structures.html#atoms-12",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\nc(\"a\", 1)\n\n\n\n#&gt; [1] \"a\" \"1\""
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-13",
    "href": "slides/5-data-structures.html#atoms-13",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\nc(\"a\", 1)\n\nc(\"a\", TRUE)\n\n\n\n#&gt; [1] \"a\" \"1\"\n#&gt; [1] \"a\"    \"TRUE\""
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-14",
    "href": "slides/5-data-structures.html#atoms-14",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\nc(\"a\", 1)\n\nc(\"a\", TRUE)\n\nc(4.5, 1L)\n\n\n\n#&gt; [1] \"a\" \"1\"\n#&gt; [1] \"a\"    \"TRUE\"\n#&gt; [1] 4.5 1.0"
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-15",
    "href": "slides/5-data-structures.html#atoms-15",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\nc(\"a\", 1)\n\nc(\"a\", TRUE)\n\nc(4.5, 1L)\n\nc(\"1\", 18, \"GIS\")\n\n\n\n#&gt; [1] \"a\" \"1\"\n#&gt; [1] \"a\"    \"TRUE\"\n#&gt; [1] 4.5 1.0\n#&gt; [1] \"1\"   \"18\"  \"GIS\""
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-16",
    "href": "slides/5-data-structures.html#atoms-16",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\nc(\"a\", 1)\n\nc(\"a\", TRUE)\n\nc(4.5, 1L)\n\nc(\"1\", 18, \"GIS\")\n\nas.numeric(c(\"1\", 18, \"ESS\"))\n\n\n\n#&gt; [1] \"a\" \"1\"\n#&gt; [1] \"a\"    \"TRUE\"\n#&gt; [1] 4.5 1.0\n#&gt; [1] \"1\"   \"18\"  \"GIS\"\n#&gt; [1]  1 18 NA"
  },
  {
    "objectID": "slides/5-data-structures.html#atoms-17",
    "href": "slides/5-data-structures.html#atoms-17",
    "title": "Lecture 05",
    "section": "Atoms",
    "text": "Atoms\n\n\n\nc(\"a\", 1)\n\nc(\"a\", TRUE)\n\nc(4.5, 1L)\n\nc(\"1\", 18, \"GIS\")\n\nas.numeric(c(\"1\", 18, \"ESS\"))\n\nas.logical(c(\"1\", 18, \"ESS\"))\n\n\n\n#&gt; [1] \"a\" \"1\"\n#&gt; [1] \"a\"    \"TRUE\"\n#&gt; [1] 4.5 1.0\n#&gt; [1] \"1\"   \"18\"  \"GIS\"\n#&gt; [1]  1 18 NA\n#&gt; [1] NA NA NA"
  },
  {
    "objectID": "slides/5-data-structures.html#names",
    "href": "slides/5-data-structures.html#names",
    "title": "Lecture 05",
    "section": "Names",
    "text": "Names\n\nIn addition to naming the object, you can name elements making them “referenceable”\nnames must be unique, and non-missing\n\n\n\n(x &lt;- c(a = 1, b = 2, c = 3))\n#&gt; a b c \n#&gt; 1 2 3\n\n# Using the attribute names()\nnames(x) &lt;- c(\"d\", \"e\", \"f\")\n(x)\n#&gt; d e f \n#&gt; 1 2 3\n\n# With the function setNames():\n(x &lt;- setNames(1:3, c(\"g\", \"h\", \"i\")))\n#&gt; g h i \n#&gt; 1 2 3"
  },
  {
    "objectID": "slides/5-data-structures.html#diminsions",
    "href": "slides/5-data-structures.html#diminsions",
    "title": "Lecture 05",
    "section": "Diminsions",
    "text": "Diminsions\n\nYou probably noticed that atomic vectors do not include a number of important structures like matrices (2D) or arrays (3D), factors, or date-times.\nThese types extend atomic vectors by adding attributes.\nAdding a dim attribute to a vector allows it to behave like a 2D matrix or a ^*^D array."
  },
  {
    "objectID": "slides/5-data-structures.html#matrix",
    "href": "slides/5-data-structures.html#matrix",
    "title": "Lecture 05",
    "section": "Matrix",
    "text": "Matrix\n\nA matrix is also an 2D atom (row, column)\nSame data types\nSame column length"
  },
  {
    "objectID": "slides/5-data-structures.html#matrices",
    "href": "slides/5-data-structures.html#matrices",
    "title": "Lecture 05",
    "section": "Matrices",
    "text": "Matrices\n\n\n\n# Use matrix\n(mat = matrix(1:9, nrow = 3))\n\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    4    7\n#&gt; [2,]    2    5    8\n#&gt; [3,]    3    6    9"
  },
  {
    "objectID": "slides/5-data-structures.html#matrices-1",
    "href": "slides/5-data-structures.html#matrices-1",
    "title": "Lecture 05",
    "section": "Matrices",
    "text": "Matrices\n\n\n\n# Use matrix\n(mat = matrix(1:9, nrow = 3))\n\n# Use matrix\n(mat2 = matrix(1:9, nrow = 3, byrow = TRUE))\n\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    4    7\n#&gt; [2,]    2    5    8\n#&gt; [3,]    3    6    9\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    2    3\n#&gt; [2,]    4    5    6\n#&gt; [3,]    7    8    9"
  },
  {
    "objectID": "slides/5-data-structures.html#matrices-2",
    "href": "slides/5-data-structures.html#matrices-2",
    "title": "Lecture 05",
    "section": "Matrices",
    "text": "Matrices\n\n\n\n# Use matrix\n(mat = matrix(1:9, nrow = 3))\n\n# Use matrix\n(mat2 = matrix(1:9, nrow = 3, byrow = TRUE))\n\n## dim returns dimensions of an object\ndim(mat2)\n\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    4    7\n#&gt; [2,]    2    5    8\n#&gt; [3,]    3    6    9\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    2    3\n#&gt; [2,]    4    5    6\n#&gt; [3,]    7    8    9\n#&gt; [1] 3 3"
  },
  {
    "objectID": "slides/5-data-structures.html#matrices-3",
    "href": "slides/5-data-structures.html#matrices-3",
    "title": "Lecture 05",
    "section": "Matrices",
    "text": "Matrices\n\n\n\n# Use matrix\n(mat = matrix(1:9, nrow = 3))\n\n# Use matrix\n(mat2 = matrix(1:9, nrow = 3, byrow = TRUE))\n\n## dim returns dimensions of an object\ndim(mat2)\n\n# set names using colnames\ncolnames(mat2) = c(\"A\", \"B\", \"C\")\n\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    4    7\n#&gt; [2,]    2    5    8\n#&gt; [3,]    3    6    9\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    2    3\n#&gt; [2,]    4    5    6\n#&gt; [3,]    7    8    9\n#&gt; [1] 3 3"
  },
  {
    "objectID": "slides/5-data-structures.html#matrices-4",
    "href": "slides/5-data-structures.html#matrices-4",
    "title": "Lecture 05",
    "section": "Matrices",
    "text": "Matrices\n\n\n\n# Use matrix\n(mat = matrix(1:9, nrow = 3))\n\n# Use matrix\n(mat2 = matrix(1:9, nrow = 3, byrow = TRUE))\n\n## dim returns dimensions of an object\ndim(mat2)\n\n# set names using colnames\ncolnames(mat2) = c(\"A\", \"B\", \"C\")\n\nmat2\n\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    4    7\n#&gt; [2,]    2    5    8\n#&gt; [3,]    3    6    9\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    2    3\n#&gt; [2,]    4    5    6\n#&gt; [3,]    7    8    9\n#&gt; [1] 3 3\n#&gt;      A B C\n#&gt; [1,] 1 2 3\n#&gt; [2,] 4 5 6\n#&gt; [3,] 7 8 9"
  },
  {
    "objectID": "slides/5-data-structures.html#arrays",
    "href": "slides/5-data-structures.html#arrays",
    "title": "Lecture 05",
    "section": "Arrays",
    "text": "Arrays\n\nAn array is a 3D atom [row, column, slice]"
  },
  {
    "objectID": "slides/5-data-structures.html#arrays-1",
    "href": "slides/5-data-structures.html#arrays-1",
    "title": "Lecture 05",
    "section": "Arrays",
    "text": "Arrays\n\n\n\na &lt;-  c(1:12)"
  },
  {
    "objectID": "slides/5-data-structures.html#arrays-2",
    "href": "slides/5-data-structures.html#arrays-2",
    "title": "Lecture 05",
    "section": "Arrays",
    "text": "Arrays\n\n\n\na &lt;-  c(1:12)\n\narray(a, dim = c(2,3,2))\n\n\n\n#&gt; , , 1\n#&gt; \n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    3    5\n#&gt; [2,]    2    4    6\n#&gt; \n#&gt; , , 2\n#&gt; \n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    7    9   11\n#&gt; [2,]    8   10   12\n\n\n\nA vector without a dim attribute set is often thought of as 1-dimensional, but actually has NULL dimensions.\n\n\ndim(a)\n#&gt; NULL"
  },
  {
    "objectID": "slides/5-data-structures.html#why",
    "href": "slides/5-data-structures.html#why",
    "title": "Lecture 05",
    "section": "Why?",
    "text": "Why?\n\nMatrices with a single row or single column, or arrays with a single dimension are 1D. They may print similarly, but will behave differently. The differences aren’t too important, but it’s useful to know they exist in case you get strange output from a function (tapply() is a frequent offender). As always, use str() to reveal the differences.\n\n\nstr(c(1:3))                  # 1d vector\n#&gt;  int [1:3] 1 2 3\n\nstr(matrix(1:3, ncol = 1))   # column vector\n#&gt;  int [1:3, 1] 1 2 3\n\nstr(matrix(1:3, nrow = 1))   # row vector\n#&gt;  int [1, 1:3] 1 2 3\n\nstr(array(1:3, 3))           # \"array\" vector\n#&gt;  int [1:3(1d)] 1 2 3"
  },
  {
    "objectID": "slides/5-data-structures.html#lists-heterogenous-data",
    "href": "slides/5-data-structures.html#lists-heterogenous-data",
    "title": "Lecture 05",
    "section": "Lists: Heterogenous Data",
    "text": "Lists: Heterogenous Data\n\nLists extend atomic vectors and allow each list element to be any type.\n\n\n(my_list &lt;- list(\n  matrix(1:4, nrow = 2), \n  \"ESS is great!\", \n  c(TRUE, FALSE, TRUE), \n  c(2.3, 5.9)\n))\n#&gt; [[1]]\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    3\n#&gt; [2,]    2    4\n#&gt; \n#&gt; [[2]]\n#&gt; [1] \"ESS is great!\"\n#&gt; \n#&gt; [[3]]\n#&gt; [1]  TRUE FALSE  TRUE\n#&gt; \n#&gt; [[4]]\n#&gt; [1] 2.3 5.9\n\ntypeof(my_list)\n#&gt; [1] \"list\""
  },
  {
    "objectID": "slides/5-data-structures.html#lists-can-be-recursive",
    "href": "slides/5-data-structures.html#lists-can-be-recursive",
    "title": "Lecture 05",
    "section": "Lists can be recursive",
    "text": "Lists can be recursive\n\n# list of lists of lists ...\n(list_list = list(list(\"hi\")))\n#&gt; [[1]]\n#&gt; [[1]][[1]]\n#&gt; [1] \"hi\"\n\nstr(list_list)\n#&gt; List of 1\n#&gt;  $ :List of 1\n#&gt;   ..$ : chr \"hi\""
  },
  {
    "objectID": "slides/5-data-structures.html#data-frames",
    "href": "slides/5-data-structures.html#data-frames",
    "title": "Lecture 05",
    "section": "Data Frames",
    "text": "Data Frames\n\nA data.frame is a data structure built on top of lists\n\n\nclass(data.frame())\n#&gt; [1] \"data.frame\"\ntypeof(data.frame())\n#&gt; [1] \"list\"\n\n\na named list of vectors.\ndata.frames are one of the biggest and most important ideas in R\nUnlike a regular list the length of each vector in a data.frame must be the same.\nThis gives data frames a rectangular structure and explains why they share the properties of both matrices and lists"
  },
  {
    "objectID": "slides/5-data-structures.html#a-small-data.frame",
    "href": "slides/5-data-structures.html#a-small-data.frame",
    "title": "Lecture 05",
    "section": "A small data.frame",
    "text": "A small data.frame\n\n\n\ndf1 &lt;- data.frame(name = c(\"George\", \"Stan\", \"Carly\"),\n                  age  = c(75,15,31),\n                  retired = c(T,F,F))"
  },
  {
    "objectID": "slides/5-data-structures.html#a-small-data.frame-1",
    "href": "slides/5-data-structures.html#a-small-data.frame-1",
    "title": "Lecture 05",
    "section": "A small data.frame",
    "text": "A small data.frame\n\n\n\ndf1 &lt;- data.frame(name = c(\"George\", \"Stan\", \"Carly\"),\n                  age  = c(75,15,31),\n                  retired = c(T,F,F))\n\ntypeof(df1)\n\n\n\n#&gt; [1] \"list\""
  },
  {
    "objectID": "slides/5-data-structures.html#a-small-data.frame-2",
    "href": "slides/5-data-structures.html#a-small-data.frame-2",
    "title": "Lecture 05",
    "section": "A small data.frame",
    "text": "A small data.frame\n\n\n\ndf1 &lt;- data.frame(name = c(\"George\", \"Stan\", \"Carly\"),\n                  age  = c(75,15,31),\n                  retired = c(T,F,F))\n\ntypeof(df1)\nattributes(df1)\n\n\n\n#&gt; [1] \"list\"\n#&gt; $names\n#&gt; [1] \"name\"    \"age\"     \"retired\"\n#&gt; \n#&gt; $class\n#&gt; [1] \"data.frame\"\n#&gt; \n#&gt; $row.names\n#&gt; [1] 1 2 3"
  },
  {
    "objectID": "slides/5-data-structures.html#a-small-data.frame-3",
    "href": "slides/5-data-structures.html#a-small-data.frame-3",
    "title": "Lecture 05",
    "section": "A small data.frame",
    "text": "A small data.frame\n\n\n\ndf1 &lt;- data.frame(name = c(\"George\", \"Stan\", \"Carly\"),\n                  age  = c(75,15,31),\n                  retired = c(T,F,F))\n\ntypeof(df1)\nattributes(df1)\nstr(df1)\n\n\n\n#&gt; [1] \"list\"\n#&gt; $names\n#&gt; [1] \"name\"    \"age\"     \"retired\"\n#&gt; \n#&gt; $class\n#&gt; [1] \"data.frame\"\n#&gt; \n#&gt; $row.names\n#&gt; [1] 1 2 3\n#&gt; 'data.frame':    3 obs. of  3 variables:\n#&gt;  $ name   : chr  \"George\" \"Stan\" \"Carly\"\n#&gt;  $ age    : num  75 15 31\n#&gt;  $ retired: logi  TRUE FALSE FALSE"
  },
  {
    "objectID": "slides/5-data-structures.html#data.frame-example",
    "href": "slides/5-data-structures.html#data.frame-example",
    "title": "Lecture 05",
    "section": "data.frame example",
    "text": "data.frame example\n\n\n\n(num &lt;- c(1,2,3,4))\n\n\n\n#&gt; [1] 1 2 3 4"
  },
  {
    "objectID": "slides/5-data-structures.html#data.frame-example-1",
    "href": "slides/5-data-structures.html#data.frame-example-1",
    "title": "Lecture 05",
    "section": "data.frame example",
    "text": "data.frame example\n\n\n\n(num &lt;- c(1,2,3,4))\n\n(color &lt;- c(\"red\", \"white\", \"green\", NA))\n\n\n\n#&gt; [1] 1 2 3 4\n#&gt; [1] \"red\"   \"white\" \"green\" NA"
  },
  {
    "objectID": "slides/5-data-structures.html#data.frame-example-2",
    "href": "slides/5-data-structures.html#data.frame-example-2",
    "title": "Lecture 05",
    "section": "data.frame example",
    "text": "data.frame example\n\n\n\n(num &lt;- c(1,2,3,4))\n\n(color &lt;- c(\"red\", \"white\", \"green\", NA))\n\n(boolean &lt;- c(TRUE,TRUE,TRUE,FALSE))\n\n\n\n#&gt; [1] 1 2 3 4\n#&gt; [1] \"red\"   \"white\" \"green\" NA\n#&gt; [1]  TRUE  TRUE  TRUE FALSE"
  },
  {
    "objectID": "slides/5-data-structures.html#data.frame-example-3",
    "href": "slides/5-data-structures.html#data.frame-example-3",
    "title": "Lecture 05",
    "section": "data.frame example",
    "text": "data.frame example\n\n\n\n(num &lt;- c(1,2,3,4))\n\n(color &lt;- c(\"red\", \"white\", \"green\", NA))\n\n(boolean &lt;- c(TRUE,TRUE,TRUE,FALSE))\n\n(df = data.frame(num, color, boolean))\n\n\n\n#&gt; [1] 1 2 3 4\n#&gt; [1] \"red\"   \"white\" \"green\" NA\n#&gt; [1]  TRUE  TRUE  TRUE FALSE\n#&gt;   num color boolean\n#&gt; 1   1   red    TRUE\n#&gt; 2   2 white    TRUE\n#&gt; 3   3 green    TRUE\n#&gt; 4   4  &lt;NA&gt;   FALSE"
  },
  {
    "objectID": "slides/5-data-structures.html#subsetting",
    "href": "slides/5-data-structures.html#subsetting",
    "title": "Lecture 05",
    "section": "Subsetting",
    "text": "Subsetting\n\nR’s subsetting operators are fast and powerful.\nThere are 3 subsetting operators:\n\n[ –&gt; vectors\n[[ –&gt; lists\n\n$ –&gt; data.frames\n\nSubsetting can be combined with assignment."
  },
  {
    "objectID": "slides/5-data-structures.html#subset-atomics",
    "href": "slides/5-data-structures.html#subset-atomics",
    "title": "Lecture 05",
    "section": "Subset Atomics",
    "text": "Subset Atomics\n\n\n\n\n(x = c(3.4, 7, 18, 9.6))\n\n\n\n#&gt; [1]  3.4  7.0 18.0  9.6"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-atomics-1",
    "href": "slides/5-data-structures.html#subset-atomics-1",
    "title": "Lecture 05",
    "section": "Subset Atomics",
    "text": "Subset Atomics\n\n\n\n\n(x = c(3.4, 7, 18, 9.6))\n\nx[3]\n\n\n\n#&gt; [1]  3.4  7.0 18.0  9.6\n#&gt; [1] 18"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-atomics-2",
    "href": "slides/5-data-structures.html#subset-atomics-2",
    "title": "Lecture 05",
    "section": "Subset Atomics",
    "text": "Subset Atomics\n\n\n\n\n(x = c(3.4, 7, 18, 9.6))\n\nx[3]\n\nx[c(3,4)]\n\n\n\n#&gt; [1]  3.4  7.0 18.0  9.6\n#&gt; [1] 18\n#&gt; [1] 18.0  9.6"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-atomics-3",
    "href": "slides/5-data-structures.html#subset-atomics-3",
    "title": "Lecture 05",
    "section": "Subset Atomics",
    "text": "Subset Atomics\n\n\n\n\n(x = c(3.4, 7, 18, 9.6))\n\nx[3]\n\nx[c(3,4)]\n\nx[-3]\n\n\n\n#&gt; [1]  3.4  7.0 18.0  9.6\n#&gt; [1] 18\n#&gt; [1] 18.0  9.6\n#&gt; [1] 3.4 7.0 9.6"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-atomics-4",
    "href": "slides/5-data-structures.html#subset-atomics-4",
    "title": "Lecture 05",
    "section": "Subset Atomics",
    "text": "Subset Atomics\n\n\n\n\n(x = c(3.4, 7, 18, 9.6))\n\nx[3]\n\nx[c(3,4)]\n\nx[-3]\n\nx[c(T,T,F,F)]\n\n\n\n#&gt; [1]  3.4  7.0 18.0  9.6\n#&gt; [1] 18\n#&gt; [1] 18.0  9.6\n#&gt; [1] 3.4 7.0 9.6\n#&gt; [1] 3.4 7.0"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-atomics-5",
    "href": "slides/5-data-structures.html#subset-atomics-5",
    "title": "Lecture 05",
    "section": "Subset Atomics",
    "text": "Subset Atomics\n\n\n\n\n(x = c(3.4, 7, 18, 9.6))\n\nx[3]\n\nx[c(3,4)]\n\nx[-3]\n\nx[c(T,T,F,F)]\n\nx &lt;- setNames(x, c('A', 'B','C','D'))\n\n\n\n#&gt; [1]  3.4  7.0 18.0  9.6\n#&gt; [1] 18\n#&gt; [1] 18.0  9.6\n#&gt; [1] 3.4 7.0 9.6\n#&gt; [1] 3.4 7.0"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-atomics-6",
    "href": "slides/5-data-structures.html#subset-atomics-6",
    "title": "Lecture 05",
    "section": "Subset Atomics",
    "text": "Subset Atomics\n\n\n\n\n(x = c(3.4, 7, 18, 9.6))\n\nx[3]\n\nx[c(3,4)]\n\nx[-3]\n\nx[c(T,T,F,F)]\n\nx &lt;- setNames(x, c('A', 'B','C','D'))\n\nx[\"A\"]\n\n\n\n#&gt; [1]  3.4  7.0 18.0  9.6\n#&gt; [1] 18\n#&gt; [1] 18.0  9.6\n#&gt; [1] 3.4 7.0 9.6\n#&gt; [1] 3.4 7.0\n#&gt;   A \n#&gt; 3.4"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-atomics-7",
    "href": "slides/5-data-structures.html#subset-atomics-7",
    "title": "Lecture 05",
    "section": "Subset Atomics",
    "text": "Subset Atomics\n\n\n\n\n(x = c(3.4, 7, 18, 9.6))\n\nx[3]\n\nx[c(3,4)]\n\nx[-3]\n\nx[c(T,T,F,F)]\n\nx &lt;- setNames(x, c('A', 'B','C','D'))\n\nx[\"A\"]\nx[c(\"A\", \"C\")]\n\n\n\n#&gt; [1]  3.4  7.0 18.0  9.6\n#&gt; [1] 18\n#&gt; [1] 18.0  9.6\n#&gt; [1] 3.4 7.0 9.6\n#&gt; [1] 3.4 7.0\n#&gt;   A \n#&gt; 3.4\n#&gt;    A    C \n#&gt;  3.4 18.0"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-atomics-8",
    "href": "slides/5-data-structures.html#subset-atomics-8",
    "title": "Lecture 05",
    "section": "Subset Atomics",
    "text": "Subset Atomics\n\n\n\n\n(x = c(3.4, 7, 18, 9.6))\n\nx[3]\n\nx[c(3,4)]\n\nx[-3]\n\nx[c(T,T,F,F)]\n\nx &lt;- setNames(x, c('A', 'B','C','D'))\n\nx[\"A\"]\nx[c(\"A\", \"C\")]\nx[c(\"A\", \"A\")]\n\n\n\n#&gt; [1]  3.4  7.0 18.0  9.6\n#&gt; [1] 18\n#&gt; [1] 18.0  9.6\n#&gt; [1] 3.4 7.0 9.6\n#&gt; [1] 3.4 7.0\n#&gt;   A \n#&gt; 3.4\n#&gt;    A    C \n#&gt;  3.4 18.0\n#&gt;   A   A \n#&gt; 3.4 3.4"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-matrices",
    "href": "slides/5-data-structures.html#subset-matrices",
    "title": "Lecture 05",
    "section": "Subset Matrices",
    "text": "Subset Matrices\n\n\n\n\n(x = matrix(1:9, nrow = 3))\n\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    4    7\n#&gt; [2,]    2    5    8\n#&gt; [3,]    3    6    9"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-matrices-1",
    "href": "slides/5-data-structures.html#subset-matrices-1",
    "title": "Lecture 05",
    "section": "Subset Matrices",
    "text": "Subset Matrices\n\n\n\n\n(x = matrix(1:9, nrow = 3))\n\nx[3,]\n\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    4    7\n#&gt; [2,]    2    5    8\n#&gt; [3,]    3    6    9\n#&gt; [1] 3 6 9"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-matrices-2",
    "href": "slides/5-data-structures.html#subset-matrices-2",
    "title": "Lecture 05",
    "section": "Subset Matrices",
    "text": "Subset Matrices\n\n\n\n\n(x = matrix(1:9, nrow = 3))\n\nx[3,]\nx[,3]\n\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    4    7\n#&gt; [2,]    2    5    8\n#&gt; [3,]    3    6    9\n#&gt; [1] 3 6 9\n#&gt; [1] 7 8 9"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-matrices-3",
    "href": "slides/5-data-structures.html#subset-matrices-3",
    "title": "Lecture 05",
    "section": "Subset Matrices",
    "text": "Subset Matrices\n\n\n\n\n(x = matrix(1:9, nrow = 3))\n\nx[3,]\nx[,3]\nx[3,3]\n\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    4    7\n#&gt; [2,]    2    5    8\n#&gt; [3,]    3    6    9\n#&gt; [1] 3 6 9\n#&gt; [1] 7 8 9\n#&gt; [1] 9"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-matrices-4",
    "href": "slides/5-data-structures.html#subset-matrices-4",
    "title": "Lecture 05",
    "section": "Subset Matrices",
    "text": "Subset Matrices\n\n\n\n\n(x = matrix(1:9, nrow = 3))\n\nx[3,]\nx[,3]\nx[3,3]\nx[1:2,1:2]\n\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    4    7\n#&gt; [2,]    2    5    8\n#&gt; [3,]    3    6    9\n#&gt; [1] 3 6 9\n#&gt; [1] 7 8 9\n#&gt; [1] 9\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    4\n#&gt; [2,]    2    5"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-matrices-5",
    "href": "slides/5-data-structures.html#subset-matrices-5",
    "title": "Lecture 05",
    "section": "Subset Matrices",
    "text": "Subset Matrices\n\n\n\n\n(x = matrix(1:9, nrow = 3))\n\nx[3,]\nx[,3]\nx[3,3]\nx[1:2,1:2]\nx[-1,]\n\n\n\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    4    7\n#&gt; [2,]    2    5    8\n#&gt; [3,]    3    6    9\n#&gt; [1] 3 6 9\n#&gt; [1] 7 8 9\n#&gt; [1] 9\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    4\n#&gt; [2,]    2    5\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    2    5    8\n#&gt; [2,]    3    6    9"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-arrays",
    "href": "slides/5-data-structures.html#subset-arrays",
    "title": "Lecture 05",
    "section": "Subset Arrays",
    "text": "Subset Arrays\n\n\n\n(x = array(1:12, dim = c(2,2,3)))\n\n\n\n#&gt; , , 1\n#&gt; \n#&gt;      [,1] [,2]\n#&gt; [1,]    1    3\n#&gt; [2,]    2    4\n#&gt; \n#&gt; , , 2\n#&gt; \n#&gt;      [,1] [,2]\n#&gt; [1,]    5    7\n#&gt; [2,]    6    8\n#&gt; \n#&gt; , , 3\n#&gt; \n#&gt;      [,1] [,2]\n#&gt; [1,]    9   11\n#&gt; [2,]   10   12"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-arrays-1",
    "href": "slides/5-data-structures.html#subset-arrays-1",
    "title": "Lecture 05",
    "section": "Subset Arrays",
    "text": "Subset Arrays\n\n\n\n(x = array(1:12, dim = c(2,2,3)))\n\nx[1,,]\n\n\n\n#&gt; , , 1\n#&gt; \n#&gt;      [,1] [,2]\n#&gt; [1,]    1    3\n#&gt; [2,]    2    4\n#&gt; \n#&gt; , , 2\n#&gt; \n#&gt;      [,1] [,2]\n#&gt; [1,]    5    7\n#&gt; [2,]    6    8\n#&gt; \n#&gt; , , 3\n#&gt; \n#&gt;      [,1] [,2]\n#&gt; [1,]    9   11\n#&gt; [2,]   10   12\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    5    9\n#&gt; [2,]    3    7   11"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-arrays-2",
    "href": "slides/5-data-structures.html#subset-arrays-2",
    "title": "Lecture 05",
    "section": "Subset Arrays",
    "text": "Subset Arrays\n\n\n\n(x = array(1:12, dim = c(2,2,3)))\n\nx[1,,]\nx[,1,]\n\n\n\n#&gt; , , 1\n#&gt; \n#&gt;      [,1] [,2]\n#&gt; [1,]    1    3\n#&gt; [2,]    2    4\n#&gt; \n#&gt; , , 2\n#&gt; \n#&gt;      [,1] [,2]\n#&gt; [1,]    5    7\n#&gt; [2,]    6    8\n#&gt; \n#&gt; , , 3\n#&gt; \n#&gt;      [,1] [,2]\n#&gt; [1,]    9   11\n#&gt; [2,]   10   12\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    5    9\n#&gt; [2,]    3    7   11\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    5    9\n#&gt; [2,]    2    6   10"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-arrays-3",
    "href": "slides/5-data-structures.html#subset-arrays-3",
    "title": "Lecture 05",
    "section": "Subset Arrays",
    "text": "Subset Arrays\n\n\n\n(x = array(1:12, dim = c(2,2,3)))\n\nx[1,,]\nx[,1,]\nx[,,1]\n\n\n\n#&gt; , , 1\n#&gt; \n#&gt;      [,1] [,2]\n#&gt; [1,]    1    3\n#&gt; [2,]    2    4\n#&gt; \n#&gt; , , 2\n#&gt; \n#&gt;      [,1] [,2]\n#&gt; [1,]    5    7\n#&gt; [2,]    6    8\n#&gt; \n#&gt; , , 3\n#&gt; \n#&gt;      [,1] [,2]\n#&gt; [1,]    9   11\n#&gt; [2,]   10   12\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    5    9\n#&gt; [2,]    3    7   11\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    5    9\n#&gt; [2,]    2    6   10\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    3\n#&gt; [2,]    2    4"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-lists",
    "href": "slides/5-data-structures.html#subset-lists",
    "title": "Lecture 05",
    "section": "Subset Lists",
    "text": "Subset Lists\n\n\n\n\n(ll &lt;- list(name = c(\"George\", \"Stan\", \"Carly\"),\n            age  = c(75,15,31),\n            retired = c(T,F,F)))\n\n\n\n#&gt; $name\n#&gt; [1] \"George\" \"Stan\"   \"Carly\" \n#&gt; \n#&gt; $age\n#&gt; [1] 75 15 31\n#&gt; \n#&gt; $retired\n#&gt; [1]  TRUE FALSE FALSE"
  },
  {
    "objectID": "slides/5-data-structures.html#subset-lists-1",
    "href": "slides/5-data-structures.html#subset-lists-1",
    "title": "Lecture 05",
    "section": "Subset Lists",
    "text": "Subset Lists\n\n\n\n\n(ll &lt;- list(name = c(\"George\", \"Stan\", \"Carly\"),\n            age  = c(75,15,31),\n            retired = c(T,F,F)))\nll$name\n\n\n\n#&gt; $name\n#&gt; [1] \"George\" \"Stan\"   \"Carly\" \n#&gt; \n#&gt; $age\n#&gt; [1] 75 15 31\n#&gt; \n#&gt; $retired\n#&gt; [1]  TRUE FALSE FALSE\n#&gt; [1] \"George\" \"Stan\"   \"Carly\""
  },
  {
    "objectID": "slides/5-data-structures.html#subset-lists-2",
    "href": "slides/5-data-structures.html#subset-lists-2",
    "title": "Lecture 05",
    "section": "Subset Lists",
    "text": "Subset Lists\n\n\n\n\n(ll &lt;- list(name = c(\"George\", \"Stan\", \"Carly\"),\n            age  = c(75,15,31),\n            retired = c(T,F,F)))\nll$name\nll$name[1]\n\n\n\n#&gt; $name\n#&gt; [1] \"George\" \"Stan\"   \"Carly\" \n#&gt; \n#&gt; $age\n#&gt; [1] 75 15 31\n#&gt; \n#&gt; $retired\n#&gt; [1]  TRUE FALSE FALSE\n#&gt; [1] \"George\" \"Stan\"   \"Carly\"\n#&gt; [1] \"George\""
  },
  {
    "objectID": "slides/5-data-structures.html#subset-lists-3",
    "href": "slides/5-data-structures.html#subset-lists-3",
    "title": "Lecture 05",
    "section": "Subset Lists",
    "text": "Subset Lists\n\n\n\n\n(ll &lt;- list(name = c(\"George\", \"Stan\", \"Carly\"),\n            age  = c(75,15,31),\n            retired = c(T,F,F)))\nll$name\nll$name[1]\n\nll[[1]]\n\n\n\n#&gt; $name\n#&gt; [1] \"George\" \"Stan\"   \"Carly\" \n#&gt; \n#&gt; $age\n#&gt; [1] 75 15 31\n#&gt; \n#&gt; $retired\n#&gt; [1]  TRUE FALSE FALSE\n#&gt; [1] \"George\" \"Stan\"   \"Carly\"\n#&gt; [1] \"George\"\n#&gt; [1] \"George\" \"Stan\"   \"Carly\""
  },
  {
    "objectID": "slides/5-data-structures.html#subset-lists-4",
    "href": "slides/5-data-structures.html#subset-lists-4",
    "title": "Lecture 05",
    "section": "Subset Lists",
    "text": "Subset Lists\n\n\n\n\n(ll &lt;- list(name = c(\"George\", \"Stan\", \"Carly\"),\n            age  = c(75,15,31),\n            retired = c(T,F,F)))\nll$name\nll$name[1]\n\nll[[1]]\nll[[1]][1]\n\n\n\n#&gt; $name\n#&gt; [1] \"George\" \"Stan\"   \"Carly\" \n#&gt; \n#&gt; $age\n#&gt; [1] 75 15 31\n#&gt; \n#&gt; $retired\n#&gt; [1]  TRUE FALSE FALSE\n#&gt; [1] \"George\" \"Stan\"   \"Carly\"\n#&gt; [1] \"George\"\n#&gt; [1] \"George\" \"Stan\"   \"Carly\"\n#&gt; [1] \"George\""
  },
  {
    "objectID": "slides/5-data-structures.html#subset-lists-5",
    "href": "slides/5-data-structures.html#subset-lists-5",
    "title": "Lecture 05",
    "section": "Subset Lists",
    "text": "Subset Lists\n\n\n\n\n(ll &lt;- list(name = c(\"George\", \"Stan\", \"Carly\"),\n            age  = c(75,15,31),\n            retired = c(T,F,F)))\nll$name\nll$name[1]\n\nll[[1]]\nll[[1]][1]\n\nll[['name']][1]\n\n\n\n#&gt; $name\n#&gt; [1] \"George\" \"Stan\"   \"Carly\" \n#&gt; \n#&gt; $age\n#&gt; [1] 75 15 31\n#&gt; \n#&gt; $retired\n#&gt; [1]  TRUE FALSE FALSE\n#&gt; [1] \"George\" \"Stan\"   \"Carly\"\n#&gt; [1] \"George\"\n#&gt; [1] \"George\" \"Stan\"   \"Carly\"\n#&gt; [1] \"George\"\n#&gt; [1] \"George\""
  },
  {
    "objectID": "slides/5-data-structures.html#lists-are-not-matrices",
    "href": "slides/5-data-structures.html#lists-are-not-matrices",
    "title": "Lecture 05",
    "section": "Lists are not Matrices",
    "text": "Lists are not Matrices\n\n# The name \"Stan\"\nll[1,2]\n#&gt; Error in ll[1, 2]: incorrect number of dimensions\n\n# Stans Information\nll[2,]\n#&gt; Error in ll[2, ]: incorrect number of dimensions"
  },
  {
    "objectID": "slides/5-data-structures.html#enter-data.frames",
    "href": "slides/5-data-structures.html#enter-data.frames",
    "title": "Lecture 05",
    "section": "Enter data.frames",
    "text": "Enter data.frames\n\n\n\n(df &lt;- data.frame(name = c(\"George\", \"Stan\", \"Carly\"),\n                  age  = c(75,15,31),\n                  retired = c(T,F,F)))\n\n\n\n#&gt;     name age retired\n#&gt; 1 George  75    TRUE\n#&gt; 2   Stan  15   FALSE\n#&gt; 3  Carly  31   FALSE"
  },
  {
    "objectID": "slides/5-data-structures.html#enter-data.frames-1",
    "href": "slides/5-data-structures.html#enter-data.frames-1",
    "title": "Lecture 05",
    "section": "Enter data.frames",
    "text": "Enter data.frames\n\n\n\n(df &lt;- data.frame(name = c(\"George\", \"Stan\", \"Carly\"),\n                  age  = c(75,15,31),\n                  retired = c(T,F,F)))\n\n# Like a Matrix!\ndf[1,2]\n\n\n\n#&gt;     name age retired\n#&gt; 1 George  75    TRUE\n#&gt; 2   Stan  15   FALSE\n#&gt; 3  Carly  31   FALSE\n#&gt; [1] 75"
  },
  {
    "objectID": "slides/5-data-structures.html#enter-data.frames-2",
    "href": "slides/5-data-structures.html#enter-data.frames-2",
    "title": "Lecture 05",
    "section": "Enter data.frames",
    "text": "Enter data.frames\n\n\n\n(df &lt;- data.frame(name = c(\"George\", \"Stan\", \"Carly\"),\n                  age  = c(75,15,31),\n                  retired = c(T,F,F)))\n\n# Like a Matrix!\ndf[1,2]\ndf[2,]\n\n\n\n#&gt;     name age retired\n#&gt; 1 George  75    TRUE\n#&gt; 2   Stan  15   FALSE\n#&gt; 3  Carly  31   FALSE\n#&gt; [1] 75\n#&gt;   name age retired\n#&gt; 2 Stan  15   FALSE"
  },
  {
    "objectID": "slides/5-data-structures.html#enter-data.frames-3",
    "href": "slides/5-data-structures.html#enter-data.frames-3",
    "title": "Lecture 05",
    "section": "Enter data.frames",
    "text": "Enter data.frames\n\n\n\n(df &lt;- data.frame(name = c(\"George\", \"Stan\", \"Carly\"),\n                  age  = c(75,15,31),\n                  retired = c(T,F,F)))\n\n# Like a Matrix!\ndf[1,2]\ndf[2,]\n\n# Like a list!\ndf[[1]][1]\n\n\n\n#&gt;     name age retired\n#&gt; 1 George  75    TRUE\n#&gt; 2   Stan  15   FALSE\n#&gt; 3  Carly  31   FALSE\n#&gt; [1] 75\n#&gt;   name age retired\n#&gt; 2 Stan  15   FALSE\n#&gt; [1] \"George\""
  },
  {
    "objectID": "slides/5-data-structures.html#enter-data.frames-4",
    "href": "slides/5-data-structures.html#enter-data.frames-4",
    "title": "Lecture 05",
    "section": "Enter data.frames",
    "text": "Enter data.frames\n\n\n\n(df &lt;- data.frame(name = c(\"George\", \"Stan\", \"Carly\"),\n                  age  = c(75,15,31),\n                  retired = c(T,F,F)))\n\n# Like a Matrix!\ndf[1,2]\ndf[2,]\n\n# Like a list!\ndf[[1]][1]\ndf$name[1]\n\n\n\n#&gt;     name age retired\n#&gt; 1 George  75    TRUE\n#&gt; 2   Stan  15   FALSE\n#&gt; 3  Carly  31   FALSE\n#&gt; [1] 75\n#&gt;   name age retired\n#&gt; 2 Stan  15   FALSE\n#&gt; [1] \"George\"\n#&gt; [1] \"George\""
  },
  {
    "objectID": "slides/5-data-structures.html#enter-data.frames-5",
    "href": "slides/5-data-structures.html#enter-data.frames-5",
    "title": "Lecture 05",
    "section": "Enter data.frames",
    "text": "Enter data.frames\n\n\n\n(df &lt;- data.frame(name = c(\"George\", \"Stan\", \"Carly\"),\n                  age  = c(75,15,31),\n                  retired = c(T,F,F)))\n\n# Like a Matrix!\ndf[1,2]\ndf[2,]\n\n# Like a list!\ndf[[1]][1]\ndf$name[1]\n\n\n\n#&gt;     name age retired\n#&gt; 1 George  75    TRUE\n#&gt; 2   Stan  15   FALSE\n#&gt; 3  Carly  31   FALSE\n#&gt; [1] 75\n#&gt;   name age retired\n#&gt; 2 Stan  15   FALSE\n#&gt; [1] \"George\"\n#&gt; [1] \"George\""
  },
  {
    "objectID": "slides/5-data-structures.html#storm-dataset",
    "href": "slides/5-data-structures.html#storm-dataset",
    "title": "Lecture 05",
    "section": "Storm Dataset",
    "text": "Storm Dataset\n\nMany packages come with loaded datasets.\n\n\n\n\n\n\n\nTip\n\n\n\ndplyr::storms contains the NOAA Atlantic hurricane database best track data. The data includes the positions and attributes of storms from 1975-2022. Storms from 1979 onward are measured every six hours during the lifetime of the storm. Storms in earlier years have some missing data."
  },
  {
    "objectID": "slides/5-data-structures.html#storms",
    "href": "slides/5-data-structures.html#storms",
    "title": "Lecture 05",
    "section": "Storms",
    "text": "Storms\n\n\n\n#preview dataset\nhead(storms,3)\n\n\n\n#&gt; # A tibble: 3 × 13\n#&gt;   name   year month   day  hour   lat  long status       category  wind pressure\n#&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;           &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n#&gt; 1 Amy    1975     6    27     0  27.5   -79 tropical de…       NA    25     1013\n#&gt; 2 Amy    1975     6    27     6  28.5   -79 tropical de…       NA    25     1013\n#&gt; 3 Amy    1975     6    27    12  29.5   -79 tropical de…       NA    25     1013\n#&gt; # ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#&gt; #   hurricane_force_diameter &lt;int&gt;"
  },
  {
    "objectID": "slides/5-data-structures.html#storms-1",
    "href": "slides/5-data-structures.html#storms-1",
    "title": "Lecture 05",
    "section": "Storms",
    "text": "Storms\n\n\n\n#preview dataset\nhead(storms,3)\n# Get data dimensions\ndim(storms)\n\n\n\n#&gt; # A tibble: 3 × 13\n#&gt;   name   year month   day  hour   lat  long status       category  wind pressure\n#&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;           &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n#&gt; 1 Amy    1975     6    27     0  27.5   -79 tropical de…       NA    25     1013\n#&gt; 2 Amy    1975     6    27     6  28.5   -79 tropical de…       NA    25     1013\n#&gt; 3 Amy    1975     6    27    12  29.5   -79 tropical de…       NA    25     1013\n#&gt; # ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#&gt; #   hurricane_force_diameter &lt;int&gt;\n#&gt; [1] 19537    13"
  },
  {
    "objectID": "slides/5-data-structures.html#storms-2",
    "href": "slides/5-data-structures.html#storms-2",
    "title": "Lecture 05",
    "section": "Storms",
    "text": "Storms\n\n\n\n#preview dataset\nhead(storms,3)\n# Get data dimensions\ndim(storms)\nstr(storms)\n\n\n\n#&gt; # A tibble: 3 × 13\n#&gt;   name   year month   day  hour   lat  long status       category  wind pressure\n#&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;           &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n#&gt; 1 Amy    1975     6    27     0  27.5   -79 tropical de…       NA    25     1013\n#&gt; 2 Amy    1975     6    27     6  28.5   -79 tropical de…       NA    25     1013\n#&gt; 3 Amy    1975     6    27    12  29.5   -79 tropical de…       NA    25     1013\n#&gt; # ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#&gt; #   hurricane_force_diameter &lt;int&gt;\n#&gt; [1] 19537    13\n#&gt; tibble [19,537 × 13] (S3: tbl_df/tbl/data.frame)\n#&gt;  $ name                        : chr [1:19537] \"Amy\" \"Amy\" \"Amy\" \"Amy\" ...\n#&gt;  $ year                        : num [1:19537] 1975 1975 1975 1975 1975 ...\n#&gt;  $ month                       : num [1:19537] 6 6 6 6 6 6 6 6 6 6 ...\n#&gt;  $ day                         : int [1:19537] 27 27 27 27 28 28 28 28 29 29 ...\n#&gt;  $ hour                        : num [1:19537] 0 6 12 18 0 6 12 18 0 6 ...\n#&gt;  $ lat                         : num [1:19537] 27.5 28.5 29.5 30.5 31.5 32.4 33.3 34 34.4 34 ...\n#&gt;  $ long                        : num [1:19537] -79 -79 -79 -79 -78.8 -78.7 -78 -77 -75.8 -74.8 ...\n#&gt;  $ status                      : Factor w/ 9 levels \"disturbance\",..: 7 7 7 7 7 7 7 7 8 8 ...\n#&gt;  $ category                    : num [1:19537] NA NA NA NA NA NA NA NA NA NA ...\n#&gt;  $ wind                        : int [1:19537] 25 25 25 25 25 25 25 30 35 40 ...\n#&gt;  $ pressure                    : int [1:19537] 1013 1013 1013 1013 1012 1012 1011 1006 1004 1002 ...\n#&gt;  $ tropicalstorm_force_diameter: int [1:19537] NA NA NA NA NA NA NA NA NA NA ...\n#&gt;  $ hurricane_force_diameter    : int [1:19537] NA NA NA NA NA NA NA NA NA NA ..."
  },
  {
    "objectID": "slides/5-data-structures.html#storms-subset",
    "href": "slides/5-data-structures.html#storms-subset",
    "title": "Lecture 05",
    "section": "Storms Subset",
    "text": "Storms Subset\n\n\n\nstorms$name[1:5]\n\n\n\n#&gt; [1] \"Amy\" \"Amy\" \"Amy\" \"Amy\" \"Amy\""
  },
  {
    "objectID": "slides/5-data-structures.html#storms-subset-1",
    "href": "slides/5-data-structures.html#storms-subset-1",
    "title": "Lecture 05",
    "section": "Storms Subset",
    "text": "Storms Subset\n\n\n\nstorms$name[1:5]\nstorms[[1]][1:5]\n\n\n\n#&gt; [1] \"Amy\" \"Amy\" \"Amy\" \"Amy\" \"Amy\"\n#&gt; [1] \"Amy\" \"Amy\" \"Amy\" \"Amy\" \"Amy\""
  },
  {
    "objectID": "slides/5-data-structures.html#storms-subset-2",
    "href": "slides/5-data-structures.html#storms-subset-2",
    "title": "Lecture 05",
    "section": "Storms Subset",
    "text": "Storms Subset\n\n\n\nstorms$name[1:5]\nstorms[[1]][1:5]\nstorms[1:5,1:5]\n\n\n\n#&gt; [1] \"Amy\" \"Amy\" \"Amy\" \"Amy\" \"Amy\"\n#&gt; [1] \"Amy\" \"Amy\" \"Amy\" \"Amy\" \"Amy\"\n#&gt; # A tibble: 5 × 5\n#&gt;   name   year month   day  hour\n#&gt;   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;\n#&gt; 1 Amy    1975     6    27     0\n#&gt; 2 Amy    1975     6    27     6\n#&gt; 3 Amy    1975     6    27    12\n#&gt; 4 Amy    1975     6    27    18\n#&gt; 5 Amy    1975     6    28     0"
  },
  {
    "objectID": "slides/5-data-structures.html#hurricane-ana",
    "href": "slides/5-data-structures.html#hurricane-ana",
    "title": "Lecture 05",
    "section": "Hurricane Ana",
    "text": "Hurricane Ana\n\n\n\n(ana = storms[storms$name == \"Ana\",])\n\n\n\n#&gt; # A tibble: 189 × 13\n#&gt;    name   year month   day  hour   lat  long status      category  wind pressure\n#&gt;    &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;          &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n#&gt;  1 Ana    1979     6    19    12  10   -45   tropical d…       NA    25     1011\n#&gt;  2 Ana    1979     6    19    18  10.2 -46   tropical d…       NA    25     1011\n#&gt;  3 Ana    1979     6    20     0  10.5 -47   tropical d…       NA    25     1010\n#&gt;  4 Ana    1979     6    20     6  10.9 -48.1 tropical d…       NA    25     1010\n#&gt;  5 Ana    1979     6    20    12  11.3 -49.2 tropical d…       NA    25     1010\n#&gt;  6 Ana    1979     6    20    18  11.8 -50.2 tropical d…       NA    25     1009\n#&gt;  7 Ana    1979     6    21     0  12.3 -51.1 tropical d…       NA    30     1009\n#&gt;  8 Ana    1979     6    21     6  12.9 -51.9 tropical d…       NA    30     1008\n#&gt;  9 Ana    1979     6    21    12  13.5 -52.7 tropical d…       NA    30     1008\n#&gt; 10 Ana    1979     6    21    18  13.9 -53.5 tropical d…       NA    30     1007\n#&gt; # ℹ 179 more rows\n#&gt; # ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#&gt; #   hurricane_force_diameter &lt;int&gt;"
  },
  {
    "objectID": "slides/5-data-structures.html#hurricane-ana-1",
    "href": "slides/5-data-structures.html#hurricane-ana-1",
    "title": "Lecture 05",
    "section": "Hurricane Ana",
    "text": "Hurricane Ana\n\n\n\n(ana = storms[storms$name == \"Ana\",])\nunique(ana$year)\n\n\n\n#&gt; # A tibble: 189 × 13\n#&gt;    name   year month   day  hour   lat  long status      category  wind pressure\n#&gt;    &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;          &lt;dbl&gt; &lt;int&gt;    &lt;int&gt;\n#&gt;  1 Ana    1979     6    19    12  10   -45   tropical d…       NA    25     1011\n#&gt;  2 Ana    1979     6    19    18  10.2 -46   tropical d…       NA    25     1011\n#&gt;  3 Ana    1979     6    20     0  10.5 -47   tropical d…       NA    25     1010\n#&gt;  4 Ana    1979     6    20     6  10.9 -48.1 tropical d…       NA    25     1010\n#&gt;  5 Ana    1979     6    20    12  11.3 -49.2 tropical d…       NA    25     1010\n#&gt;  6 Ana    1979     6    20    18  11.8 -50.2 tropical d…       NA    25     1009\n#&gt;  7 Ana    1979     6    21     0  12.3 -51.1 tropical d…       NA    30     1009\n#&gt;  8 Ana    1979     6    21     6  12.9 -51.9 tropical d…       NA    30     1008\n#&gt;  9 Ana    1979     6    21    12  13.5 -52.7 tropical d…       NA    30     1008\n#&gt; 10 Ana    1979     6    21    18  13.9 -53.5 tropical d…       NA    30     1007\n#&gt; # ℹ 179 more rows\n#&gt; # ℹ 2 more variables: tropicalstorm_force_diameter &lt;int&gt;,\n#&gt; #   hurricane_force_diameter &lt;int&gt;\n#&gt; [1] 1979 1985 1991 1997 2003 2009 2015 2021"
  },
  {
    "objectID": "slides/5-data-structures.html#hurricane-ana-2",
    "href": "slides/5-data-structures.html#hurricane-ana-2",
    "title": "Lecture 05",
    "section": "Hurricane Ana",
    "text": "Hurricane Ana\n\n\n\nana_2009 = ana[ana$year == 2009,]"
  },
  {
    "objectID": "slides/5-data-structures.html#hurricane-ana-3",
    "href": "slides/5-data-structures.html#hurricane-ana-3",
    "title": "Lecture 05",
    "section": "Hurricane Ana",
    "text": "Hurricane Ana\n\n\n\nana_2009 = ana[ana$year == 2009,]\n\n{plot(ana_2009$long, ana_2009$lat,\n     col = ana_2009$day, pch = 16, cex = 2)\nlines(ana_2009$long, ana_2009$lat)}"
  },
  {
    "objectID": "slides/5-data-structures.html#section",
    "href": "slides/5-data-structures.html#section",
    "title": "Lecture 05",
    "section": "",
    "text": "m = matrix(1:100, nrow = 10)"
  },
  {
    "objectID": "slides/5-data-structures.html#section-1",
    "href": "slides/5-data-structures.html#section-1",
    "title": "Lecture 05",
    "section": "",
    "text": "m = matrix(1:100, nrow = 10)\nmr = terra::rast()"
  },
  {
    "objectID": "slides/5-data-structures.html#section-2",
    "href": "slides/5-data-structures.html#section-2",
    "title": "Lecture 05",
    "section": "",
    "text": "m = matrix(1:100, nrow = 10)\nmr = terra::rast()\nterra::plot(mr)"
  },
  {
    "objectID": "slides/5-data-structures.html#real-data",
    "href": "slides/5-data-structures.html#real-data",
    "title": "Lecture 05",
    "section": "Real Data:",
    "text": "Real Data:\n\n(x = climateR::getGridMET(AOI = AOI::aoi_get(state = \"CO\"), \n                          varname = \"tmmx\", \"2025-01-01\"))\n#&gt; $daily_maximum_temperature\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 99, 169, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 0.04166669, 0.04166669  (x, y)\n#&gt; extent      : -109.0792, -102.0375, 36.9625, 41.0875  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=longlat +ellps=WGS84 +no_defs \n#&gt; source(s)   : memory\n#&gt; name        : tmmx_2025-01-01 \n#&gt; min value   :           261.9 \n#&gt; max value   :           281.6 \n#&gt; unit        :               K \n#&gt; time        : 2025-01-01 UTC\n\nplot(x[[1]])"
  },
  {
    "objectID": "slides/5-data-structures.html#daily-assignment",
    "href": "slides/5-data-structures.html#daily-assignment",
    "title": "Lecture 05",
    "section": "Daily Assignment:",
    "text": "Daily Assignment:\nCopy this into a Qmd file, answer the questions posed, and submit the rendered HTML file to canvas:\n\n# Attach the `palmerspenguins` package\n\n# 1. Examine at the dataset using the ?Help page\n\n# 2. what is the class of the penguins dataset?\n\n# 3. what is the structure of the penguins dataset?\n\n# 4. what are the dimensions of the penguins dataset?\n\n# 5. what are the column names of the penguins dataset?\n\n# 6. what type of data is `flipper_length_mm` and `Island`?\n\n# 7. what is the mean flipper length of the penguins?\n\n# 8. what is the standard deviation of flipper length in the penguins?\n\n# 9. what is the median body mass of the penguins?\n\n# 10. what is the Island of the 100th penguin?"
  },
  {
    "objectID": "resources/day-6-exercise.html",
    "href": "resources/day-6-exercise.html",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "",
    "text": "We are going to practice some data wrangling skills using a real-world dataset about COVID cases curated and maintained by the New York Times. The data has been used to create reports and data visualizations like this, and are archived on a GitHub repo here. Looking at the README in this repository we read:\n\n“We are providing two sets of data with cumulative counts of coronavirus cases and deaths: one with our most current numbers for each geography and another with historical data showing the tally for each day for each geography … the historical files are the final counts at the end of each day … The historical and live data are released in three files, one for each of these geographic levels: U.S., states and counties. A smaller file with only the most recent 30 days of data is also available”\n\nFor this lab we will use the historic, recent, country level data which is stored as an updating CSV at this URL:\n\nhttps://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv\n\n\n\n\nI will get you started this week, in the following code chunk, I am attaching the tidyverse package; saving the NY-Times URL as a value called “url”; and I am reading that URL into an object called covid\n\nlibrary(tidyverse)\nurl = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'\ncovid = read_csv(url)\nhead(covid, 5)\n\n# A tibble: 5 × 6\n  date       county  state   fips  cases deaths\n  &lt;date&gt;     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 2023-02-22 Autauga Alabama 01001 19732    230\n2 2023-02-22 Baldwin Alabama 01003 69641    724\n3 2023-02-22 Barbour Alabama 01005  7451    112\n4 2023-02-22 Bibb    Alabama 01007  8067    109\n5 2023-02-22 Blount  Alabama 01009 18616    261\n\n\nHint: You can print the top X rows of a data.frame with slice.\n\nslice(covid, 1:5)\n\nto print the top 5 columns of the raw covid object"
  },
  {
    "objectID": "resources/day-6-exercise.html#covid-19-data",
    "href": "resources/day-6-exercise.html#covid-19-data",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "",
    "text": "We are going to practice some data wrangling skills using a real-world dataset about COVID cases curated and maintained by the New York Times. The data has been used to create reports and data visualizations like this, and are archived on a GitHub repo here. Looking at the README in this repository we read:\n\n“We are providing two sets of data with cumulative counts of coronavirus cases and deaths: one with our most current numbers for each geography and another with historical data showing the tally for each day for each geography … the historical files are the final counts at the end of each day … The historical and live data are released in three files, one for each of these geographic levels: U.S., states and counties. A smaller file with only the most recent 30 days of data is also available”\n\nFor this lab we will use the historic, recent, country level data which is stored as an updating CSV at this URL:\n\nhttps://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv\n\n\n\n\nI will get you started this week, in the following code chunk, I am attaching the tidyverse package; saving the NY-Times URL as a value called “url”; and I am reading that URL into an object called covid\n\nlibrary(tidyverse)\nurl = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'\ncovid = read_csv(url)\nhead(covid, 5)\n\n# A tibble: 5 × 6\n  date       county  state   fips  cases deaths\n  &lt;date&gt;     &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 2023-02-22 Autauga Alabama 01001 19732    230\n2 2023-02-22 Baldwin Alabama 01003 69641    724\n3 2023-02-22 Barbour Alabama 01005  7451    112\n4 2023-02-22 Bibb    Alabama 01007  8067    109\n5 2023-02-22 Blount  Alabama 01009 18616    261\n\n\nHint: You can print the top X rows of a data.frame with slice.\n\nslice(covid, 1:5)\n\nto print the top 5 columns of the raw covid object"
  },
  {
    "objectID": "resources/day-6-exercise.html#question-1",
    "href": "resources/day-6-exercise.html#question-1",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Question 1:",
    "text": "Question 1:\nUse dplyr verbs to create a data.frame of the 5 counties with the most current cases. Remember, the cases and deaths are cumulative, so you only need to deal with the data for the most current (max) date.\n(Hint: filter, arrange, slice)"
  },
  {
    "objectID": "resources/day-6-exercise.html#question-2",
    "href": "resources/day-6-exercise.html#question-2",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Question 2:",
    "text": "Question 2:\nUse dplyr verbs to create a data.frame of the 5 states with the most cases current cases.\n(Hint: filter, group_by, summarize, arrange, slice)"
  },
  {
    "objectID": "resources/day-6-exercise.html#question-3",
    "href": "resources/day-6-exercise.html#question-3",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Question 3:",
    "text": "Question 3:\nUse the dplyr verbs to report the 5 counties with the worst current death/cases ratio: (e.g.\\(100* (deaths/cases)\\))\n(Hint: You will need to remove those where cases == 0 and county == Unknown) (Hint: filter, mutate, arrange, slice)"
  },
  {
    "objectID": "resources/day-6-exercise.html#question-4",
    "href": "resources/day-6-exercise.html#question-4",
    "title": "Ecosystem Science and Sustainability 330",
    "section": "Question 4:",
    "text": "Question 4:\nUse the dplyr verbs to report the 5 states with the worst current death/case ratio.\n(Hint: filter, group_by, summarize, mutate, arrange, slice)"
  }
]